<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>一个用Excel实现的万年历</title>
    <url>/a-perpetual-calendar-implemented-by-excel/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<p>Excel版本：V2007以上，不使用VBA</p>
<h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><strong>2019年</strong></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/1546527646465.png" alt="1546527646465"></p>
<a id="more"></a>
<p><strong>南宋末期公元1234年，蒙古灭金，次年麾兵南下，入侵南宋 …</strong></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/1546527761384.png" alt="1546527761384"></p>
<p><strong>“地球年：18903729</strong><br><strong>程心把最后一个数字的位数数了三遍，然后默默转身走出穿梭机 ……” —— 《三体 - 死神永生》</strong></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/1546527786540.png" alt="1546527786540"></p>
<h3 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h3><p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/1546527883211.png" alt="1546527883211"></p>
<p><strong>一共使用了17个自定义名称，不依赖一行VBA代码。</strong></p>
<p>这17个名称中，有2个相当于接收输入的参数：_y对应年，_m对应月。_unit0是单元格B5的别名。其余14个名称（公式）基于输入的年月，相互关联地完成了自动计算值的过程。</p>
<p><a href="/assets/files/calendar.xlsx">附件：calendar.xlsx</a></p>
<hr>
<p>（End)</p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>else</tag>
      </tags>
  </entry>
  <entry>
    <title>Gitlab CI/CD Practice —— Gitlab Runner in Docker/K8s</title>
    <url>/gitlab-cicd-gitlab-runner/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<blockquote>
<p>GitLab Runner is the open source project that is used to run your jobs and send the results back to GitLab. It is used in conjunction with <a href="https://about.gitlab.com/product/continuous-integration/" rel="external nofollow noopener noreferrer" target="_blank">GitLab CI</a>, the open-source continuous integration service included with GitLab that coordinates the jobs</p>
</blockquote>
<a id="more"></a>
<h3 id="gitlab-runner-in-Docker"><a href="#gitlab-runner-in-Docker" class="headerlink" title="gitlab-runner in Docker"></a>gitlab-runner in Docker</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@zlz srv]<span class="comment"># docker exec -it gitlab-runner /bin/bash</span></span><br><span class="line"></span><br><span class="line">root@9e069893788a:/<span class="comment"># gitlab-runner register</span></span><br><span class="line">Runtime platform                                    arch=amd64 os=linux pid=33 revision=fa86510e version=11.9.2</span><br><span class="line">Running <span class="keyword">in</span> system-mode.</span><br><span class="line">Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/):</span><br><span class="line">http://xxx.com/</span><br><span class="line">Please enter the gitlab-ci token <span class="keyword">for</span> this runner:</span><br><span class="line">peWrQo7zxksbVhsuTncq</span><br><span class="line">Please enter the gitlab-ci description <span class="keyword">for</span> this runner:</span><br><span class="line">[9e069893788a]: <span class="built_in">test</span> gitlab cid^H^H</span><br><span class="line">Please enter the gitlab-ci tags <span class="keyword">for</span> this runner (comma separated):</span><br><span class="line"><span class="built_in">test</span>,zlztest</span><br><span class="line">Registering runner... succeeded                     runner=peWrQo7z</span><br><span class="line">Please enter the executor: docker-ssh, parallels, virtualbox, kubernetes, docker, shell, ssh, docker+machine, docker-ssh+machine:</span><br><span class="line">docker</span><br><span class="line">Please enter the default Docker image (e.g. ruby:2.1):</span><br><span class="line">alpine:latest</span><br><span class="line">Runner registered successfully. Feel free to start it, but <span class="keyword">if</span> it<span class="string">'s running already the config should be automatically reloaded! </span></span><br><span class="line"><span class="string">root@9e069893788a:/#</span></span><br></pre></td></tr></table></figure>
<h3 id="gitlab-runner-in-k8s"><a href="#gitlab-runner-in-k8s" class="headerlink" title="gitlab-runner in k8s"></a>gitlab-runner in k8s</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">helm repo add gitlab https://charts.gitlab.io</span><br><span class="line">helm install --name gitlab-runner -f values.yml gitlab/gitlab-runner</span><br></pre></td></tr></table></figure>
<p>values.yml：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">gitlabUrl:</span> <span class="string">http://xxx.com/</span></span><br><span class="line"><span class="attr">runnerRegistrationToken:</span> <span class="string">"peWrQo7zxksbVhsuTncq"</span></span><br><span class="line"><span class="attr">unregisterRunners:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">concurrent:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">checkInterval:</span> <span class="number">30</span></span><br><span class="line"><span class="attr">rbac:</span></span><br><span class="line">  <span class="attr">create:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">clusterWideAccess:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">metrics:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">runners:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">ubuntu:16.04</span></span><br><span class="line">  <span class="attr">privileged:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">cache:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">  <span class="attr">builds:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">  <span class="attr">services:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">  <span class="attr">helpers:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">resources:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">affinity:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">nodeSelector:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">tolerations:</span> <span class="string">[]</span></span><br><span class="line"><span class="attr">hostAliases:</span> <span class="string">[]</span></span><br><span class="line"><span class="attr">podAnnotations:</span> <span class="string">&#123;&#125;</span></span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: gitlab-runner</span><br><span class="line">  namespace: default</span><br><span class="line">data:</span><br><span class="line">  config.toml: |</span><br><span class="line">    concurrent = 2</span><br><span class="line"></span><br><span class="line">    [[runners]]</span><br><span class="line">      name = <span class="string">"Kubernetes Runner"</span></span><br><span class="line">      url = <span class="string">"http://xxx.com/"</span></span><br><span class="line">      token = <span class="string">"peWrQo7zxksbVhsuTncq"</span></span><br><span class="line">      executor = <span class="string">"kubernetes"</span></span><br><span class="line">      [runners.kubernetes]</span><br><span class="line">        namespace = <span class="string">"default"</span></span><br><span class="line">        image = <span class="string">"busybox"</span></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: gitlab-runner</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      name: gitlab-runner</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        name: gitlab-runner</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - args:</span><br><span class="line">        - run</span><br><span class="line">        image: gitlab/gitlab-runner:latest</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        name: gitlab-runner</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - mountPath: /etc/gitlab-runner</span><br><span class="line">          name: config</span><br><span class="line">      restartPolicy: Always</span><br><span class="line">      volumes:</span><br><span class="line">      - configMap:</span><br><span class="line">          name: gitlab-runner</span><br><span class="line">        name: config</span><br></pre></td></tr></table></figure>
<p>创建runner然后进入容器手动注册。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl apply -f &lt;yaml&gt;</span><br><span class="line">gitlab-ci-multi-runner register</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">gitlab-runner register</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl create -f gitlab-sc.yml</span><br><span class="line">helm install --name gitlab-runner --namespace gitlabci -f values.yml gitlab/gitlab-runner</span><br></pre></td></tr></table></figure>
<p>相关yaml：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">gitlabci</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gitlabci</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: gitlab-runner/templates/service-account.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">gitlab-runner-admin</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">gitlabci</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: gitlab-runner/templates/role.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">"ClusterRole"</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">gitlab-runner-admin</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">gitlabci</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span> <span class="string">["*"]</span></span><br><span class="line">  <span class="attr">resources:</span> <span class="string">["*"]</span></span><br><span class="line">  <span class="attr">verbs:</span> <span class="string">["*"]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: gitlab-runner/templates/role-binding.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">"ClusterRoleBinding"</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">gitlab-runner-admin</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">gitlabci</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">"ClusterRole"</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">gitlab-runner-admin</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">gitlab-runner-admin</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">gitlabci</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>Gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建Apache HTTP服务</title>
    <url>/how-to-use-apache-httpd/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<p>系统：CentOS 7.2</p>
<h3 id="更新EPEL源"><a href="#更新EPEL源" class="headerlink" title="更新EPEL源"></a>更新EPEL源</h3><p>   <strong><a href="https://fedoraproject.org/wiki/EPEL?rd=EPEL/en#What_is_Extra_Packages_for_Enterprise_Linux_.28or_EPEL.29.3F" rel="external nofollow noopener noreferrer" target="_blank">🔗</a> What is Extra Packages for Enterprise Linux (or EPEL)?</strong></p>
<p>Extra Packages for Enterprise Linux (or EPEL) is a Fedora Special Interest Group that creates, maintains, and manages a high quality set of additional packages for Enterprise Linux, including, but not limited to, <a href="https://fedoraproject.org/wiki/Red_Hat_Enterprise_Linux" rel="external nofollow noopener noreferrer" target="_blank">Red Hat Enterprise Linux</a> (RHEL), CentOS and Scientific Linux (SL), Oracle Linux (OL).</p>
<p><strong>EPEL</strong>（Extra Packages for Enterprise Linux）是由 Fedora 社区打造，为 RHEL 及衍生发行版如 CentOS等提供高质量软件包的项目。</p>
<a id="more"></a>
  <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果不能直接yum更新epel</span></span><br><span class="line">yum install epel-release -y</span><br><span class="line"><span class="comment"># 尝试</span></span><br><span class="line">yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br></pre></td></tr></table></figure>
<h3 id="安装httpd"><a href="#安装httpd" class="headerlink" title="安装httpd"></a>安装httpd</h3>  <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install -y httpd</span><br></pre></td></tr></table></figure>
<h3 id="开放80端口"><a href="#开放80端口" class="headerlink" title="开放80端口"></a>开放80端口</h3>  <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果直接关闭防火墙，则无需针对80端口的特殊设置</span></span><br><span class="line"><span class="comment"># systemctl stop firewall.service</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启防火墙</span></span><br><span class="line"><span class="comment"># systemctl start firewall.service</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果要使用iptables作防火墙</span></span><br><span class="line"><span class="comment"># yum -y install iptables-services</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果是firewall作防火墙，则</span></span><br><span class="line">firewall-cmd --zone public --add-port 80/tcp --pernerment</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果是iptables作防火墙</span></span><br><span class="line">/sbin/iptables -I INPUT -p tcp --dport 80 -j ACCEPT</span><br><span class="line">/sbin/iptables save</span><br><span class="line"><span class="comment"># 也可尝试用 /etc/init.d/iptables 或 /etc/rc.d/init.d/iptables</span></span><br></pre></td></tr></table></figure>
<p>  如果要让Apache使用其它端口，修改<code>/etc/httpd/conf/httpd.conf</code> :</p>
  <figure class="highlight"><table><tr><td class="code"><pre><span class="line">Listen &lt;port&gt;</span><br></pre></td></tr></table></figure>
<p>  修改默认网站根目录也是在此文件，默认目录是<code>/var/www/html</code>。</p>
<h3 id="自定义index-html"><a href="#自定义index-html" class="headerlink" title="自定义index.html"></a>自定义index.html</h3>  <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir -p /var/www/html/&#123;hello,mydoc&#125;  	<span class="comment">#测试创建2个目录</span></span><br><span class="line">chmod 755 /var/www/html/&#123;hello,mydoc&#125;</span><br></pre></td></tr></table></figure>
<p>   添加<code>/var/www/html/index.html</code>，内容如下：</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">        a:link, a:visited &#123;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">        &#125;</span><br><span class="line">        a:hover &#123;</span><br><span class="line">            text-decoration: underline;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Your page title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"hello/"</span> <span class="attr">style</span>=<span class="string">"font-size:32px"</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mydoc/"</span> <span class="attr">style</span>=<span class="string">"font-size:32px"</span>&gt;</span>mydoc<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>  首页效果：</p>
<p>  <img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2018/1546087466767.png" alt="图片1"></p>
<h3 id="调整显示设置"><a href="#调整显示设置" class="headerlink" title="调整显示设置"></a>调整显示设置</h3><p>  添加到<code>/etc/httpd/conf/httpd.conf</code>：</p>
  <figure class="highlight"><table><tr><td class="code"><pre><span class="line">IndexOptions NameWidth=60	#Name列宽60</span><br><span class="line">IndexOptions IconHeight=16	#图标高16</span><br><span class="line">IndexOptions IconWidth=16	#，宽16</span><br><span class="line">IndexOptions FoldersFirst	#目录在前</span><br><span class="line">IndexOptions VersionSort	#版本排序</span><br></pre></td></tr></table></figure>
  <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">service httpd restart</span><br></pre></td></tr></table></figure>
<p>  调整后目录显示效果如下：</p>
<p>  <img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2018/1546086571624.png" alt="图片2"></p>
<hr>
<p>(End)</p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>else</tag>
      </tags>
  </entry>
  <entry>
    <title>使用PyCharm远程调试</title>
    <url>/how-to-use-remote-interpreter-in-pycharm-md/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<p>软件：PyCharm Professional Edition 2018.3</p>
<p>如果想在Windows系统中使用PyCharm进行Python代码开发，而在Linux机器上部署运行，那么可以使用PyCharm的远程调试功能。这样可以避免因使用不同系统下的Python环境，在Windows上正常运行，而在Linux上报错，需要再次修改代码才能运行。</p>
<a id="more"></a>
<p>仍以之前的mysite2这个django demo为例，步骤如下：</p>
<h3 id="配置Deployment"><a href="#配置Deployment" class="headerlink" title="配置Deployment"></a>配置Deployment</h3><p>【Tools】&gt;&gt; 【Deployment】&gt;&gt;【Configuration…】，新建一个Deployment。配置连接、目录映射，并排除不作同步的目录。</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/pycharm/1550042018420.png" alt="1550042018420"></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/pycharm/1550045540775.png" alt="1550045540775"></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/pycharm/1550045568720.png" alt="1550045568720"></p>
<p>配置完成后，手动点击【Tools】&gt;&gt; 【Deployment】 &gt;&gt; 【Upload to…】，将项目代码同步到所设置的Linux主机上。</p>
<p>然后，登录Linux主机，创建虚拟环境：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /srv</span><br><span class="line">virtualenv venv</span><br><span class="line"><span class="built_in">source</span> venv/bin/activate</span><br><span class="line"><span class="comment"># 安装django和MySQL-python</span></span><br><span class="line">pip install django==1.11</span><br><span class="line">pip install MySQL-python</span><br></pre></td></tr></table></figure>
<p>测试一下，从浏览器访问正常即可。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 已activate虚拟环境</span></span><br><span class="line">python /srv/mysite2/manage.py runserver 0.0.0.0:8000</span><br></pre></td></tr></table></figure>
<h3 id="配置Interpreter"><a href="#配置Interpreter" class="headerlink" title="配置Interpreter"></a>配置Interpreter</h3><p>根据上面配置好的部署来配置远程解释器，并选择在Linux主机上创建的虚拟环境venv作远程解释器。</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/pycharm/1550043819067.png" alt="1550043819067"></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/pycharm/1550044379484.png" alt="1550044379484"></p>
<h3 id="配置Run-Debug"><a href="#配置Run-Debug" class="headerlink" title="配置Run/Debug"></a>配置Run/Debug</h3><p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/pycharm/1550044673006.png" alt="1550044673006"></p>
<p>至此，Deployment、Remote Interpreter和Run三处配置均完成，可以直接从PyCharm运行调试了：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/pycharm/1550044955274.png" alt="1550044955274"></p>
<hr>
<p>(End)</p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>else</tag>
      </tags>
  </entry>
  <entry>
    <title>实用文档汇总</title>
    <url>/ref-docs/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>汇总部分实用文档，以便下载取用、学习</p>
</blockquote>
<a id="more"></a>
<h1 id="A"><a href="#A" class="headerlink" title="A"></a>A</h1><ul>
<li><a href="/assets/files/docs/Ali-java-handbook.pdf">阿里Java开发手册正式版PDF</a></li>
<li><a href="/assets/files/docs/ASCII码对照表.pdf">ASCII码对照表</a></li>
</ul>
<h1 id="D"><a href="#D" class="headerlink" title="D"></a>D</h1><ul>
<li><a href="/assets/files/docs/Docker-basic.pptx">Docker基础总结PPT</a></li>
</ul>
<h1 id="J"><a href="#J" class="headerlink" title="J"></a>J</h1><ul>
<li><a href="/assets/files/docs/Java编程思想（第二版）.chm">Java编程思想（第二版）</a></li>
<li><a href="/assets/files/docs/经典SQL语句大全.doc">经典SQL语句大全</a></li>
</ul>
<h1 id="P"><a href="#P" class="headerlink" title="P"></a>P</h1><ul>
<li><a href="/assets/files/docs/Python_3.4_入门指南（官方中文版）.pdf">Python_3.4_入门指南（官方中文版）</a>)</li>
</ul>
<h1 id="R"><a href="#R" class="headerlink" title="R"></a>R</h1><ul>
<li><a href="/assets/files/docs/Redis实战.pdf">Redis实战</a></li>
<li><a href="/assets/files/replay-tools.zip">replay-tools</a></li>
</ul>
<h1 id="S"><a href="#S" class="headerlink" title="S"></a>S</h1><ul>
<li><a href="/assets/files/docs/the-art-of-sql.pdf">SQL语言艺术</a></li>
<li><a href="/assets/files/docs/深入浅出MySQL（删减版）.pdf">深入浅出MySQL（删减版）</a></li>
<li><a href="/assets/files/docs/spring-boot-reference.pdf">Springboot参考</a></li>
</ul>
]]></content>
      <categories>
        <category>else</category>
      </categories>
      <tags>
        <tag>else</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式-实验</title>
    <url>/singleton-test/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingletonType1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonType1 singletonType1 = <span class="keyword">new</span> SingletonType1();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonType1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonType1 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singletonType1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>测试代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Thread&gt; threadList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Set&lt;Singleton&gt; singletonSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> SET_MAXSIZE = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SET_MAXSIZE; i++) &#123;</span><br><span class="line">            Thread th = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    SingletonType1 singleton = SingletonType1.getInstance();</span><br><span class="line">                    singletonSet.add(singleton);</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + singleton);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            threadList.add(th);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Thread thread : threadList) &#123;</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(singletonSet.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>某次运行结果：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">Thread-59:cn.lzzeng.home.singleton.SingletonType1@e0614d</span><br><span class="line">Thread-61:cn.lzzeng.home.singleton.SingletonType1@e0614d</span><br><span class="line">Thread-62:cn.lzzeng.home.singleton.SingletonType1@e0614d</span><br><span class="line">Thread-63:cn.lzzeng.home.singleton.SingletonType1@e0614d</span><br><span class="line">3</span><br></pre></td></tr></table></figure>
<p>最后一行打印出来的size是3，难道<strong>饿汉式</strong>单例模式非线程安全？再查看前面100行打印的显示对象地址，均相同。其实，size计数不正确是<code>HashSet</code>导致的。<code>HashSet</code>不是线程安全的，可以用<code>ConcurrentHashMap</code>来替代相关代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Set&lt;Singleton&gt; singletonSet = new HashSet&lt;&gt;();</span></span><br><span class="line">Map&lt;String, String&gt; singletonMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"><span class="comment">// singletonSet.add(singleton);</span></span><br><span class="line">singletonMap.put(singleton.toString(), <span class="string">""</span>);</span><br></pre></td></tr></table></figure>
<h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><ol>
<li><strong>懒汉式-非线程同步</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉式-非线程同步</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingletonType2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonType2 singtonType2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonType2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonType2 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == singtonType2) &#123;</span><br><span class="line">            singtonType2 = <span class="keyword">new</span> SingletonType2();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singtonType2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再修改测试代码的这一行后再测试：</p>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SingletonType1 singleton = SingletonType1.getInstance();</span></span><br><span class="line">SingletonType2 singleton = SingletonType2.getInstance();</span><br></pre></td></tr></table></figure>
<p>某次结果如下：</p>
   <figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">Thread-2:cn.lzzeng.home.singleton.SingletonType2@11f7d35</span><br><span class="line">Thread-5:cn.lzzeng.home.singleton.SingletonType2@1e9b76c</span><br><span class="line">...</span><br><span class="line">Thread-0:cn.lzzeng.home.singleton.SingletonType2@1e9b76c</span><br><span class="line">2</span><br></pre></td></tr></table></figure>
<p>从打印的前2行来看，确实出现了获取实例不唯一的现象，可见是非线程安全的。</p>
<ol start="2">
<li><strong>懒汉式-线程同步</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉式-线程同步</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingletonType3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonType3 singtonType3;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonType3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> SingletonType3 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == singtonType3) &#123;</span><br><span class="line">            singtonType3 = <span class="keyword">new</span> SingletonType3();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singtonType3;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此法使用<code>synchronized</code>修饰static方法<code>getInstance</code>，实测未见异常。</p>
<p>如果改用类的class对象作为同步监视器对象，即如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * synchronized类名.class</span></span><br><span class="line"><span class="comment"> * synchronized中不加if (null == singtonType3)，测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonType3 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == singtonType3) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (SingletonType3<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">            singtonType3 = <span class="keyword">new</span> SingletonType3();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> singtonType3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样看起来似乎没问题，但实测出现如下结果：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/1546591780472.png" alt="1546591780472"></p>
<p>这是为什么？上一种synchronized修饰方法的方式中，加锁后，进入方法执行时，首先会判断一次是否已存在单类的实例，而后一种方式synchronized后没有这个判断步骤。也就是说，要想只创建一个实例，<strong>加锁的区域必须包含判断是否已实例化的步骤</strong>。否则，仅仅是保证了多个线程通过new创建实例的过程在时序上不会发生重叠。</p>
<p>正确的写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonType3 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == singtonType3) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (SingletonType3<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == singtonType3) &#123;</span><br><span class="line">                singtonType3 = <span class="keyword">new</span> SingletonType3();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> singtonType3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="双重校验锁"><a href="#双重校验锁" class="headerlink" title="双重校验锁"></a>双重校验锁</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双重校验锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingletonType5</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> SingletonType5 SingletonType5;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonType5</span> <span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonType5 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (SingletonType5 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (SingletonType5<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (SingletonType5 == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    SingletonType5 = <span class="keyword">new</span> SingletonType5();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> SingletonType5;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>双重校验锁方式采用双锁机制，安全且在多线程情况下能保持高性能。与第二种懒汉式的区别只在于多了一个<code>volatile</code>。</p>
<h3 id="静态内部类式"><a href="#静态内部类式" class="headerlink" title="静态内部类式"></a>静态内部类式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静态内部类式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingletonType4</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SingletonType4 INSTANCE = <span class="keyword">new</span> SingletonType4();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonType4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> SingletonType4 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种方式同样利用了类加载机制来保证初始化实例时只有一个线程，它跟<strong>饿汉式</strong>不同的是：饿汉式只要 Singleton类（即<code>SingletonType1</code>）被加载了，就会实例化<code>instance</code>，没有达到懒加载的效果。而这种方式是Singleton类被加载后，只有显式地调用<code>getInstance</code>方法时，才会加载<code>SingletonHolder</code>类，从而实例化<code>instance</code>。</p>
<h3 id="枚举式"><a href="#枚举式" class="headerlink" title="枚举式"></a>枚举式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 传说中的最完美的单例模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySingleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">enum</span> MyEnumSingle &#123;</span><br><span class="line">        INSTANCE;</span><br><span class="line">        <span class="keyword">private</span> MySingleton singleOne;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">MyEnumSingle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            singleOne = <span class="keyword">new</span> MySingleton();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> MySingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> singleOne;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MySingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MySingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MyEnumSingle.INSTANCE.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>枚举方式是Effective Java作者Josh Bloch提倡的方式。特点：</p>
<ul>
<li>避免了多线程同步问题，线程安全</li>
<li>支持序列化机制，防止反序列化重新创建新的对象，绝对防止多次实例化</li>
<li>可以防止利用反射强行构建单例对象</li>
<li>利用内部类实现懒加载</li>
</ul>
<hr>
<p>（End)</p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>else</tag>
      </tags>
  </entry>
  <entry>
    <title>股价查询小工具一枚</title>
    <url>/tools-stock-price/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>只能查询A股，用到了3个新浪股票数据接口：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">http://money.finance.sina.com.cn/quotes_service/api/json_v2.php/CN_MarketData.getKLineData</span><br><span class="line">http://hq.sinajs.cn/?list=sz000002</span><br><span class="line">https://suggest3.sinajs.cn/suggest/key=万科A</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>按股票名称查询最新股价、查询 第前3交易日、查询 前3个交易日，按股票代码查询 前3个交易日 效果如下：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/image-20200928004218980.png" alt="image-20200928004218980" style="zoom:67%;"></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用：</span></span><br><span class="line">[root@VM_0_13_centos ~]<span class="comment"># cp stock-price.py /usr/local/bin/stock-price</span></span><br><span class="line">[root@VM_0_13_centos ~]<span class="comment"># chmod +x /usr/local/bin/stock-price</span></span><br><span class="line"></span><br><span class="line">[root@VM_0_13_centos ~]<span class="comment"># stock-price -h</span></span><br><span class="line">usage: stock-price [-h] [-C] [-Z] stock_code [day]</span><br><span class="line"></span><br><span class="line">positional arguments:</span><br><span class="line">  stock_code      the stock code or the stock name, e.g. sz000002 or 万科A</span><br><span class="line">  day             <span class="built_in">which</span> day(s), use the number of days before today, e.g.</span><br><span class="line">                  <span class="string">"3,1"</span> or <span class="string">"1,3"</span> or <span class="string">"3,"</span> or <span class="string">",1"</span> or <span class="string">"3"</span>, by default <span class="string">","</span> is the</span><br><span class="line">                  same as <span class="string">"10,1"</span>, and the quotes are not necessary. Maximum</span><br><span class="line">                  days: 137</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --<span class="built_in">help</span>      show this <span class="built_in">help</span> message and <span class="built_in">exit</span></span><br><span class="line">  -C, --no-color  cancel color</span><br><span class="line">  -Z, --en        cancel zh-CN</span><br></pre></td></tr></table></figure>
<p><a href="/assets/files/stock-price.py">附件：stock-price.py</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Docker部署一个Django Demo</title>
    <url>/test-docker-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<blockquote>
<p>系统：CentOS 7.2</p>
</blockquote>
<p>准备一个Django Demo，运行后效果如下：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/1547641817316.png" alt="1547641817316"></p>
<a id="more"></a>
<p>这是Django官网上的一个简单的投票demo，是使用NginX + supervisord + gunicorn + venv来部署的。现在要做的是把它制作成docker镜像，然后以容器的方式运行它。</p>
<hr>
<p><strong>步骤如下：</strong></p>
<h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><p>我使用的是云主机，已配置yum源，可以直接</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install docker</span><br></pre></td></tr></table></figure>
<p>因已安装docker，提示更新如下（更新后原有镜像被删除了）：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/1547633107189.png" alt="1547633107189"></p>
<p>yum源配置如下：</p>
<p>/etc/yum.repos.d/CentOS-Base.repo文件：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[extras]</span></span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">gpgkey</span>=http://mirrors.tencentyun.com/centos/RPM-GPG-KEY-CentOS-<span class="number">7</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">baseurl</span>=http://mirrors.tencentyun.com/centos/<span class="variable">$releasever</span>/extras/<span class="variable">$basearch</span>/</span><br><span class="line"><span class="attr">name</span>=Qcloud centos extras - <span class="variable">$basearch</span></span><br><span class="line"><span class="section">[os]</span></span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">gpgkey</span>=http://mirrors.tencentyun.com/centos/RPM-GPG-KEY-CentOS-<span class="number">7</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">baseurl</span>=http://mirrors.tencentyun.com/centos/<span class="variable">$releasever</span>/os/<span class="variable">$basearch</span>/</span><br><span class="line"><span class="attr">name</span>=Qcloud centos os - <span class="variable">$basearch</span></span><br><span class="line"><span class="section">[updates]</span></span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">gpgkey</span>=http://mirrors.tencentyun.com/centos/RPM-GPG-KEY-CentOS-<span class="number">7</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">baseurl</span>=http://mirrors.tencentyun.com/centos/<span class="variable">$releasever</span>/updates/<span class="variable">$basearch</span>/</span><br><span class="line"><span class="attr">name</span>=Qcloud centos updates - <span class="variable">$basearch</span></span><br></pre></td></tr></table></figure>
<p>/etc/yum.repos.d/CentOS-Epel.repo文件：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[epel]</span></span><br><span class="line"><span class="attr">name</span>=EPEL for redhat/centos <span class="variable">$releasever</span> - <span class="variable">$basearch</span></span><br><span class="line"><span class="attr">failovermethod</span>=priority</span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">gpgkey</span>=http://mirrors.tencentyun.com/epel/RPM-GPG-KEY-EPEL-<span class="number">7</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">baseurl</span>=http://mirrors.tencentyun.com/epel/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/</span><br></pre></td></tr></table></figure>
<hr>
<p>示例应用根目录是<code>mysite2</code>，如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">|   |-- mysite2</span><br><span class="line">|   |   |-- fixtures</span><br><span class="line">|   |   |-- manage.py</span><br><span class="line">|   |   |-- mysite2</span><br><span class="line">|   |   |-- polls</span><br><span class="line">|   |   `-- templates</span><br></pre></td></tr></table></figure>
<p>为了方便制作docker镜像，重新组织成了下面的样子：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@lzzeng docker_demo]<span class="comment"># tree -L 3 .</span></span><br><span class="line">.</span><br><span class="line">|-- application</span><br><span class="line">|   |-- docker-compose.yml</span><br><span class="line">|   |-- Dockerfile</span><br><span class="line">|   |-- mysite2</span><br><span class="line">|   |   |-- fixtures</span><br><span class="line">|   |   |-- manage.py</span><br><span class="line">|   |   |-- mysite2</span><br><span class="line">|   |   |-- polls</span><br><span class="line">|   |   `-- templates</span><br><span class="line">|   |-- mysite2_nginx.conf</span><br><span class="line">|   |-- mysite2_supervisord.ini</span><br><span class="line">|   |-- requirements.txt</span><br><span class="line">|   |-- start_script</span><br><span class="line">|   `-- <span class="built_in">wait</span>-for-it.sh</span><br><span class="line">`-- readMe.md</span><br></pre></td></tr></table></figure>
<p><code>application</code>目录下的文件<code>docker-compose.yml</code>、<code>Dockerfile</code>等7个文件是新增的。作用如下：</p>
<p><strong>docker-compose.yml</strong>：通过docker-compose启动容器的配置，定义了多个容器的启动参数，及容器关联等<br><strong>Dockerfile</strong>：制作Docker镜像的脚本编排，类似于Makefile、SPEC文件等<br><strong>mysite2_nginx.conf</strong>：事先写好的NginX配置文件<br><strong>mysite2_supervisord.ini</strong>：事先写好的Supervisord配置文件<br><strong>requirements.txt</strong>：记录制作docker镜像需要安装的依赖，Dockerfile中用到<br><strong>start_script</strong>： 容器启动入口，Dockerfile中定义了此脚本为启动入口<br><strong>wait-for-it.sh</strong>：等待其它容器（服务）启动完毕的脚本</p>
<hr>
<h3 id="编写Dockerfile"><a href="#编写Dockerfile" class="headerlink" title="编写Dockerfile"></a>编写Dockerfile</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 基于centos:7</span></span><br><span class="line">FROM centos:7</span><br><span class="line">MAINTAINER zeng &lt;zeng@abc.com&gt;</span><br><span class="line">ENV TZ <span class="string">"Asia/Shanghai"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置若干环境变量</span></span><br><span class="line"><span class="comment"># Local directory with project source</span></span><br><span class="line">ENV DOCKER_SRC=mysite2</span><br><span class="line"><span class="comment"># Directory in container for all project files</span></span><br><span class="line">ENV DOCKER_HOME=/srv</span><br><span class="line"><span class="comment"># Directory in container for project source files</span></span><br><span class="line">ENV DOCKER_PROJECT=/srv/webapp  <span class="comment"># mysite2下面的文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装基础镜像中缺失的软件</span></span><br><span class="line"><span class="comment"># Install required packages and remove the apt packages cache when done.</span></span><br><span class="line">RUN yum -y install epel-release &amp;&amp; \</span><br><span class="line">    yum -y install <span class="built_in">which</span> &amp;&amp; \</span><br><span class="line">    yum -y install python-pip &amp;&amp; \</span><br><span class="line">    yum -y install supervisor-3.1.4 &amp;&amp; \</span><br><span class="line">    yum -y install git nginx gcc gcc-c++ python-devel &amp;&amp; \</span><br><span class="line">    yum -y install mysql &amp;&amp; \</span><br><span class="line">    yum -y install mysql-devel &amp;&amp; \</span><br><span class="line">    yum -y install nc &amp;&amp; \</span><br><span class="line">    yum clean all &amp;&amp; \</span><br><span class="line">    pip install -U pip</span><br><span class="line"></span><br><span class="line"><span class="comment"># cd $DOCKER_PROJECT</span></span><br><span class="line">WORKDIR <span class="variable">$DOCKER_PROJECT</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># COPY指令将从构建上下文目录中 &lt;源路径&gt; 的文件/目录复制到新的一层的镜像内的 &lt;目标路径&gt; 位置</span></span><br><span class="line"><span class="comment"># 即Dockerfile所在目录下的文件复制到$DOCKER_PROJECT</span></span><br><span class="line">COPY ./ ./</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create application subdirectories</span></span><br><span class="line">WORKDIR <span class="variable">$DOCKER_PROJECT</span></span><br><span class="line">RUN mkdir static <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 Dockerfile 中，可以事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据</span></span><br><span class="line">VOLUME [<span class="string">"<span class="variable">$DOCKER_HOME</span>/media/"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># RUN pip install -r requirements.txt</span></span><br><span class="line">RUN pip install -i https://pypi.tuna.tsinghua.edu.cn/simple -r requirements.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露某些端口</span></span><br><span class="line">EXPOSE 8000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定容器启动入口</span></span><br><span class="line">RUN chmod u+x start_script</span><br><span class="line">ENTRYPOINT [<span class="string">"./start_script"</span>]</span><br></pre></td></tr></table></figure>
<p>构建镜像：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/1547635956715.png" alt="1547635956715"></p>
<p>构建成功：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/1547636296801.png" alt="1547636296801"></p>
<p>测试容器：</p>
<p><code>mysite2</code>应用中用到了数据库，需要先启动mysql容器：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run --name db -d -e MYSQL_ROOT_PASSWORD=qwerasdf -e MYSQL_DATABASE=mysite2_db -v /root/mysite2_db:/var/lib/mysql mysql:5.7</span><br></pre></td></tr></table></figure>
<p>通过<code>mysql:5.7</code>镜像创建mysql容器时，会自动创建名为<code>mysite2_db</code>的数据库，并设置数据库密码为<code>qwerasdf</code>,以备连接。容器中的<code>/var/lib/mysql</code>目录会同步到数据卷<code>/root/mysite2_db</code>。</p>
<p>执行后如下：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/1547637360611.png" alt="1547637360611"></p>
<p>然后，通过已制作好的镜像<code>zeng/docker_demo_gunicorn:0.3</code>来启动<code>mysite2</code>：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/1547637610068.png" alt="1547637610068"></p>
<p>启动成功：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/1547637646260.png" alt="1547637646260"></p>
<p>浏览器访问：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/1547637779496.png" alt="1547637779496"></p>
<p>因为<code>mysite2</code>没有处理这个请求路径，改为：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/1547637911779.png" alt="1547637911779"></p>
<p>对接mysql时，用户名、密码是在django settings里有如下配置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>:&#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>:<span class="string">'mysite2_db'</span>,</span><br><span class="line">        <span class="string">'USER'</span>:<span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: os.environ.get(<span class="string">'DB_ENV_MYSQL_ROOT_PASSWORD'</span>),</span><br><span class="line">        <span class="string">'HOST'</span>:os.environ.get(<span class="string">'DB_PORT_3306_TCP_ADDR'</span>),</span><br><span class="line">        <span class="string">'PORT'</span>:<span class="number">3306</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>start_script</code>：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># nginx settings</span></span><br><span class="line">sed -i <span class="string">'/user/&#123;s/nginx/root/&#125;'</span> /etc/nginx/nginx.conf</span><br><span class="line">ln -s /srv/webapp/mysite2_nginx.conf /etc/nginx/conf.d/</span><br><span class="line">nginx</span><br><span class="line"></span><br><span class="line">chmod u+x <span class="built_in">wait</span>-for-it.sh</span><br><span class="line">./<span class="built_in">wait</span>-for-it.sh <span class="variable">$DB_PORT_3306_TCP_ADDR</span>:<span class="variable">$DB_PORT_3306_TCP_PORT</span> &amp;</span><br><span class="line"><span class="built_in">wait</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># application settings</span></span><br><span class="line"><span class="built_in">export</span> DJANGO_SETTINGS_MODULE=mysite2.settings.server</span><br><span class="line"><span class="built_in">cd</span> mysite2</span><br><span class="line">./manage.py migrate --noinput</span><br><span class="line">./manage.py loaddata ./fixtures/superuser.json  <span class="comment"># 加载root用户信息，见下</span></span><br><span class="line">./manage.py collectstatic --noinput</span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器中启动mysite2</span></span><br><span class="line">ln -s /srv/webapp/mysite2_supervisord.ini /etc/supervisord.d/</span><br><span class="line">supervisord -c /etc/supervisord.conf</span><br></pre></td></tr></table></figure>
<p>mysite2/fixtures/superuser.json：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123; <span class="attr">"model"</span>: <span class="string">"auth.user"</span>,</span><br><span class="line">        <span class="attr">"pk"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"fields"</span>: &#123;</span><br><span class="line">            <span class="attr">"username"</span>: <span class="string">"root"</span>,</span><br><span class="line">            <span class="attr">"password"</span>: <span class="string">"pbkdf2_sha256$36000$jEzTV4h887Ze$zQQMAMraWN9suHPapbb7LOP6pZ3ADc7KxCUv2oR8Px4="</span>,</span><br><span class="line">            <span class="attr">"is_superuser"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">"is_staff"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">"is_active"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>其中的password生成方式如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@lzzeng mysite2]<span class="comment"># export DJANGO_SETTINGS_MODULE=mysite2.settings.server</span></span><br><span class="line">[root@lzzeng mysite2]<span class="comment"># python</span></span><br><span class="line">Python 2.7.5 (default, Oct 30 2018, 23:45:53) </span><br><span class="line">[GCC 4.8.5 20150623 (Red Hat 4.8.5-36)] on linux2</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; from django.contrib.auth.hashers import make_password</span><br><span class="line">&gt;&gt;&gt; make_password(<span class="string">'qwerasdf'</span>)</span><br><span class="line">u<span class="string">'pbkdf2_sha256$36000$jEzTV4h887Ze$zQQMAMraWN9suHPapbb7LOP6pZ3ADc7KxCUv2oR8Px4='</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>
<p>以<code>root:qwerasdf</code>登录admin页面添加polls记录后，效果如下：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/1547639904076.png" alt="1547639904076"></p>
<p>以上完成了docker镜像制作（未上传到远程镜像库），然后使用镜像运行mysite2的过程。</p>
<hr>
<h3 id="使用docker-compose"><a href="#使用docker-compose" class="headerlink" title="使用docker-compose"></a>使用docker-compose</h3><p>上面启动了两个容器，比较麻烦。可以使用docker-compose来编排容器，实现微服务架构部署方式。</p>
<p>编写<code>docker-compose.yml</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">web:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">zeng/docker_demo_gunicorn:0.3</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"db"</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"8100:8000"</span></span><br><span class="line"><span class="comment">#    volumes:</span></span><br><span class="line"><span class="comment">#      - "$&#123;DOCKER_VOLUME_PATH&#125;/docker_demo/media:/root/media"</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line"><span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">'Asia/Shanghai'</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">qwerasdf</span></span><br><span class="line">      <span class="attr">MYSQL_DATABASE:</span> <span class="string">mysite2_db</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">['mysqld',</span> <span class="string">'--character-set-server=utf8'</span><span class="string">]</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"$&#123;DOCKER_VOLUME_PATH&#125;/docker_demo/db:/var/lib/mysql"</span></span><br></pre></td></tr></table></figure>
<p>先停止、删除正在运行的容器：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/1547640333927.png" alt="1547640333927"></p>
<p><code>docker-compose up</code>：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/1547640687934.png" alt="1547640687934"></p>
<p>启动成功：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/1547640743179.png" alt="1547640743179"></p>
<p>停止：<code>docker-compose stop</code></p>
<hr>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul>
<li><a href="https://yeasy.gitbooks.io/docker_practice/" rel="external nofollow noopener noreferrer" target="_blank">Docker — 从入门到实践</a></li>
</ul>
<p>(End)</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Django笔记</title>
    <url>/2020/Django-note/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="django1-11-和django2-2的版本比较"><a href="#django1-11-和django2-2的版本比较" class="headerlink" title="django1.11 和django2.2的版本比较"></a>django1.11 和django2.2的版本比较</h2><p>Django2.<em>版本和Django1.</em>版本相比，虽然有很多细小地方的改动，但就其平常和开发者使用比较密切相关的地方来说，主要有如下三个方面：</p>
<ul>
<li>url配置方式(主要差异)</li>
<li>数据库操作</li>
<li>用户认证操作</li>
</ul>
<a id="more"></a>
<h3 id="url配置方式"><a href="#url配置方式" class="headerlink" title="url配置方式"></a>url配置方式</h3><ul>
<li>Django1.<em>中配置url地址使用的是：<code>url函数</code>，而Django2.</em>中配置url地址使用的是：<code>path函数</code></li>
<li>Django1.*从url地址中提取参数是使用正则表达式来来提取，格式为：<code>(?P&lt;参数名&gt;正则表达式)</code></li>
<li>Django2.*从url地址中提取参数是使用路由转换器来提取，格式为：<code>&lt;路由转换器:参数名&gt;</code></li>
</ul>
<p>Django2.<em>对于提取参数的限制并不如Django1.</em>的正则方式控制的灵活和严格</p>
<p>可以到django.urls.converters模块中进行查看，比如int路由转换器对应的源码</p>
<p>自定义路由转换器分为两步：</p>
<p>① 自定义路由转换器类，在转换器类中，需要通过regex类属性指明提取参数所对应的正则表达式</p>
<p>② 调用register_converter方法注册自定义的路由转换器，注册之后才能进行使用</p>
<p>2.2中的<code>re_path</code>其实就相当于Django1.*中的<code>url</code>函数</p>
<h3 id="数据库设置"><a href="#数据库设置" class="headerlink" title="数据库设置"></a>数据库设置</h3><p>mysql数据库默认的事务隔离级别为：repeatable read(可重复读)</p>
<p>Django2.*会把mysql数据库事务的隔离级别默认设置为：read committed(读取已提交)</p>
<p>ForeignKey和OneToOneField关系中的on_delete参数</p>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p><strong>is_authenticated和is_anonymous的使用</strong></p>
<p>在Django框架中，我们可以通过<code>request.user</code>获取请求的用户对象，然后通过<code>request.user.is_authenticated</code>判断该用户是否是认证用户，或通过<code>request.user.is_anonymous</code>判断该用户是否是匿名用户，<code>is_authenticated</code>和<code>is_anonymous</code>在Django1.<em>中可以当做方法一样使用，但是在Django2.</em>中只能当做属性来用</p>
<p>来源：”一文弄懂Django1.<em>和Django2.</em>的差异“</p>
<hr>
<p><strong>版本匹配</strong><br>Django 1.11 requires Python 2.7, 3.4, 3.5, 3.6, or 3.7 (as of 1.11.17).<br>Django 2.0 supports Python 3.4, 3.5, 3.6, and 3.7.<br>Django 2.2 supports Python 3.5, 3.6, 3.7, and 3.8 (as of 2.2.8).<br>Django 3.1 supports Python 3.6, 3.7, and 3.8. </p>
<p><a href="https://www.djangoproject.com/download/" rel="external nofollow noopener noreferrer" target="_blank">https://www.djangoproject.com/download/</a><br><a href="https://docs.djangoproject.com/en/3.1/releases/" rel="external nofollow noopener noreferrer" target="_blank">https://docs.djangoproject.com/en/3.1/releases/</a></p>
<hr>
<p><strong>ORM</strong></p>
<p>ORM将python代码转换成SQL语句，pymysql等数据库连接库将SQL语句发送给数据库，并返回结果。</p>
<p>优点：</p>
<ul>
<li><p>面向对象的方式操作数据，提升了效率</p>
</li>
<li><p>使python代码与数据库无关</p>
</li>
</ul>
<p>缺点：</p>
<ul>
<li><p>会牺牲代码执行效率</p>
</li>
<li><p>长期使用ORM，会降低编写SQL语句能力</p>
</li>
</ul>
<p><strong>MVC</strong></p>
<p>MVC 模式（Model–view–controller）是软件工程中的一种软件架构模式，把软件系统分为三个基本部分：模型（Model）、视图（View）和控制器（Controller）</p>
<p>体现了模块化、分层设计思想：<br>M —— 数据层、持久层<br>V —— 视图层、表示层<br>C —— 控制层、逻辑层</p>
<p>与<strong>MTV</strong>模型的区别，主要在于<strong>MVC</strong>中的C包含了URL路由的功能。</p>
<p>以springMVC框架为例说明：</p>
<p>1、用户发送请求至前端控制器DispatcherServlet。</p>
<p>2、DispatcherServlet收到请求调用HandlerMapping处理器映射器。</p>
<p>3、处理器映射器找到具体的处理器(可以根据xml配置、注解进行查找)，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。</p>
<p>4、DispatcherServlet调用HandlerAdapter处理器适配器。</p>
<p>5、HandlerAdapter经过适配调用具体的处理器(Controller，也叫后端控制器)。</p>
<p>6、Controller执行完成返回ModelAndView。</p>
<p>7、HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet。</p>
<p>8、DispatcherServlet将ModelAndView传给ViewResolver视图解析器。</p>
<p>9、ViewResolver解析后返回具体View。</p>
<p>10、DispatcherServlet根据View进行渲染视图（即将模型数据填充至视图中）。</p>
<p>11、DispatcherServlet响应用户。</p>
<p>其中，4+5通过HandlerAdapter执行处理器是<strong>适配器模式</strong>。</p>
<p><strong>SpringMVC工作原理</strong></p>
<p>第一步:用户发起请求到前端控制器（DispatcherServlet）</p>
<p>第二步：前端控制器请求处理器映射器（HandlerMappering）去查找处理器（Handle）：通过xml配置或者注解进行查找</p>
<p>第三步：找到以后处理器映射器（HandlerMappering）像前端控制器返回执行链（HandlerExecutionChain）</p>
<p>第四步：前端控制器（DispatcherServlet）调用处理器适配器（HandlerAdapter）去执行处理器（Handler）</p>
<p>第五步：处理器适配器去执行Handler</p>
<p>第六步：Handler执行完给处理器适配器返回ModelAndView</p>
<p>第七步：处理器适配器向前端控制器返回ModelAndView</p>
<p>第八步：前端控制器请求视图解析器（ViewResolver）去进行视图解析</p>
<p>第九步：视图解析器像前端控制器返回View</p>
<p>第十步：前端控制器对视图进行渲染</p>
<p>第十一步：前端控制器向用户响应结果</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker笔记</title>
    <url>/2020/Docker-learning/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><ol>
<li><a href="https://docs.docker.com/engine/docker-overview/" rel="external nofollow noopener noreferrer" target="_blank"><strong>Docker</strong></a> 是一种<a href="https://en.wikipedia.org/wiki/Operating-system-level_virtualization" rel="external nofollow noopener noreferrer" target="_blank">操作系统层面的虚拟化技术</a>，基于 <code>Linux</code> 内核的 <a href="https://zh.wikipedia.org/wiki/Cgroups" rel="external nofollow noopener noreferrer" target="_blank">cgroup</a>，<a href="https://en.wikipedia.org/wiki/Linux_namespaces" rel="external nofollow noopener noreferrer" target="_blank">namespace</a>，以及 <a href="https://docs.docker.com/storage/storagedriver/overlayfs-driver/" rel="external nofollow noopener noreferrer" target="_blank">OverlayFS</a> 类的 <a href="https://en.wikipedia.org/wiki/Union_mount" rel="external nofollow noopener noreferrer" target="_blank">Union FS</a> 等技术对进程进行封装隔离 。<a id="more"></a></li>
<li>Docker是 C/S（客户端/服务器）架构。</li>
<li>Docker客户端与Docker守护进程通信，后者负责构建，运行和分发Docker容器。</li>
<li>Docker客户端和守护程序使用REST API，通过UNIX套接字或网络接口进行通信。</li>
</ol>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/architecture.svg" alt="Docker Architecture Diagram" style="zoom:60%;"></p>
<h2 id="为什么使用Docker"><a href="#为什么使用Docker" class="headerlink" title="为什么使用Docker"></a>为什么使用Docker</h2><blockquote>
<ul>
<li><strong>更高效的利用系统资源</strong></li>
<li><strong>更快速的启动时间</strong></li>
<li><strong>一致的运行环境</strong></li>
<li><strong>持续交付和部署</strong></li>
<li><strong>更轻松的迁移</strong></li>
<li><strong>更轻松的维护和扩展</strong></li>
</ul>
</blockquote>
<p>由于容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，Docker对系统资源的利用率更高。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。因此，相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。</p>
<p>传统的虚拟机技术启动应用服务往往需要数分钟，而 Docker容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启动时间。大大的节约了开发、测试、部署的时间。</p>
<p>Docker的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性。一次创建、配置，任意地方正常运行。</p>
<p><code>Docker</code> 使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。</p>
<h2 id="Docker-与-VM-比较"><a href="#Docker-与-VM-比较" class="headerlink" title="Docker 与 VM 比较"></a>Docker 与 VM 比较</h2><p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/1561264737939.png" alt="1561264737939" style="zoom:45%;"></p>
<table>
<thead>
<tr>
<th>特性</th>
<th>容器</th>
<th>虚拟机</th>
</tr>
</thead>
<tbody>
<tr>
<td>启动</td>
<td>秒级</td>
<td>分钟级</td>
</tr>
<tr>
<td>硬盘使用</td>
<td>一般为 <code>MB</code>（有的小到仅几百KB，如K8s的pause镜像）</td>
<td>一般为 <code>GB</code></td>
</tr>
<tr>
<td>性能</td>
<td>接近原生</td>
<td>弱于</td>
</tr>
<tr>
<td>系统支持量</td>
<td>单机支持上千个容器</td>
<td>一般几十个</td>
</tr>
</tbody>
</table>
<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><ol>
<li><strong>Docker 镜像是一个特殊的文件系统</strong>，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</li>
<li>镜像采用分层存储，实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。这个特点也使得镜像的复用、定制变的更为容易</li>
<li>镜像在构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。</li>
</ol>
<h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><ol>
<li>镜像（<code>Image</code>）和容器（<code>Container</code>）的关系，好比面向对象程序设计中的 <code>类</code> 和 <code>实例</code> 。</li>
<li>容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 <a href="https://en.wikipedia.org/wiki/Linux_namespaces" rel="external nofollow noopener noreferrer" target="_blank">命名空间</a>。</li>
<li>每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，这个为容器运行时读写而准备的存储层叫 <strong>容器存储层</strong>。</li>
<li>容器存储层的生存周期和容器一样。</li>
<li>不随容器销毁的数据的读写，应该使用 <strong>数据卷</strong>（Volume）、或者绑定宿主目录。</li>
</ol>
<h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><p>仓库是镜像的版本库，不同的镜像标签代表该镜像的不同版本。Docker提供了<strong>Docker Registry</strong>作为镜像仓库管理服务，由于没有图形界面等原因，一般会使用Docker Hub （外部个人环境）或 Harbor（私服）托管Docker镜像。</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/1149398-20190917180200231-1649134988.png" alt="img" style="zoom:50%;"></p>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p>当前使用的docker版本：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM_0_13_centos ~]<span class="comment"># docker version</span></span><br><span class="line">Client:</span><br><span class="line"> Version:           18.09.6</span><br><span class="line"> API version:       1.39</span><br><span class="line"> Go version:        go1.10.8</span><br><span class="line"> Git commit:        481bc77156</span><br><span class="line"> Built:             Sat May  4 02:34:58 2019</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Experimental:      <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          18.09.6</span><br><span class="line">  API version:      1.39 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.10.8</span><br><span class="line">  Git commit:       481bc77</span><br><span class="line">  Built:            Sat May  4 02:02:43 2019</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h2 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h2><table>
<thead>
<tr>
<th>功能</th>
<th>命令</th>
</tr>
</thead>
<tbody>
<tr>
<td>拉取镜像</td>
<td><code>docker pull [选项] [仓库地址[:端口号]/]仓库名[:标签]</code></td>
</tr>
<tr>
<td>列出镜像</td>
<td><code>docker images</code> 或者 <code>docker image ls</code></td>
</tr>
<tr>
<td>构建</td>
<td>docker build  -t  &lt;镜像名称]&gt;  .   [-f Dockerfile路径]</td>
</tr>
<tr>
<td>重命名</td>
<td>docker tag   &lt;原镜像&gt;   &lt;新镜像&gt;</td>
</tr>
<tr>
<td>推送</td>
<td>docker push   &lt;镜像&gt;</td>
</tr>
<tr>
<td>删除镜像</td>
<td><code>docker image rm [选项] &lt;镜像1&gt; [&lt;镜像2&gt; ...]</code> 或 <code>docker rmi ...</code></td>
</tr>
<tr>
<td>查看镜像信息</td>
<td><code>docker inspect  &lt;镜像&gt;</code></td>
</tr>
</tbody>
</table>
<p>部分示例如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker pull alpine:latest</span></span><br><span class="line"><span class="comment"># docker image ls</span></span><br><span class="line"><span class="comment"># docker inspect alpine:latest |jq ".[0].RootFS"</span></span><br><span class="line"><span class="comment"># docker rmi alpine:latest</span></span><br></pre></td></tr></table></figure>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201114182505135.png" alt="image-20201114182505135"></p>
<h2 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h2><table>
<thead>
<tr>
<th>功能</th>
<th>命令</th>
</tr>
</thead>
<tbody>
<tr>
<td>运行容器</td>
<td><code>docker run [选项] &lt;镜像&gt; [命令]</code></td>
</tr>
<tr>
<td>停止容器</td>
<td><code>docker stop &lt;容器&gt;</code></td>
</tr>
<tr>
<td>列出运行中的容器</td>
<td><code>docker ps</code></td>
</tr>
<tr>
<td>删除容器</td>
<td><code>docker  rm  &lt;容器&gt;</code></td>
</tr>
</tbody>
</table>
<p>部分示例如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker run -it --rm --name test_a  alpine:3 sh   # -i交互，-t终端，--rm退出即删除</span></span><br><span class="line">/ <span class="comment"># ls</span></span><br><span class="line">/ <span class="comment"># exit</span></span><br><span class="line"><span class="comment"># 在exit之前，另开一个ssh窗口查看</span></span><br><span class="line"><span class="comment"># docker ps |grep test_a</span></span><br><span class="line"><span class="comment"># 退出后再查看，上面这个容器已消失</span></span><br></pre></td></tr></table></figure>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201114182805493.png" alt="image-20201114182805493"></p>
<h2 id="磁盘空间管理"><a href="#磁盘空间管理" class="headerlink" title="磁盘空间管理"></a>磁盘空间管理</h2><p><code>docker system</code> 命令用于管理磁盘空间。</p>
<h3 id="查看docker磁盘占用"><a href="#查看docker磁盘占用" class="headerlink" title="查看docker磁盘占用"></a>查看docker磁盘占用</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker system df</span></span><br></pre></td></tr></table></figure>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201114182958747.png" alt="image-20201114182958747" style="zoom:50%;"></p>
<h3 id="清理docker磁盘空间"><a href="#清理docker磁盘空间" class="headerlink" title="清理docker磁盘空间"></a>清理docker磁盘空间</h3><p><code>docker system prune</code> 命令可以用于清理磁盘，删除关闭的容器、无用的数据卷和网络，以及dangling镜像(即无tag的镜像)。<br><code>docker system prune -a</code> 命令清理得更加彻底，可以将没有容器使用Docker镜像都删掉。<br>注意，这两个命令会把你暂时关闭的容器，以及暂时没有用到的Docker镜像都删掉。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker system prune </span></span><br><span class="line">WARNING! This will remove:</span><br><span class="line">        - all stopped containers</span><br><span class="line">        - all networks not used by at least one container</span><br><span class="line">        - all dangling images</span><br><span class="line">        - all dangling build cache</span><br><span class="line">Are you sure you want to <span class="built_in">continue</span>? [y/N] y</span><br><span class="line">Deleted Containers:</span><br><span class="line">（略）</span><br><span class="line">Deleted Networks:</span><br><span class="line">（略）</span><br><span class="line">Total reclaimed space: 2.627GB</span><br></pre></td></tr></table></figure>
<h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><p>Dockerfile 是一个描述如何构建镜像的文本文件，其中包含多条<strong>指令(Instruction)</strong>，每条指令构建一层镜像。<br>部分常用指令：</p>
<ul>
<li>FROM：指定基础镜像，如 <code>FROM apline:latest</code>，alpine是一个精简的Linux系统镜像。</li>
<li>MAINTAINER：设置镜像的维护者信息</li>
<li>ARG：参数设置</li>
<li>ENV：环境变量设置</li>
<li>ADD：添加构建上下文，ADD添加tar.gz包会自动解压。</li>
<li>COPY：复制文件</li>
<li>RUN：编写一些shell命令</li>
<li>EXPOSE：暴露容器需监听的端口</li>
<li>CMD：容器启动后执行的命令</li>
<li>ENTRYPOINT：入口指令</li>
</ul>
<font color="red">问题：有了 <code>CMD</code> 后，为什么还要有 <code>ENTRYPOINT</code> ？</font>

<p>当存在 <code>ENTRYPOINT</code> 后，<code>CMD</code> 的内容将会作为参数传给 <code>ENTRYPOINT</code></p>
<p>示例：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM_0_13_centos demo]<span class="comment"># cat Dockerfile-curl</span></span><br><span class="line">FROM alpine:latest</span><br><span class="line"></span><br><span class="line">RUN apk add curl --no-cache</span><br><span class="line">CMD [<span class="string">"curl"</span>, <span class="string">"-s"</span>, <span class="string">"https://baidu.com/"</span>]</span><br><span class="line"></span><br><span class="line">[root@VM_0_13_centos demo]<span class="comment"># cat Dockerfile-curl2 </span></span><br><span class="line">FROM alpine:latest</span><br><span class="line"></span><br><span class="line">RUN apk add curl --no-cache</span><br><span class="line">ENTRYPOINT [<span class="string">"curl"</span>, <span class="string">"-s"</span>, <span class="string">"https://baidu.com/"</span>]</span><br></pre></td></tr></table></figure>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201114164336012.png" alt="image-20201114164336012" style="zoom:50%;"></p>
<p>加CMD参数 <code>-I</code> 时，只有 mycurl2 支持：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201114164149433.png" alt="image-20201114164149433" style="zoom:50%;"></p>
<p>有些时候，启动主进程前，需要一些准备工作，这些准备工作是和容器 <code>CMD</code> 无关的，无论 <code>CMD</code> 为什么，都需要事先进行一个预处理的工作。这种情况下，可以写一个脚本，然后放入 <code>ENTRYPOINT</code> 中去执行，而这个脚本会将接到的参数（也就是CMD）作为命令，在脚本最后执行。</p>
<p>示例：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM_0_13_centos demo]<span class="comment"># cat start.sh</span></span><br><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># begin: do sth</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"do sth ..."</span></span><br><span class="line"><span class="comment"># end: do sth</span></span><br><span class="line"></span><br><span class="line">cmd=<span class="string">"curl -s https://baidu.com/"</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">which</span> <span class="string">"<span class="variable">$1</span>"</span> 1&gt;/dev/null 2&gt;&amp;1; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"exec 1:"</span></span><br><span class="line">    <span class="built_in">exec</span> <span class="variable">$@</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"exec 2:"</span></span><br><span class="line">    <span class="built_in">exec</span> <span class="variable">$cmd</span> <span class="variable">$@</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"end."</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#########################################################</span></span><br><span class="line">[root@VM_0_13_centos demo]<span class="comment"># cat Dockerfile-curl3</span></span><br><span class="line">FROM alpine:latest</span><br><span class="line"></span><br><span class="line">WORKDIR /opt</span><br><span class="line">ADD start.sh start.sh</span><br><span class="line">RUN chmod +x start.sh &amp;&amp; apk add curl --no-cache</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [<span class="string">"/opt/start.sh"</span>]</span><br><span class="line">CMD [<span class="string">"curl"</span>, <span class="string">"-s"</span>, <span class="string">"https://baidu.com/"</span>]</span><br></pre></td></tr></table></figure>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201114174831869.png"></p>
<ul>
<li><p>VOLUME指令</p>
<p>可以通过 <code>docker run</code> 命令的 <code>-v</code> 参数创建 volume 挂载点。如果通过 dockerfile 的 VOLUME 指令可以在镜像中创建挂载点，那么通过该镜像创建容器时不指定 -v 参数时，会在宿主机上随机生成一个数据目录绑定到 VOLUME 所指定的容器内目录。</p>
<p>以Wordpress的volume为例：</p>
</li>
</ul>
<p><strong>wordpress</strong></p>
<p>缺省情况下，wordpress容器内的/var/www/html目录会被随机挂载到宿主机docker数据目录下。</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201114191120752.png" alt="image-20201114191120752"></p>
<p><strong>wordpress mysql</strong></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201114191512336.png" alt="image-20201114191512336"></p>
<h2 id="Dockerfile示例"><a href="#Dockerfile示例" class="headerlink" title="Dockerfile示例"></a>Dockerfile示例</h2><h3 id="示例-–-nginx"><a href="#示例-–-nginx" class="headerlink" title="示例 – nginx"></a>示例 – nginx</h3><p>假设nginx没有提供docker镜像，使用精简的Linux系统镜像alpine来制作nginx容器：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">FROM alpine:latest</span><br><span class="line">MAINTAINER  tom  tom@abc.com</span><br><span class="line"> </span><br><span class="line"><span class="comment"># install nginx</span></span><br><span class="line">RUN apk --update add nginx</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"> </span><br><span class="line">CMD [ <span class="string">"nginx"</span> ,  <span class="string">"-g"</span> ,  <span class="string">"daemon off;"</span> ]</span><br></pre></td></tr></table></figure>
<h3 id="示例-–-myweb"><a href="#示例-–-myweb" class="headerlink" title="示例 – myweb"></a>示例 – myweb</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">FROM python:2.7-alpine</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ARG APP_HOME</span><br><span class="line">ENV APP_HOME=<span class="variable">$&#123;APP_HOME:-/opt/apps&#125;</span></span><br><span class="line"></span><br><span class="line">WORKDIR <span class="variable">$APP_HOME</span></span><br><span class="line">COPY ./myweb  myweb</span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">"https://mirror.tuna.tsinghua.edu.cn/alpine/v3.11/main/"</span> &gt; /etc/apk/repositories &amp;&amp; \</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"https://mirror.tuna.tsinghua.edu.cn/alpine/v3.11/community/"</span> &gt;&gt; /etc/apk/repositories &amp;&amp; \</span><br><span class="line">    apk add gcc g++ make mysql-dev --no-cache &amp;&amp; \</span><br><span class="line">    pip config <span class="built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple &amp;&amp; \</span><br><span class="line">    pip install -U pip &amp;&amp; \</span><br><span class="line">    pip install supervisor==4.2.0 &amp;&amp; \</span><br><span class="line">    /usr/<span class="built_in">local</span>/bin/echo_supervisord_conf &gt; /etc/supervisord.conf &amp;&amp; \</span><br><span class="line">    mkdir /etc/supervisord.d &amp;&amp; \</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"[include]"</span> &gt;&gt; /etc/supervisord.conf &amp;&amp; \</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"files = supervisord.d/*.conf"</span> &gt;&gt; /etc/supervisord.conf &amp;&amp; \</span><br><span class="line">    pip install -r <span class="variable">$APP_HOME</span>/myweb/requirements.txt &amp;&amp; \</span><br><span class="line">    cp <span class="variable">$APP_HOME</span>/myweb/myweb_supervisord.conf  /etc/supervisord.d/</span><br><span class="line"></span><br><span class="line">EXPOSE <span class="variable">$PORT</span></span><br><span class="line">CMD [<span class="string">"supervisord"</span>, <span class="string">"-n"</span>, <span class="string">"-c"</span>, <span class="string">"/etc/supervisord.conf"</span>]</span><br></pre></td></tr></table></figure>
<h2 id="构建、运行"><a href="#构建、运行" class="headerlink" title="构建、运行"></a>构建、运行</h2><blockquote>
<p>发出 <code>docker build</code> 命令时，当前工作目录称为build context。默认情况下，Dockerfile假定位于此处，但可以使用文件标志（-f）指定其他位置。不管Dockerfile实际位于何处，当前目录中文件和目录的所有递归内容都将作为构建上下文发送到Docker守护进程。</p>
</blockquote>
<h3 id="示例-–-nginx-1"><a href="#示例-–-nginx-1" class="headerlink" title="示例 – nginx"></a>示例 – nginx</h3><p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201114130107466.png" alt="image-20201114130107466"></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201114130305997.png" alt="image-20201114130305997"></p>
<p>可以看出 nginx:tom 比官方提供的 nginx:alpine 还更小。</p>
<h3 id="示例-–-myweb-1"><a href="#示例-–-myweb-1" class="headerlink" title="示例 – myweb"></a>示例 – myweb</h3><p>Dockerfile文件名称不是 <code>Dockerfile</code> 时，需通过 <code>-f</code> 参数指定，点号 <code>.</code> 表示当前目录作为构建上下文。如果在demo的上一级目录执行构建，则命令可以这样写：</p>
<p><code>docker build -f demo/Dockerfile-myweb -t myweb:0.1 demo</code></p>
<p>构建时打印的内容：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM_0_13_centos demo]<span class="comment"># docker build -f Dockerfile-myweb -t myweb:0.1 .</span></span><br><span class="line">Sending build context to Docker daemon  1.117MB</span><br><span class="line">Step 1/9 : FROM python:2.7-alpine</span><br><span class="line"> ---&gt; 8579e446340f</span><br><span class="line">Step 2/9 : ARG APP_HOME</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 9c173fd3707d</span><br><span class="line">Step 3/9 : ENV APP_HOME=<span class="variable">$&#123;APP_HOME:-/opt/apps&#125;</span></span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 721207dba6e7</span><br><span class="line">Step 4/9 : WORKDIR <span class="variable">$APP_HOME</span></span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 99a3b8ce16a1</span><br><span class="line">Step 5/9 : COPY ./myweb  myweb</span><br><span class="line"> ---&gt; 2e9790a1fa90</span><br><span class="line">Step 6/9 : VOLUME [<span class="string">"<span class="variable">$APP_HOME</span>/myweb"</span>]</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 1e647a4987d7</span><br><span class="line">Removing intermediate container 1e647a4987d7</span><br><span class="line"> ---&gt; dd03f21e2aa6</span><br><span class="line"><span class="comment">############### 第7步 构建RUN命令，更新软件源，更新软件，安装软件及其依赖等，步骤最多</span></span><br><span class="line">Step 7/9 : RUN <span class="built_in">echo</span> <span class="string">"https://mirror.tuna.tsinghua.edu.cn/alpine/v3.11/main/"</span> &gt; /etc/apk/repositories &amp;&amp;     <span class="built_in">echo</span> <span class="string">"https://mirror.tuna.tsinghua.edu.cn/alpine/v3.11/community/"</span> &gt;&gt; /etc/apk/repositories &amp;&amp;     apk add gcc g++ make mysql-dev --no-cache &amp;&amp;     pip config <span class="built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple &amp;&amp;     pip install -U pip &amp;&amp;     pip install supervisor==4.2.0 &amp;&amp;     /usr/<span class="built_in">local</span>/bin/echo_supervisord_conf &gt; /etc/supervisord.conf &amp;&amp;     mkdir /etc/supervisord.d &amp;&amp;     <span class="built_in">echo</span> <span class="string">"[include]"</span> &gt;&gt; /etc/supervisord.conf &amp;&amp;     <span class="built_in">echo</span> <span class="string">"files = supervisord.d/*.conf"</span> &gt;&gt; /etc/supervisord.conf &amp;&amp;     <span class="built_in">cd</span> <span class="variable">$APP_HOME</span>/myweb &amp;&amp;     pip install -r requirements.txt &amp;&amp;     cp <span class="variable">$APP_HOME</span>/myweb/myweb_supervisord.conf  /etc/supervisord.d/</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 3b58653054de</span><br><span class="line">fetch https://mirror.tuna.tsinghua.edu.cn/alpine/v3.11/main/x86_64/APKINDEX.tar.gz</span><br><span class="line">fetch https://mirror.tuna.tsinghua.edu.cn/alpine/v3.11/community/x86_64/APKINDEX.tar.gz</span><br><span class="line">(1/27) Upgrading libcrypto1.1 (1.1.1d-r3 -&gt; 1.1.1g-r0)</span><br><span class="line">（此处省略若干行）</span><br><span class="line">(27/27) Installing mariadb-dev (10.4.15-r0)</span><br><span class="line">Executing busybox-1.31.1-r9.trigger</span><br><span class="line">Executing ca-certificates-20191127-r1.trigger</span><br><span class="line">OK: 206 MiB <span class="keyword">in</span> 57 packages</span><br><span class="line">Writing to /root/.config/pip/pip.conf</span><br><span class="line">（此处省略若干行）</span><br><span class="line">Successfully installed pip-20.2.4</span><br><span class="line">（此处省略若干行）</span><br><span class="line">Successfully installed supervisor-4.2.0</span><br><span class="line">（此处省略若干行）</span><br><span class="line">Successfully built mysqlclient</span><br><span class="line">Installing collected packages: pytz, django, mysqlclient</span><br><span class="line">Successfully installed django-1.11 mysqlclient-1.3.12 pytz-2020.4</span><br><span class="line">Removing intermediate container 3b58653054de</span><br><span class="line"> ---&gt; 74221bc92419</span><br><span class="line"><span class="comment">############### 第8步 暴露监听端口</span></span><br><span class="line">Step 8/9 : EXPOSE <span class="variable">$PORT</span></span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> bc109d388ec3</span><br><span class="line">Removing intermediate container bc109d388ec3</span><br><span class="line"> ---&gt; 7f45f5e2be2c</span><br><span class="line">Step 9/9 : CMD [<span class="string">"supervisord"</span>, <span class="string">"-n"</span>, <span class="string">"-c"</span>, <span class="string">"/etc/supervisord.conf"</span>]</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> f0f4f867b879</span><br><span class="line">Removing intermediate container f0f4f867b879</span><br><span class="line"> ---&gt; 4eede34e1dad</span><br><span class="line">Successfully built 4eede34e1dad</span><br><span class="line">Successfully tagged myweb:0.1</span><br></pre></td></tr></table></figure>
<p><strong>运行myweb</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM_0_13_centos opt]<span class="comment"># docker run -d --name myweb -p 8009:8000 myweb:0.1</span></span><br></pre></td></tr></table></figure>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201114145718759.png" alt="image-20201114145718759" style="zoom:67%;"></p>
<p><strong>查看容器进程</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM_0_13_centos demo]<span class="comment"># docker ps |grep myweb</span></span><br></pre></td></tr></table></figure>
<p><strong>查看volume</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker inspect 9ad3a7949611 |jq ".[0].Mounts"</span></span><br><span class="line">或者</span><br><span class="line"><span class="comment"># docker inspect myweb |jq ".[0].Mounts"</span></span><br></pre></td></tr></table></figure>
<p><strong>查看env</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM_0_13_centos demo]<span class="comment"># docker inspect myweb |jq ".[0].Config.Env"</span></span><br></pre></td></tr></table></figure>
<p><strong>进入容器查看</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM_0_13_centos demo]<span class="comment"># docker exec -it myweb sh</span></span><br><span class="line">/opt/apps <span class="comment"># hostname</span></span><br><span class="line">/opt/apps <span class="comment"># env</span></span><br><span class="line">/opt/apps <span class="comment"># ps -ef</span></span><br></pre></td></tr></table></figure>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201114193616082.png" alt="image-20201114193616082"></p>
<h2 id="Dockerfile最佳实践"><a href="#Dockerfile最佳实践" class="headerlink" title="Dockerfile最佳实践"></a>Dockerfile最佳实践</h2><p>精简Docker镜像的好处：</p>
<ol>
<li>减少构建时间</li>
<li>减少磁盘使用量</li>
<li>减少下载时间</li>
<li>因为包含文件少，攻击面减小，提高了安全性</li>
<li>提高部署速度</li>
</ol>
<h3 id="选择合适的基础镜像"><a href="#选择合适的基础镜像" class="headerlink" title="选择合适的基础镜像"></a>选择合适的基础镜像</h3><p><code>alpine</code> 是一个精简的Linux发行版，只有5MB左右。各开发语言和框架一般都有基于alpine的镜像版本，如 <code>python:3-alpine</code>，可优先考虑使用alpine版本的镜像。</p>
<p><code>scratch</code> 是一个空镜像。</p>
<p>对于 Linux 下静态编译的程序来说，并不需要有操作系统提供运行时支持，所需的一切库都已经在可执行文件里了，因此直接 <code>FROM scratch</code> 会让镜像体积更加小巧。使用Go语言开发的应用很多会使用这种方式来制作镜像。</p>
<p>Google K8s的 <code>pause</code> 镜像正是使用了scratch作为基础镜像：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">FROM scratch</span><br><span class="line">ARG ARCH</span><br><span class="line">ADD bin/pause-<span class="variable">$&#123;ARCH&#125;</span> /pause</span><br><span class="line">ENTRYPOINT [<span class="string">"/pause"</span>]</span><br></pre></td></tr></table></figure>
<p>其大小不到1MB。</p>
<p>如果希望镜像里可以包含一些常用的Linux工具，可以使用 <code>busybox</code>。</p>
<h3 id="多阶段构建"><a href="#多阶段构建" class="headerlink" title="多阶段构建"></a>多阶段构建</h3><p>使用多阶段构建，可以在Dockerfile中使用多个FROM语句，每条FROM指令可以使用不同的基础镜像，然后选择性地将服务组件从一个阶段COPY到另一个阶段，在最终镜像中只保留需要的内容。结合以下</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">FROM &lt;base_image&gt; AS &lt;tmp_image&gt;</span><br><span class="line">COPY --from=&lt;tmp_image&gt; &lt;src&gt; &lt;dest&gt;</span><br></pre></td></tr></table></figure>
<p>两条语句来使用多阶段构建。假设有一个springboot demo：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">FROM maven:3.5-jdk-8-alpine AS builder</span><br><span class="line">WORKDIR /opt</span><br><span class="line">COPY . /opt/</span><br><span class="line">RUN mvn clean package</span><br><span class="line"></span><br><span class="line">FROM java:8-alpine AS filnal</span><br><span class="line">WORKDIR /opt</span><br><span class="line">COPY --from=builder /opt/target/demo.jar .</span><br><span class="line">EXPOSE 8080</span><br><span class="line">CMD [<span class="string">"java"</span>, <span class="string">"-jar"</span>, <span class="string">"demo.jar"</span>]</span><br></pre></td></tr></table></figure>
<h3 id="其它建议"><a href="#其它建议" class="headerlink" title="其它建议"></a>其它建议</h3><ul>
<li>可以在执行 <code>apt-get install -y</code> 时增加选项 <code>--no-install-recommends</code> ，不安装建议性（非必须）的依赖。</li>
<li>可以在执行 <code>apk add</code> 时添加选项 <code>--no-cache</code>。</li>
<li>Ubuntu或Debian可以使用 <code>rm -rf /var/lib/apt/lists/*</code> 清理镜像中缓存文件。</li>
<li>CentOS等系统使用 <code>yum clean all</code> 命令清理。</li>
</ul>
<h1 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h1><p>Compose 项目是 Docker 官方的开源项目，负责实现对 Docker 容器集群的快速编排。<br>Compose用于定义和运行多个 Docker 容器的应用（Defining and running multi-container Docker applications）。</p>
<p>Compose 中有两个重要的概念：</p>
<ul>
<li>服务 (<code>service</code>)：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。</li>
<li>项目 (<code>project</code>)：由一组关联的应用容器组成的一个完整业务单元，在 <code>docker-compose.yml</code> 文件中定义。</li>
</ul>
<p>Compose 的默认管理对象是<strong>项目</strong>，通过<strong>子命令</strong>对项目中的一组容器进行便捷地生命周期管理。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo curl -L https://github.com/docker/compose/releases/download/1.25.5/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"></span><br><span class="line">$ sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure>
<p>或者通过pip安装</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo pip install -U docker-compose</span><br></pre></td></tr></table></figure>
<h2 id="docker-compose示例-——-WordPress"><a href="#docker-compose示例-——-WordPress" class="headerlink" title="docker-compose示例 —— WordPress"></a>docker-compose示例 —— WordPress</h2><p>docker-compose.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">   <span class="attr">db:</span></span><br><span class="line">     <span class="attr">image:</span> <span class="string">mysql:8.0</span></span><br><span class="line">     <span class="attr">command:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--default_authentication_plugin=mysql_native_password</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--character-set-server=utf8mb4</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--collation-server=utf8mb4_unicode_ci</span>     </span><br><span class="line">     <span class="attr">volumes:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">db_data:/var/lib/mysql</span></span><br><span class="line">     <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">     <span class="attr">environment:</span></span><br><span class="line">       <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">somewordpress</span></span><br><span class="line">       <span class="attr">MYSQL_DATABASE:</span> <span class="string">wordpress</span></span><br><span class="line">       <span class="attr">MYSQL_USER:</span> <span class="string">wordpress</span></span><br><span class="line">       <span class="attr">MYSQL_PASSWORD:</span> <span class="string">wordpress</span></span><br><span class="line"></span><br><span class="line">   <span class="attr">wordpress:</span></span><br><span class="line">     <span class="attr">depends_on:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">     <span class="attr">image:</span> <span class="string">wordpress:latest</span></span><br><span class="line">     <span class="attr">ports:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">"8020:80"</span></span><br><span class="line">     <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">     <span class="attr">environment:</span></span><br><span class="line">       <span class="attr">WORDPRESS_DB_HOST:</span> <span class="string">db:3306</span></span><br><span class="line">       <span class="attr">WORDPRESS_DB_USER:</span> <span class="string">wordpress</span></span><br><span class="line">       <span class="attr">WORDPRESS_DB_PASSWORD:</span> <span class="string">wordpress</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">db_data:</span></span><br></pre></td></tr></table></figure>
<p><strong>启动</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM_0_13_centos wordpress-demo]<span class="comment"># docker-compose up -d		# 保持在后台运行</span></span><br><span class="line">[root@VM_0_13_centos wordpress-demo]<span class="comment"># docker-compose ps			# 查看容器组状态</span></span><br><span class="line">[root@VM_0_13_centos wordpress-demo]<span class="comment"># docker-compose down		# 删除容器组</span></span><br></pre></td></tr></table></figure>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201114195043551.png" alt="image-20201114195043551" style="zoom: 67%;"></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201107174243776.png" alt="image-20201107174243776" style="zoom: 67%;"></p>
<p><strong>查看db数据卷</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM_0_13_centos wordpress-demo]<span class="comment"># docker inspect wordpress-demo_db_1 |jq ".[0].Mounts"</span></span><br></pre></td></tr></table></figure>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201114191512336.png" alt="image-20201114191512336"></p>
<p><strong>进入容器查看</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM_0_13_centos wordpress-demo]<span class="comment"># docker-compose exec db sh</span></span><br><span class="line"><span class="comment"># ls</span></span><br><span class="line"><span class="comment"># hostname</span></span><br><span class="line"><span class="comment"># env</span></span><br><span class="line"><span class="comment"># which mysqld</span></span><br><span class="line"><span class="comment"># ls /var/lib/mysql</span></span><br></pre></td></tr></table></figure>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201107174911101.png" alt="image-20201107174911101"></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://docs.docker.com/engine/docker-overview/" rel="external nofollow noopener noreferrer" target="_blank">https://docs.docker.com/engine/docker-overview/</a></li>
<li><a href="https://yeasy.gitbook.io/docker_practice" rel="external nofollow noopener noreferrer" target="_blank">https://yeasy.gitbook.io/docker_practice</a></li>
</ul>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>《深入浅出MySQL》学习笔记</title>
    <url>/2020/ShenRuQianChuMySQL/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><p>分配select,insert权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grant select,insert on sakila.* to &apos;z1&apos;@&apos;localhost&apos; identified by &apos;123&apos;;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>收回insert权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">revoke insert on sakila.* from &apos;z1&apos;@&apos;localhost&apos;;</span><br></pre></td></tr></table></figure>
<h2 id="查看帮助"><a href="#查看帮助" class="headerlink" title="查看帮助"></a>查看帮助</h2><p>查看帮助信息</p>
<p>可以用<code>? contents</code>命令来显示所有可供查询的分类</p>
<p>查看show关键字用法：<code>? show</code></p>
<p>查看create table用法：<code>? create table</code></p>
<hr>
<p>MySQL 5.0之后，提供了一个新的数据库information_schema，用来记录MySQL中的元数据信息。</p>
<p>通过查询元数据 来获取批量操作表的SQL语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select concat(&apos;drop table test1.&apos;,table_name,&apos;;&apos;) from tables where table_schema=&apos;test1&apos; and table_name like &apos;tmp%&apos;;</span><br></pre></td></tr></table></figure>
<h2 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h2><p>MySQL 支持所有标准 SQL 中的数值类型，其中包括严格数值类型（ INTEGER、SMALLINT、DECIMAL和NUMERIC），以及近似数值数据类型（FLOAT、REAL和DOUBLE PRECISION），并在此基础上做了扩展。扩展后增加了TINYINT、MEDIUMINT和BIGINT这3种长度不同的整型，并增加了BIT类型，用来存放位数据。</p>
<p><strong>浮点数、定点数</strong></p>
<p>精度和标度 计数法 (M,D)</p>
<p>float(5,2)、double(5,2)、decimal(5,2)</p>
<p>不指定M,D的话</p>
<p>默认：float, double, decimal(10,0)</p>
<p>如果不写精度和标度，则会按照实际精度值显示，如果有精度和标度，则会自动将四舍五入后的结果插入，系统不会报错；定点数如果不写精度和标度，则按照默认值decimal(10,0)来进行操作，并且如果数据超越了精度和标度值，系统则会报错。</p>
<pre><code>Query OK, 1 row affected, 1 warning (0.00 sec)
mysql&gt; show warnings;
</code></pre><p><strong>BIT 类型</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select bin(id),hex(id) from t2;</span><br><span class="line"></span><br><span class="line">alter table t2 modify id bit(2);</span><br><span class="line"></span><br><span class="line">insert into t2 values(2);</span><br></pre></td></tr></table></figure>
<p>转换后的二进制数不能超过预定义的bit类型的长度</p>
<h2 id="日期时间类型"><a href="#日期时间类型" class="headerlink" title="日期时间类型"></a>日期时间类型</h2><p><strong>timestamp类型</strong></p>
<p>MySQL只给表中的第一个TIMESTAMP字段设置默认值为系统日期，如果有第二个TIMESTAMP类型，则默认值设置为0值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show create table t \G;</span><br><span class="line"></span><br><span class="line">mysql&gt; alter table t modify id2 timestamp default current_timestamp;</span><br><span class="line">ERROR 1293 (HY000): Incorrect table definition; there can be only one TIMESTAMP column with CURRENT_TIMESTAMP in DEFAULT or ON UPDATE clause</span><br></pre></td></tr></table></figure>
<p>timestamp和时区有关系：</p>
<pre><code>mysql&gt; show variables like &apos;time_zone&apos;;
+---------------+--------+
| Variable_name | Value |
+---------------+--------+
| time_zone | SYSTEM |
+---------------+--------+
</code></pre><p>最大2038-01-19 11:14:07  +08:00时区</p>
<p>最小1970-01-01 08:00:01</p>
<p>TIMESTAMP支持的时间范围较小，其取值范围从19700101080001到2038年的某个时间，而DATETIME是从 1000-01-01 00:00:00到 9999-12-31 23:59:59，范围更大。</p>
<h2 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h2><p>MySQL包括了CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM和SET等多种字符串类型。</p>
<h3 id="binary-类型"><a href="#binary-类型" class="headerlink" title="binary 类型"></a>binary 类型</h3><pre><code>CREATE TABLE t (c BINARY(3));
</code></pre><p>当保存BINARY值时，在值的最后通过填充“0x00”（零字节）以达到指定的字段定义长度。</p>
<h3 id="枚举类型-enum"><a href="#枚举类型-enum" class="headerlink" title="枚举类型 enum"></a>枚举类型 enum</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table t2 (gender enum(&apos;M&apos;, &apos;F&apos;));</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; desc t2;</span><br><span class="line">+--------+---------------+------+-----+---------+-------+</span><br><span class="line">| Field  | Type          | Null | Key | Default | Extra |</span><br><span class="line">+--------+---------------+------+-----+---------+-------+</span><br><span class="line">| gender | enum(&apos;M&apos;,&apos;F&apos;) | YES  |     | NULL    |       |</span><br><span class="line">+--------+---------------+------+-----+---------+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into t2 values(&apos;M&apos;),(&apos;1&apos;),(2),(&apos;f&apos;),(null);</span><br><span class="line">Query OK, 5 rows affected (0.00 sec)</span><br><span class="line">Records: 5  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from t2;</span><br><span class="line">+--------+</span><br><span class="line">| gender |</span><br><span class="line">+--------+</span><br><span class="line">| M      |</span><br><span class="line">| M      |</span><br><span class="line">| F      |</span><br><span class="line">| F      |</span><br><span class="line">| NULL   |</span><br><span class="line">+--------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<h3 id="set-类型"><a href="#set-类型" class="headerlink" title="set 类型"></a>set 类型</h3><pre><code>Create table t (col set(&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;));
insert into t values(&apos;a,b&apos;),(&apos;a,d,a&apos;),(&apos;a,b&apos;),(&apos;a,c&apos;),(&apos;a&apos;);

1～8成员的集合，占1个字节。??????
9～16成员的集合，占2个字节。
17～24成员的集合，占3个字节。
25～32成员的集合，占4个字节。
33～64成员的集合，占8个字节。
</code></pre>]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>【摘】Elasticsearch和Solr</title>
    <url>/2021/Elasticsearch-Solr/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>Elasticsearch</strong>是一个实时分布式搜索和分析引擎。它让你以前所未有的速度处理大数据成为可能。Elasticsearch是一个基于Apache Lucene(TM)的开源搜索引擎。无论在开源还是专有领域，Lucene可以被认为是迄今为止最先进、性能最好的、功能最全的搜索引擎库。Elasticsearch也使用Java开发并使用Lucene作为其核心来实现所有索引和搜索的功能，但是它的目的是通过简单的 RESTful API 来隐藏Lucene的复杂性，从而让全文搜索变得简单。</p>
<a id="more"></a>
<p><em>StackOverflow结合全文搜索与地理位置查询，以及more-like-this功能来找到相关的问题和答案。Github使用Elasticsearch检索千亿行代码。</em></p>
<p><strong>Solr</strong>是Apache下的一个顶级开源项目，采用Java开发，它是基于Lucene的全文搜索服务器。Solr提供了比Lucene更为丰富的查询语言，同时实现了可配置、可扩展，并对索引、搜索性能进行了优化。</p>
<p>Solr可以独立运行，运行在Jetty、Tomcat等这些Servlet容器中，Solr 索引的实现方法很简单，用 POST 方法向 Solr 服务器发送一个描述 Field 及其内容的 XML 文档，Solr根据xml文档添加、删除、更新索引 。Solr 搜索只需要发送 HTTP GET 请求，然后对 Solr 返回Xml、json等格式的查询结果进行解析，组织页面布局。Solr不提供构建UI的功能，Solr提供了一个管理界面，通过管理界面可以查询Solr的配置和运行情况。</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2021/es-solr/solr-1.jpg" alt="img" style="zoom: 80%;"></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2021/es-solr/solr-2.jpg" alt="img" style="zoom: 80%;"></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2021/es-solr/solr-3.jpg" alt="img" style="zoom: 80%;"></p>
<p><strong>ES和Solr的部分区别：</strong></p>
<p>Solr 利用 Zookeeper 进行分布式管理；Elasticsearch内置Zen，需要专用的主节点才能进行分裂脑保护。solr一般部署到web服务器上，比如tomcat，solr的本质是一个动态web项目。</p>
<p>Solr 支持更多格式的数据(JSON/XML/CSV)，Elasticsearch 仅支持json文件格式。<br>Solr 官方提供的功能更多，而 Elasticsearch 本身更注重于核心功能，高级功能多有第三方插件提供，例如图形化界面需要kibana友好支撑。<br>Solr 查询快，但更新索引时慢（即插入删除慢），用于电商等查询多的应用；ES建立索引快（即查询慢），即实时性查询快。Solr是传统搜索应用的有力解决方案，但 Elasticsearch 更适用于新兴的实时搜索应用。<br>Solr拥有更大，更成熟的用户，开发者和贡献者社区。ES拥有的规模较小但活跃的用户社区以及不断增长的贡献者社区。<br>Solr更加面向文本搜索，Elasticsearch通常用于过滤和分组 - 分析查询工作负载 - 而不一定是文本搜索。</p>
<p><strong>Lucene</strong>曾经是Apache Jakarta项目（Jakarta has been retired on 2011/12/21）的一个子项目（Maven, POI也是），是一个开放源代码的全文检索引擎工具包，但它不是一个完整的全文检索引擎，而是一个<strong>全文检索引擎的架构</strong>，提供了完整的查询引擎和索引引擎，部分文本分析引擎（英文与德文两种西方语言）。Lucene的目的是为软件开发人员提供一个简单易用的工具包，以方便在目标系统中实现全文检索的功能，或者是以此为基础建立起完整的全文检索引擎。</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2021/es-solr/lucene.jpg" alt="img"></p>
<p>数据总体分为两种：<strong>结构化数据</strong>和<strong>非结构化数据</strong>。<br><strong>结构化数据</strong>： 指具有固定格式或有限长度的数据，如数据库，元数据等。<br><strong>非结构化数据</strong>： 非结构化数据又可称为全文数据，指不定长或无固定格式的数据，如邮件，word文档等。</p>
<p>非结构化数据查询方法包括以下两种方法：<br><strong>顺序扫描</strong>(Serial Scanning)<br><strong>全文搜索</strong>(Full-text Search)</p>
<p>将非结构化数据中的一部分信息提取出来，重新组织，使其变得有一定结构，然后对此有一定结构的数据进行搜索，从而达到搜索相对较快的目的。这部分从非结构化数据中提取出的然后重新组织的信息，我们称之<strong>索引</strong>。</p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>【摘】Elasticsearch笔记</title>
    <url>/2021/Elasticsearch/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>PB级 结构化和非结构化数据<br>开源<br>全文搜索引擎<br>非规范化，提高搜索性能<br><a id="more"></a></p>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>分布式<br>实时<br>基于Java，跨平台<br>json对象作相应，大部分语言支持<br>和solr相比，多用户管理容易</p>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>和solr相比，不支持csv、xml格式的数据<br>脑裂问题</p>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h3><p>它指的是Elasticsearch的单个正在运行的实例。单个物理和虚拟服务器容纳多个节点，这取决于其物理资源的能力，如RAM，存储和处理能力。</p>
<h3 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h3><p>它是一个或多个节点的集合。 集群为整个数据提供跨所有节点的集合索引和搜索功能。</p>
<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>它是不同类型的文档和文档属性的集合。索引还使用分片的概念来提高性能。 例如，一组文档包含社交网络应用的数据。</p>
<h3 id="类型-映射"><a href="#类型-映射" class="headerlink" title="类型/映射"></a>类型/映射</h3><p>它是共享同一索引中存在的一组公共字段的文档的集合。 例如，索引包含社交网络应用的数据，然后它可以存在用于用户简档数据的特定类型，另一类型可用于消息的数据，以及另一类型可用于评论的数据。</p>
<h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p>它是以JSON格式定义的特定方式的字段集合。每个文档都属于一个类型并驻留在索引中。每个文档都与唯一标识符(称为UID)相关联。</p>
<h3 id="碎片"><a href="#碎片" class="headerlink" title="碎片"></a>碎片</h3><p>索引被水平细分为碎片。这意味着每个碎片包含文档的所有属性，但包含的数量比索引少。水平分隔使碎片成为一个独立的节点，可以存储在任何节点中。主碎片是索引的原始水平部分，然后这些主碎片被复制到副本碎片中。</p>
<h3 id="副本"><a href="#副本" class="headerlink" title="副本"></a>副本</h3><p>Elasticsearch允许用户创建其索引和分片的副本。 复制不仅有助于在故障情况下增加数据的可用性，而且还通过在这些副本中执行并行搜索操作来提高搜索的性能。</p>
<h2 id="Elasticsearch和RDBMS之间的比较"><a href="#Elasticsearch和RDBMS之间的比较" class="headerlink" title="Elasticsearch和RDBMS之间的比较"></a>Elasticsearch和RDBMS之间的比较</h2><table>
<thead>
<tr>
<th>Elasticsearch</th>
<th>关系型数据库</th>
</tr>
</thead>
<tbody>
<tr>
<td>索引</td>
<td>数据库</td>
</tr>
<tr>
<td>碎片</td>
<td>碎片</td>
</tr>
<tr>
<td>映射</td>
<td>表</td>
</tr>
<tr>
<td>字段</td>
<td>字段</td>
</tr>
<tr>
<td>JSON对象</td>
<td>元组</td>
</tr>
</tbody>
</table>
<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="多索引"><a href="#多索引" class="headerlink" title="多索引"></a>多索引</h3><ul>
<li>逗号<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST http://localhost:9200/index1,index2,index3/_search</span><br><span class="line">  &#123;</span><br><span class="line">   &quot;query&quot;:&#123;</span><br><span class="line">    &quot;query_string&quot;:&#123;</span><br><span class="line">       &quot;query&quot;:&quot;any_string&quot;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>通配符 * + -</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST http://localhost:9200/school*/_search</span><br><span class="line">POST http://localhost:9200/school*,-schools_gov/_search</span><br></pre></td></tr></table></figure>
</li>
<li><p>_all</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST http://localhost:9200/_all/_search</span><br></pre></td></tr></table></figure>
</li>
<li><p>ignore_unavailable</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST http://localhost:9200/school*,book_shops/_search?ignore_unavailable=true</span><br><span class="line">#假设book_shops不存在，响应也不会报404错误</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>allow_no_indices</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST http://localhost:9200/schools_pri*/_search?allow_no_indices=true</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="文档-1"><a href="#文档-1" class="headerlink" title="文档"></a>文档</h3><ul>
<li><p>创建</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST /schools/school/4</span><br></pre></td></tr></table></figure>
</li>
<li><p>更新</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT ...</span><br></pre></td></tr></table></figure>
</li>
<li><p>版本控制</p>
<ul>
<li>内部控制（默认）<ul>
<li>更新、删除、新增等操作时，自动+1，从1开始</li>
</ul>
</li>
<li>外部控制 version_type: external<ul>
<li>?version=2</li>
</ul>
</li>
</ul>
</li>
<li><p>操作类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST http://localhost:9200/tutorials/chapter/1?op_type=create</span><br></pre></td></tr></table></figure>
<p>是一种明确操作类型的操作，防止更新已有文档。指明create后，如果已有该index/type/id则报错version conflict</p>
</li>
<li><p>指定所需的字段</p>
</li>
<li><p>?fields = name,fees</p>
</li>
<li><p>指定超时</p>
<ul>
<li>?timeout = 3m</li>
</ul>
</li>
</ul>
<h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/_mapping?pretty&quot; -H &apos;Content-Type: application/json&apos; -d&apos;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;properties&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &#123; </span><br><span class="line">      &quot;type&quot;:     &quot;text&quot;,</span><br><span class="line">      &quot;fielddata&quot;: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="聚合搜索"><a href="#聚合搜索" class="headerlink" title="聚合搜索"></a>聚合搜索</h2><h3 id="平均聚合-avg"><a href="#平均聚合-avg" class="headerlink" title="平均聚合 avg"></a>平均聚合 avg</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST http://localhost:9200/schools/_search</span><br><span class="line">&#123;</span><br><span class="line"> &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;avg_fees&quot;: &#123;</span><br><span class="line">      &quot;avg&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;fees&quot;</span><br><span class="line">        &quot;missing&quot;: 0</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="基数聚合-cardinality"><a href="#基数聚合-cardinality" class="headerlink" title="基数聚合 cardinality"></a>基数聚合 cardinality</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST http://localhost:9200/schools*/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;distinct_name_count&quot;: &#123;&quot;cardinality&quot;: &#123;&quot;field&quot;: &quot;name&quot;&#125;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">#特定字段的不同值的计数</span><br></pre></td></tr></table></figure>
<h3 id="扩展统计-extended-stats"><a href="#扩展统计-extended-stats" class="headerlink" title="扩展统计 extended_stats"></a>扩展统计 extended_stats</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;aggs&quot; : &#123;</span><br><span class="line">    &quot;fees_stats&quot;: &#123; &quot;extended_stats&quot;: &#123; &quot;field&quot;: &quot;fees&quot; &#125; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="最值聚合-max-min"><a href="#最值聚合-max-min" class="headerlink" title="最值聚合 max/min"></a>最值聚合 max/min</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;min_fees&quot;: &#123;</span><br><span class="line">      &quot;min&quot;: &#123;&quot;field&quot;: &quot;fees&quot; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="求和-sum"><a href="#求和-sum" class="headerlink" title="求和 sum"></a>求和 sum</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;sum_fees&quot;: &#123;</span><br><span class="line">      &quot;sum&quot;: &#123;&quot;field&quot;: &quot;fees&quot; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="meta"><a href="#meta" class="headerlink" title="meta"></a>meta</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;aggs&quot; : &#123;</span><br><span class="line">    &quot;min_fees&quot;: &#123;</span><br><span class="line">      &quot;avg&quot;: &#123; &quot;field&quot;: &quot;fees&quot; &#125; ,</span><br><span class="line">      &quot;meta&quot;: &#123;&quot;dsc&quot;: &quot;Lowest Fees&quot;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">响应如下：</span><br><span class="line">&#123;</span><br><span class="line">   &quot;aggregations&quot;:&#123;&quot;min_fees&quot;:&#123;&quot;meta&quot;:&#123;&quot;dsc&quot;:&quot;Lowest Fees&quot;&#125;, &quot;value&quot;:2180.0&#125;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="桶聚合-bucket"><a href="#桶聚合-bucket" class="headerlink" title="桶聚合 bucket"></a>桶聚合 bucket</h3><p>包含：<br><strong>子聚集</strong><br>此存储桶聚合会生成映射到父存储桶的文档集合。类型参数用于定义父索引。 例如，我们有一个品牌及其不同的模型，然后模型类型将有以下_parent字段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   &quot;model&quot; : &#123;</span><br><span class="line">      &quot;_parent&quot; : &#123;</span><br><span class="line">         &quot;type&quot; : &quot;brand&quot;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>还有许多其他特殊的桶聚合，这在许多其他情况下是有用的，它们分别是：<br>日期直方图汇总/聚合<br>日期范围汇总/聚合<br>过滤聚合<br>过滤器聚合<br>地理距离聚合<br>GeoHash网格聚合<br>全局汇总<br>直方图聚合<br>IPv4范围聚合<br>失踪聚合<br>嵌套聚合<br>范围聚合<br>反向嵌套聚合<br>采样器聚合<br>重要条款聚合<br>术语聚合</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="自动创建索引"><a href="#自动创建索引" class="headerlink" title="自动创建索引"></a>自动创建索引</h3><p><strong>elasticsearch.yml</strong><br>当请求将JSON对象添加到特定索引时，如果该索引不存在，那么此API会自动创建该索引以及该特定JSON对象的基础映射。 可以通过将以下参数的值更改为false来禁用此功能，这个值是存在于elasticsearch.yml文件中，打开elasticsearch.yml文件设置如下：<br>action.auto_create_index:false<br>index.mapper.dynamic:false</p>
<p>还可以限制自动创建索引，其中通过更改以下参数的值只允许指定模式的索引名称：<br>action.auto_create_index:+acc<em>,-bank</em> (其中+表示允许， - 表示不允许)</p>
<hr>
<p><em>来源：<a href="https://www.yiibai.com/elasticsearch/elasticsearch_aggregations.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.yiibai.com/elasticsearch/elasticsearch_aggregations.html</a></em></p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>K8s小知识</title>
    <url>/2021/K8s-FAQ/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Kubelet-调用的处理检查容器的IP地址是否打开的程序是？"><a href="#Kubelet-调用的处理检查容器的IP地址是否打开的程序是？" class="headerlink" title="Kubelet 调用的处理检查容器的IP地址是否打开的程序是？"></a>Kubelet 调用的处理检查容器的IP地址是否打开的程序是？</h3><p>TCPSocketAction</p>
<h3 id="1-8版本的Kubernetes引入了什么？"><a href="#1-8版本的Kubernetes引入了什么？" class="headerlink" title="1.8版本的Kubernetes引入了什么？"></a>1.8版本的Kubernetes引入了什么？</h3><p>Taints and Tolerations</p>
<a id="more"></a>
<h3 id="如何在没有选择器的情况下定义服务？"><a href="#如何在没有选择器的情况下定义服务？" class="headerlink" title="如何在没有选择器的情况下定义服务？"></a>如何在没有选择器的情况下定义服务？</h3><p>指定外部名称</p>
<h3 id="什么是Kubernetes集群中的minions？"><a href="#什么是Kubernetes集群中的minions？" class="headerlink" title="什么是Kubernetes集群中的minions？"></a>什么是Kubernetes集群中的minions？</h3><p>它们是集群的工作节点</p>
<h3 id="ReplicaSet和ReplicationController的区别？"><a href="#ReplicaSet和ReplicationController的区别？" class="headerlink" title="ReplicaSet和ReplicationController的区别？"></a>ReplicaSet和ReplicationController的区别？</h3><p>在旧版本的Kubernetes中，只有ReplicationController对象。它的主要作用是确保Pod以你指定的副本数运行，即如果有容器异常退出，会自动创建新的 Pod 来替代；而异常多出来的容器也会自动回收。</p>
<p>ReplicaSet是ReplicationController的替代。ReplicaSet支持集合式的selector。官方强烈建议避免直接使用ReplicaSet，而应该通过Deployment来创建RS和Pod。</p>
<h3 id="Headless-Service？"><a href="#Headless-Service？" class="headerlink" title="Headless Service？"></a>Headless Service？</h3><p>spec.clusterIP为None。不会被分配cluster IP，kube-proxy不处理，不会对这类服务进行负载均衡和路由。</p>
<p><code>ClusterIP</code>的原理：一个<code>Service</code>可能对应多个<code>EndPoint(Pod)</code>，<code>client</code>访问的是<code>Cluster IP</code>，通过<code>iptables</code>规则转到<code>Real Server</code>，从而达到负载均衡的效果。</p>
<p>ClusterIP方式，dns查询时只会返回<code>Service</code>的地址。而headless方式会返回endpoint的IP。</p>
<p>headless使用场景:</p>
<p>第一种：自主选择权，有时候<code>client</code>想自己来决定使用哪个<code>Real Server</code>，可以通过查询<code>DNS</code>来获取<code>Real Server</code>的信息。</p>
<p>第二种：<code>Headless Service</code>的对应的每一个<code>Endpoints</code>，即每一个<code>Pod</code>，都会有对应的<code>DNS</code>域名；这样<code>Pod</code>之间就能互相访问，集群也能单独访问pod。</p>
<p>K8s中资源的全局FQDN格式:<br>　　Service_NAME.NameSpace_NAME.Domain.LTD.<br>　　Domain.LTD.=svc.cluster.local.　　　　 # 这是默认k8s集群的域名</p>
<p>假设nginx是一个service：<br><code>nslookup nginx.default.svc.cluster.local 10.200.2.10</code></p>
<p>如果后端pod名为web-0,web-1:<br><code>nslookup web-0.nginx.default.svc.cluster.local 10.200.2.11</code></p>
<h3 id="Kubernetes-Architecture的组件有哪些？"><a href="#Kubernetes-Architecture的组件有哪些？" class="headerlink" title="Kubernetes Architecture的组件有哪些？"></a>Kubernetes Architecture的组件有哪些？</h3><p>Kubernetes Architecture包含主节点和工作节点。运行在主节点上的组件有：kube-controller-manager，kube-apiserver，kube-scheduler。工作节点上的组件有：kubelet和kube-proxy。</p>
<h3 id="ingress的意义？"><a href="#ingress的意义？" class="headerlink" title="ingress的意义？"></a>ingress的意义？</h3><p>动态配置服务，减少不必要的端口暴露</p>
<p>k8s对外暴露服务的方式？</p>
<ul>
<li>NodePort</li>
<li>LoadBalancer</li>
<li>Ingress</li>
</ul>
<p>ingress controller通过和kubernetes api交互，动态的去感知集群中ingress规则变化，生成相应的nginx配置文件。</p>
<h3 id="无选择器的service"><a href="#无选择器的service" class="headerlink" title="无选择器的service?"></a>无选择器的service?</h3><p>service 其实是一个TCP/UDP 代理，不仅可以代理Pod也可以代理其他的非Pod资源，例如外网的数据库，或者其他的资源。没有配置选择器的service ，endpoints为空，可以给这个service 添加或修改 endpoint</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mynoselector-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">50000</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Endpoints</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mynoselector-service</span></span><br><span class="line"><span class="attr">subsets:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">addresses:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">ip:</span> <span class="number">13.75</span><span class="number">.107</span><span class="number">.151</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">3306</span></span><br></pre></td></tr></table></figure>
<h3 id="K8s版本变化"><a href="#K8s版本变化" class="headerlink" title="K8s版本变化"></a>K8s版本变化</h3><p>Alpha（内部测试版）-&gt;Beta（测试版）-&gt; GA（正式发布的版本）</p>
<p><strong>v1.13 2018年12月04日</strong><br>kubeadm进入GA，容器存储接口（CSI）进入GA，CoreDNS成为默认DNS服务器</p>
<p><strong>v1.14 2019年03月26日</strong><br>生产级支持Windows节点，kubectl全新文档与kustomize集成，持久本地卷进入GA</p>
<p><strong>v1.15 2019年06月19日</strong><br>核心API可扩展性，kubeadm高可用进入Beta，kubeadm无缝升级所有证书，持续改进CSI。</p>
<p><strong>v1.16 2019年09月18日</strong><br>CRD进入GA，准入控制Webhooks进入GA，IPv4/IPv6双栈协议支持，CSI规范卷大小调整。</p>
<p><strong>v1.17 2019 年12月10日</strong></p>
<ul>
<li>云供应商标签 GA：早在 v1.2 版本中就作为测试版功能添加，v1.17 版本中的云供应商标签普遍可用。</li>
<li>Volume Snapshot 进入 bata 版：Kubernetes Volume Snapshot功能现在是Kubernetes v1.17中的测试版。该功能在 Kubernetes v1.12 中作为 alpha 引入的，在 Kubernetes v1.13 中进行了第二次 alpha，并进行了突破性修改。</li>
<li>CSI 迁移（Migration）进入 beata 版：Kubernetes 树内（in-tree）存储插件到容器存储接口（CSI）迁移基础架构现在是 Kubernetes v1.17 中的 beata 版。CSI 迁移在 Kubernetes v1.14 中作为 alpha 引入。</li>
</ul>
<p><strong>v1.18 2020年3月26日</strong><br><a href="https://v1-18.docs.kubernetes.io/blog/2020/03/25/kubernetes-1-18-release-announcement/" rel="external nofollow noopener noreferrer" target="_blank">https://v1-18.docs.kubernetes.io/blog/2020/03/25/kubernetes-1-18-release-announcement/</a></p>
<p>Taint Based Eviction，kubectl diff 等</p>
<p><strong>v1.19 2020年8月27日</strong><br>从 Kubernetes 1.19 版本开始，支持窗口将延长到一年。<br>Ingress 升级为 GA，结构化日志等</p>
<p><strong>v1.20</strong><br>Dockershim弃用</p>
<p><strong>v1.21</strong><br>PodSecurityPolicy 弃用<br>不可变 ConfigMap/Secret 进入稳定版</p>
<p>当集群包含大量 ConfigMap 和 Secret 时，大量的 watch 事件会急剧增加 kube-apiserver 的负载，并会导致错误配置过快传播到整个集群。在这种情况中，给不需要经常修改的 ConfigMap 和 Secret 设置 <code>immutable: true</code> 就可以避免类似的问题。</p>
<p>注意，设置 <code>immutable: true</code> 之后，ConfigMap 和 Secret 内容更新时需要删除并重新创建，且使用它们的 Pod 也需要删除重建。</p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>K8s</tag>
      </tags>
  </entry>
  <entry>
    <title>Kafka笔记</title>
    <url>/2021/Kafka-learning/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建主题</span></span><br><span class="line">bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic topic-1</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出topic</span></span><br><span class="line">bin/kafka-topics.sh  --list --zookeeper localhost:2181</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看topic信息</span></span><br><span class="line">[root@kafka-1 kafka_2.12-2.8.0]<span class="comment"># bin/kafka-topics.sh --topic test --describe --zookeeper localhost:2181</span></span><br><span class="line">Topic: <span class="built_in">test</span>	TopicId: qmyHki2JRAmbHssyAaGNqw	PartitionCount: 1	ReplicationFactor: 1	Configs: </span><br><span class="line">	Topic: <span class="built_in">test</span>	Partition: 0	Leader: 1	Replicas: 1	Isr: 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除topic</span></span><br><span class="line">bin/kafka-topics.sh --delete --topic topic-01 --zookeeper localhost:2181</span><br><span class="line">Note: This will have no impact <span class="keyword">if</span> delete.topic.enable is not <span class="built_in">set</span> to <span class="literal">true</span>.</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 发送消息（通过console）</span></span><br><span class="line">[root@kafka-1 kafka_2.12-2.8.0]<span class="comment"># bin/kafka-console-producer.sh --broker-list 192.168.19.208:9092 --topic test</span></span><br><span class="line">&gt;abc</span><br><span class="line">&gt;123 456</span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 订阅消息</span></span><br><span class="line">[root@kafka-1 kafka_2.12-2.8.0]<span class="comment"># bin/kafka-console-consumer.sh --bootstrap-server 192.168.19.208:9092 --topic test --from-beginning</span></span><br><span class="line">abc</span><br><span class="line">123 456</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生产者压测-批量创建消息</span></span><br><span class="line">bin/kafka-producer-perf-test.sh --topic topic-1 --num-records 10000 --record-size 1024 --throughput -1 --producer-props bootstrap.servers=192.168.19.208:9092 acks=1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 消费者压测</span></span><br><span class="line">bin/kafka-consumer-perf-test.sh --bootstrap-server 127.0.0.1:9092 --topic perf_test --messages 1000000 --threads 8 --reporting-interval 1000</span><br></pre></td></tr></table></figure>
<p><font color="red">问题1</font>：producer通过 <code>--broker-list localhost:9092</code> 或 <code>--bootstrap-server 127.0.0.1:9092</code> 连接broker失败，而不使用localhost、127.0.0.1改用broker节点IP则可以，是否是配置错了？</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@kafka-1 kafka_2.12-2.8.0]<span class="comment"># bin/kafka-console-producer.sh --topic test --bootstrap-server 127.0.0.1:9092</span></span><br><span class="line">&gt;[2021-10-28 11:45:36,517] WARN [Producer clientId=console-producer] Connection to node -1 (/127.0.0.1:9092) could not be established. Broker may not be available. (org.apache.kafka.clients.NetworkClient)</span><br><span class="line">[2021-10-28 11:45:36,517] WARN [Producer clientId=console-producer] Bootstrap broker 127.0.0.1:9092 (id: -1 rack: null) disconnected (org.apache.kafka.clients.NetworkClient)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>首先，<code>--broker-list</code> 选项是过时的，不建议继续使用。consumer无此选项。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@kafka-1 kafka_2.12-2.8.0]<span class="comment"># bin/kafka-console-producer.sh --help</span></span><br><span class="line">This tool helps to <span class="built_in">read</span> data from standard input and publish it to Kafka.</span><br><span class="line">Option                                   Description                            </span><br><span class="line">------                                   -----------                            </span><br><span class="line">--batch-size &lt;Integer: size&gt;             Number of messages to send <span class="keyword">in</span> a single </span><br><span class="line">                                           batch <span class="keyword">if</span> they are not being sent     </span><br><span class="line">                                           synchronously. (default: 200)        </span><br><span class="line">--bootstrap-server &lt;String: server to    REQUIRED unless --broker-list          </span><br><span class="line">  connect to&gt;                              (deprecated) is specified. The server</span><br><span class="line">                                           (s) to connect to. The broker list   </span><br><span class="line">                                           string <span class="keyword">in</span> the form HOST1:PORT1,HOST2:</span><br><span class="line">                                           PORT2.                               </span><br><span class="line">--broker-list &lt;String: broker-list&gt;      DEPRECATED, use --bootstrap-server     </span><br><span class="line">                                           instead; ignored <span class="keyword">if</span> --bootstrap-     </span><br><span class="line">                                           server is specified.  The broker     </span><br><span class="line">                                           list string <span class="keyword">in</span> the form HOST1:PORT1, </span><br><span class="line">                                           HOST2:PORT2.</span><br></pre></td></tr></table></figure>
<p><code>server.properties</code> 配置如下：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment">############################# Socket Server Settings #############################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The address the socket server listens on. It will get the value returned from</span></span><br><span class="line"><span class="comment"># java.net.InetAddress.getCanonicalHostName() if not configured.</span></span><br><span class="line"><span class="comment">#   FORMAT:</span></span><br><span class="line"><span class="comment">#     listeners = listener_name://host_name:port</span></span><br><span class="line"><span class="comment">#   EXAMPLE:</span></span><br><span class="line"><span class="comment">#     listeners = PLAINTEXT://your.host.name:9092</span></span><br><span class="line"><span class="comment">#listeners=PLAINTEXT://:9092</span></span><br><span class="line"><span class="comment">##listeners=PLAINTEXT://localhost:9092</span></span><br><span class="line"><span class="attr">listeners</span>=PLAINTEXT://<span class="number">192.168</span>.<span class="number">19.208</span>:<span class="number">9092</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Hostname and port the broker will advertise to producers and consumers. If not set,</span></span><br><span class="line"><span class="comment"># it uses the value for "listeners" if configured.  Otherwise, it will use the value</span></span><br><span class="line"><span class="comment"># returned from java.net.InetAddress.getCanonicalHostName().</span></span><br><span class="line"><span class="comment">#advertised.listeners=PLAINTEXT://your.host.name:9092</span></span><br><span class="line"><span class="comment">##advertised.listeners=PLAINTEXT://localhost:9092</span></span><br><span class="line"><span class="attr">advertised.listeners</span>=PLAINTEXT://<span class="number">192.168</span>.<span class="number">19.208</span>:<span class="number">9092</span></span><br></pre></td></tr></table></figure>
<p>因此，是listeners 和advertised.listeners配置的问题，能使用已注册到zookeeper的地址。按默认配置的话，可以使用localhost或127.0.0.1，不指定具体IP的话，在客户端代码中通过API去连接Kafka就会报错，因为没有获取到服务端的IP，只能从服务器使用localhost连接。</p>
<p><font color="red">问题2</font>：：pssh执行 <code>bin/kafka-server-stop.sh</code> 未能停止Kafka？</p>
<p>查看stop脚本：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">OSNAME=$(uname -s)</span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">"<span class="variable">$OSNAME</span>"</span> == <span class="string">"OS/390"</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="variable">$JOBNAME</span> ]; <span class="keyword">then</span></span><br><span class="line">        JOBNAME=<span class="string">"KAFKSTRT"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    PIDS=$(ps -A -o pid,jobname,comm | grep -i <span class="variable">$JOBNAME</span> | grep java | grep -v grep | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line"><span class="keyword">elif</span> [[ <span class="string">"<span class="variable">$OSNAME</span>"</span> == <span class="string">"OS400"</span> ]]; <span class="keyword">then</span></span><br><span class="line">    PIDS=$(ps -Af | grep -i <span class="string">'kafka\.Kafka'</span> | grep java | grep -v grep | awk <span class="string">'&#123;print $2&#125;'</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    PIDS=$(ps ax | grep <span class="string">' kafka\.Kafka '</span> | grep java | grep -v grep | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>脚本手动执行获取PID没问题，可能是环境变量的原因，source后执行了一次正常停止了。但start时却不需要source。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost zlz]<span class="comment"># pssh -h kafka.ips -i "cd /opt/kafka/kafka_2.12-2.8.0; source ~/.bashrc; sh run-kafka.sh stop"</span></span><br></pre></td></tr></table></figure>
<p>再恢复重试时不加source也能正常停止了。最后发现命令没问题，不需要source。pssh 批量停止Kafka server时，不会马上停止，是陆续停止的，可能有几秒的延迟。即便在各server上手动执行stop，也是如此。<br>因此没问题。</p>
<p><font color="red">问题3</font>：advertised.listeners和listeners配置都注释掉，Kafka server不能按默认localhost:9092启动？<br>仅放开<code>listeners=PLAINTEXT://:9092</code>也不行。经测设置 <code>listeners=PLAINTEXT://localhost:9092</code> 可以启动，但是producer或consumer连接时会报错。<br>如果继续设置 <code>advertised.listeners=PLAINTEXT://localhost:9092</code>  的话，就又会无法启动server了!<br>可能需要集群状态数据吧，按localhost连接没试成，不折腾了，改回配置IP加端口的方式。</p>
<h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><h3 id="生产者性能测试"><a href="#生产者性能测试" class="headerlink" title="生产者性能测试"></a>生产者性能测试</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@kafka-1 kafka_2.12-2.8.0]<span class="comment"># bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 2 --partitions 2 --topic topic-2</span></span><br><span class="line">Created topic topic-2.</span><br><span class="line">...</span><br><span class="line">[root@kafka-1 kafka_2.12-2.8.0]<span class="comment"># bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 2 --partitions 64 --topic topic-64</span></span><br><span class="line">Created topic topic-64.</span><br><span class="line"></span><br><span class="line">[root@kafka-1 kafka_2.12-2.8.0]<span class="comment"># bin/kafka-producer-perf-test.sh --topic topic-2 --num-records 10000 --record-size 1024 --throughput -1 --producer-props bootstrap.servers=192.168.19.208:9092 acks=1</span></span><br><span class="line">...</span><br><span class="line">[root@kafka-1 kafka_2.12-2.8.0]<span class="comment"># bin/kafka-producer-perf-test.sh --topic topic-64 --num-records 10000 --record-size 1024 --throughput -1 --producer-props bootstrap.servers=192.168.19.208:9092 acks=1</span></span><br><span class="line">10000 records sent, 5614.823133 records/sec (5.48 MB/sec), 611.42 ms avg latency, 1299.00 ms max latency, 551 ms 50th, 1189 ms 95th, 1266 ms 99th, 1299 ms 99.9th.</span><br></pre></td></tr></table></figure>
<h3 id="消费者性能测试"><a href="#消费者性能测试" class="headerlink" title="消费者性能测试"></a>消费者性能测试</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@kafka-1 kafka_2.12-2.8.0]<span class="comment"># bin/kafka-consumer-perf-test.sh --bootstrap-server 192.168.19.208:9092 --topic topic-2 --messages 10000</span></span><br><span class="line">...</span><br><span class="line">[root@kafka-1 kafka_2.12-2.8.0]<span class="comment"># bin/kafka-consumer-perf-test.sh --bootstrap-server 192.168.19.208:9092 --topic topic-64 --messages 10000</span></span><br><span class="line">start.time, end.time, data.consumed.in.MB, MB.sec, data.consumed.in.nMsg, nMsg.sec, rebalance.time.ms, fetch.time.ms, fetch.MB.sec, fetch.nMsg.sec</span><br><span class="line">2021-09-19 11:23:23:801, 2021-09-19 11:23:24:480, 9.7656, 14.3824, 10000, 14727.5405, 428, 251, 38.9069, 39840.6375</span><br></pre></td></tr></table></figure>
<p>结果如下：</p>
<table>
<thead>
<tr>
<th>分区数（副本因子=2）</th>
<th>生产速度（第二次测试）</th>
<th>生产速度</th>
<th>消费速度</th>
</tr>
</thead>
<tbody>
<tr>
<td>2</td>
<td>9.53 MB/sec</td>
<td>6.90 MB/sec</td>
<td>41.21 MB/sec</td>
</tr>
<tr>
<td>4</td>
<td>8.74 MB/sec</td>
<td>5.92 MB/sec</td>
<td>35.03 MB/sec</td>
</tr>
<tr>
<td>8</td>
<td>8.99 MB/sec</td>
<td>7.59 MB/sec</td>
<td>39.23 MB/sec</td>
</tr>
<tr>
<td>16</td>
<td>11.37 MB/sec</td>
<td>8.43 MB/sec</td>
<td><font color="red">46.81 MB/sec</font></td>
</tr>
<tr>
<td>32</td>
<td><font color="red">12.19 MB/sec</font></td>
<td><font color="red">10.34 MB/sec</font></td>
<td>43.03 MB/sec</td>
</tr>
<tr>
<td>64</td>
<td>10.90 MB/sec</td>
<td>5.48 MB/sec</td>
<td>38.90 MB/sec</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>【摘】Linux日志</title>
    <url>/2021/Linux-logs/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在Linux系统中，有三个主要的日志子系统：<strong>连接时间日志，进程统计日志，错误日志</strong></p>
<a id="more"></a>
<p><strong>连接时间日志</strong></p>
<p>由多个程序执行，把记录写入到/var/log/wtmp和/var/run/utmp，login等程序更新wtmp和utmp文件，使系统管理员能够跟踪谁在何时登录到系统。</p>
<p><strong>进程统计日志</strong></p>
<p>进程统计日志由系统内核执行。当一个进程终止时，为每个进程往进程统计文件（pacct或acct）中写一个记录。进程统计的目的是为系统中的基本服务提供命令使用统计。</p>
<p><strong>错误日志</strong></p>
<p>错误日志由syslogd执行。各种系统守护进程、用户程序和内核通过syslog向文件/var/log/messages报告值得注意的事件。另外有许多UNIX程序创建日志。像HTTP和FTP这样提供网络服务的服务器也保持详细的日志。</p>
<p>文本类型的日志：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/var/log/messages  </span><br><span class="line">/var/log/dmesg</span><br><span class="line">/var/log/secure</span><br><span class="line">/var/log/cron</span><br><span class="line">/var/log/maillog</span><br><span class="line">/var/log/yum.log</span><br></pre></td></tr></table></figure>
<p>/var/log/messages日志格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Dec 19 17:39:06 localhost sz[17833]: [root] ConfigActivity.xml/ZMODEM: 287531 Bytes, 343933 BPS</span><br><span class="line">1. 产生这个事件的时间是：Dec 19 17:39:06</span><br><span class="line">2. 事件的来源主机为：localhost</span><br><span class="line">3. 产生这个事件的程序和进程号为：sz[17833]</span><br><span class="line">4. 这个事件实际的日志信息为：[root] ConfigActivity.xml/ZMODEM: 287531 Bytes, 343933 BPS</span><br></pre></td></tr></table></figure>
<p>二进制日志：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/var/log/wtmp</span><br><span class="line">/var/log/lastlog</span><br><span class="line">/var/run/utmp</span><br><span class="line">这三个文件中保存了系统用户登录、退出等相关事件的事件信息，不能直接使用tail、less等文本查看工具进行浏览，需要使用who/w/users/finger/id/last/lastlog和ac等用户查询命令来获取日志信息</span><br></pre></td></tr></table></figure>
<p>系统日志：</p>
<p>/var/log/lastlog：记录最后一次用户成功登陆的时间、登陆IP等信息<br>/var/log/messages：记录Linux操作系统常见的系统和服务错误信息<br>/var/log/secure：Linux系统安全日志，记录用户和工作组变坏情况、用户登陆认证情况<br>/var/log/btmp：记录Linux登陆失败的用户、时间以及远程IP地址<br>/var/log/cron：记录crond计划任务服务执行情况<br>auth.log：登录认证的信息记录<br>boot.log：系统启动时的程序服务的日志信息<br>dmesg：启动时显示在屏幕上的内核缓冲信息和硬件信息, dmesg命令用于显示开机信息<br>faillog：用户登录失败详细信息记录<br>kern.log：内核产生的信息记录</p>
<p>rsyslog管理的日志：</p>
<table>
<thead>
<tr>
<th>日志</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>/var/log/message</td>
<td style="text-align:left">系统启动后的信息和错误日志，是Red Hat Linux中最常用的日志之一</td>
</tr>
<tr>
<td>/var/log/secure</td>
<td style="text-align:left">安全相关的日志信息</td>
</tr>
<tr>
<td>/var/log/maillog</td>
<td style="text-align:left">邮件相关的日志信息</td>
</tr>
<tr>
<td>/var/log/cron</td>
<td style="text-align:left">定时任务相关的日志信息</td>
</tr>
<tr>
<td>/var/log/spooler</td>
<td style="text-align:left">UUCP和news设备相关的日志信息</td>
</tr>
<tr>
<td>/var/log/boot.log</td>
<td style="text-align:left">守护进程启动和停止相关的日志消息</td>
</tr>
</tbody>
</table>
<p><strong>rsyslog</strong> 是一个快速处理收集系统日志的程序，提供了高性能、安全功能和模块化设计。rsyslog 是syslog 的升级版，它将多种来源输入输出转换结果到目的地。</p>
<p>相关配置文件：/etc/rsyslog.conf, /etc/rsyslog.d/, /etc/sysconfig/rsyslog</p>
<p>日志轮转配置文件：<strong>/etc/logrotate.conf</strong></p>
<p>自定义日志转储：<strong>/etc/logrotate.d/</strong></p>
<p>示例：将所有类型错误级别为info的日志转储到/var/log/test.log日志文件中，并设置/var/log/test.log达到1KB后进行转储，转储10次，压缩，转储后重启rsyslog服务。</p>
<p>在/etc/rsyslog.conf添加一行配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# tail /etc/rsyslog.conf</span><br><span class="line">#$ActionQueueSaveOnShutdown on # save messages to disk on shutdown</span><br><span class="line">#$ActionQueueType LinkedList   # run asynchronously</span><br><span class="line">#$ActionResumeRetryCount -1    # infinite retries if host is down</span><br><span class="line"># remote host is: name/ip:port, e.g. 192.168.0.1:514, port optional</span><br><span class="line">#*.* @@remote-host:514</span><br><span class="line"># ### end of the forwarding rule ###</span><br><span class="line"></span><br><span class="line">## custom ...</span><br><span class="line">*.info /var/log/test.log</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# cat /etc/logrotate.d/test.log</span><br><span class="line">/var/log/test.log &#123;</span><br><span class="line"> rotate 10</span><br><span class="line"> size = 1k</span><br><span class="line"> compress</span><br><span class="line"> postrotate</span><br><span class="line">  killall -HUP rsyslogd</span><br><span class="line"> endscript</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>【摘】RESTful介绍</title>
    <url>/2021/RESTful/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>Representational State Transfer，具象状态传输（转换），表现层状态转移。</p>
</blockquote>
<a id="more"></a>
<h2 id="是Web服务的一种新的架构风格（一种思想）"><a href="#是Web服务的一种新的架构风格（一种思想）" class="headerlink" title="是Web服务的一种新的架构风格（一种思想）"></a>是Web服务的一种新的架构风格（一种思想）</h2><p>面向资源<br>一种软件架构风格<br>URL定位资源，用HTTP动词（GET,POST,DELETE,DETC）描述操作，从status code获知结果</p>
<h2 id="REST架构的主要原则"><a href="#REST架构的主要原则" class="headerlink" title="REST架构的主要原则"></a>REST架构的主要原则</h2><p>对网络上所有的资源都有一个资源标志符<br>对资源的操作不会改变标识符<br>同一资源有多种表现形式（xml、json）<br>所有操作都是无状态的（Stateless）</p>
<h2 id="RESTful设计准则"><a href="#RESTful设计准则" class="headerlink" title="RESTful设计准则"></a>RESTful设计准则</h2><p>宾语必须是名词<br>复数URL<br>避免多级URL</p>
<ul>
<li>更好的做法是，除了第一级，其他级别都用查询字符串表达<br>GET /authors/12?categories=2<br>GET /articles?published=true</li>
</ul>
<p>传统 vs REST风格</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/user/query/1 GET</span><br><span class="line">http://127.0.0.1/user/save POST </span><br><span class="line">http://127.0.0.1/user/update POST</span><br><span class="line">http://127.0.0.1/user/delete GET/POST</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/user/&#123;id&#125; GET</span><br><span class="line">http://127.0.0.1/user POST</span><br><span class="line">http://127.0.0.1/user PUT</span><br><span class="line">http://127.0.0.1/user DELETE</span><br><span class="line"></span><br><span class="line">PATCH/collections/identity：返回被修改的属性</span><br></pre></td></tr></table></figure>
<p>网络上的所有事物都可以被抽象为资源。<br>每一个资源都有唯一的资源标识，对资源的操作不会改变这些标识。<br>所有的操作都是无状态的。</p>
<h2 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h2><p><strong>GET</strong><br>安全且幂等<br>获取表示<br>变更时获取表示（缓存）<br>200（OK） - 表示已在响应中发出<br>204（无内容） - 资源有空表示<br>301（Moved Permanently） - 资源的URI已被更新<br>303（See Other） - 其他（如，负载均衡）<br>304（not modified）- 资源未更改（缓存）<br>400 （bad request）- 指代坏请求（如，参数错误）<br>404 （not found）- 资源不存在<br>406 （not acceptable）- 服务端不支持所需表示<br>500 （internal server error）- 通用错误响应<br>503 （Service Unavailable）- 服务端当前无法处理请求</p>
<p><strong>POST</strong><br>不安全且不幂等<br>使用服务端管理的（自动产生）的实例号创建资源<br>创建子资源<br>部分更新资源<br>如果没有被修改，则不过更新资源（乐观锁）<br>200（OK）- 如果现有资源已被更改<br>201（created）- 如果新资源被创建<br>202（accepted）- 已接受处理请求但尚未完成（异步处理）<br>301（Moved Permanently）- 资源的URI被更新<br>303（See Other）- 其他（如，负载均衡）<br>400（bad request）- 指代坏请求<br>404 （not found）- 资源不存在<br>406 （not acceptable）- 服务端不支持所需表示<br>409 （conflict）- 通用冲突<br>412 （Precondition Failed）- 前置条件失败（如执行条件更新时的冲突）<br>415 （unsupported media type）- 接受到的表示不受支持<br>500 （internal server error）- 通用错误响应<br>503 （Service Unavailable）- 服务当前无法处理请求</p>
<p><strong>PUT</strong><br>不安全但幂等<br>用客户端管理的实例号创建一个资源<br>通过替换的方式更新资源<br>如果未被修改，则更新资源（乐观锁）<br>200 （OK）- 如果已存在资源被更改<br>201 （created）- 如果新资源被创建<br>301（Moved Permanently）- 资源的URI已更改<br>303 （See Other）- 其他（如，负载均衡）<br>400 （bad request）- 指代坏请求<br>404 （not found）- 资源不存在<br>406 （not acceptable）- 服务端不支持所需表示<br>409 （conflict）- 通用冲突<br>412 （Precondition Failed）- 前置条件失败（如执行条件更新时的冲突）<br>415 （unsupported media type）- 接受到的表示不受支持<br>500 （internal server error）- 通用错误响应<br>503 （Service Unavailable）- 服务当前无法处理请求</p>
<p><strong>DELETE</strong><br>不安全但幂等<br>删除资源<br>200 （OK）- 资源已被删除<br>301 （Moved Permanently）- 资源的URI已更改<br>303 （See Other）- 其他，如负载均衡<br>400 （bad request）- 指代坏请求<br>404 （not found）- 资源不存在<br>409 （conflict）- 通用冲突<br>500 （internal server error）- 通用错误响应<br>503 （Service Unavailable）- 服务端当前无法处理请求</p>
<h2 id="为什么要使用Restful"><a href="#为什么要使用Restful" class="headerlink" title="为什么要使用Restful"></a>为什么要使用Restful</h2><p>RESTful架构与其他架构的区别</p>
<ul>
<li>SOAP WebService</li>
<li>RESTful Webservice</li>
<li>效率和易用性<ul>
<li>SOAP由于各种需求不断扩充本身协议的内容，导致在SOAP处理方面的性能有所下降。同时在易用性方面以及学习成本上也有所增加。</li>
<li>RESTful由于其面向资源接口设计以及操作抽象简化了开发者的不良设计,同时也最大限度的利用了Http最初的应用协议设计理念。</li>
</ul>
</li>
<li>安全<ul>
<li>RESTful对于资源型服务接口来说很合适,同时特别适合效率要求很高,但是对于安全要求不高的场景。</li>
<li>SOAP的成熟性可以给需要提供给多开发语言的, 对于安全性<br>要求较高的接口设计带来便利。<br>RESTful减少了传统请求的拆装箱操作，结构清晰。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>else</tag>
      </tags>
  </entry>
  <entry>
    <title>【摘】broker/agent/proxy/delegate的区别</title>
    <url>/2021/broker-agent-proxy-delegate/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Broker：中介式代理"><a href="#Broker：中介式代理" class="headerlink" title="Broker：中介式代理"></a>Broker：中介式代理</h2><p>Broker 是一种中介式代理。在网络与分布计算中, 两个层次上的对等实体, 若不便彼此直接交往, 则可通过Broker实现通信。这些可以有各种各样的定义和实现, 也表现在不同的层次上。简单一点， Broker提供了分布式服务和资源的透明访问，屏蔽了异构组件之间的差异。<br><a id="more"></a><br>分布式异构平台之间, 为了实现互操作性, 采用中间件乃是最常用的方法. 例如，在不同类型操作系统之间, 不同厂商数据库之间, 不同应用系统之间, 均可用各种中间件解决。中间件就是一种中介式代理. </p>
<h2 id="Agent：自主式代理"><a href="#Agent：自主式代理" class="headerlink" title="Agent：自主式代理"></a>Agent：自主式代理</h2><p>Agent是分布智能的基础单元。它具有一定程度的独立行为能力与智能,同时又遵从分布系统中某种统一的标准。在分布式环境中，Agent 可以和客户端不在一台主机上。</p>
<p>Agent代表着主体服务，但主体服务对Agent并不是完全控制，Agent实现了一定的算法, 具有解决某种问题的能力, 甚至包含通常意义下的“人工智能”, 如推理机、模糊运算、神经网络、知识库等能力。Agent在其生命周期内具有各种可能的特征变化，一般采用状态机模型，其通信能力是一切互操作性的基础。</p>
<p>动态代理(dynamical-agent) 架构就是一种典型的应用。它支持自身行为的动态修正, 并不限于具有预定的固定功能, 而可根据应用动态地加载和修改其动作, 以适应环境与要求变化, 跨越不同应用而扮演不同的角色。</p>
<p>在互联网协议栈的应用中， SNMP Agent就是一种自主式代理，具体实现包括了三大部分：控制模块、通讯模块和MIB信息库。</p>
<h2 id="Proxy：透传式代理"><a href="#Proxy：透传式代理" class="headerlink" title="Proxy：透传式代理"></a>Proxy：透传式代理</h2><p>Proxy是一种透传式代理，是为了能有效地访问远程服务或其他代理。这里的“远程”并非一定是地域上的远近, 而是涉及网络拓扑或计算复杂度上的成本。</p>
<p>互联网上的代理服务器技术, 便是这类代理的应用, 它可以穿越或绕开网络封锁(如防火墙) , 达到目标主机。</p>
<p>在Java 中动静态代理中的proxy 命名，有混淆概念的嫌疑，JavaScript中的Proxy对象，也是如此。</p>
<h2 id="Delegate：委托式代理"><a href="#Delegate：委托式代理" class="headerlink" title="Delegate：委托式代理"></a>Delegate：委托式代理</h2><p>Delegate 是委托性或者指派式代理，一般地，管理进程指派给代理方，并在代理方执行管理操作，而不涉及管理方。</p>
<p>Delegate 不具备自主移动的能力，需要借助外力，通过指派协议从一个地址空间移动到另一个地址空间。只要需要Delegate 执行任务，它就一直处于执行状态。它可以完成计算性能参数和统计数据、配置网络、修改参数、更新应用等任务。</p>
<p>在JQuery 中就有Delegate（）方法，更广泛为人所知的就是Obj-C中的委托式代理了。iOS开发中的Delegate用于页面传值，也常用Delegate来传递消息和值，以及UITableView的Delegate等。</p>
<p>然而，现实是复杂的，这四种代理机制竟然可以混合组装使用，例如proxy-agent 等等。</p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>else</tag>
      </tags>
  </entry>
  <entry>
    <title>Using Cluster IP Service Type and Ingress</title>
    <url>/2021/Using-Cluster-IP%20Service-Type-and-Ingress/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p><a href="https://kubernetes.github.io/ingress-nginx/user-guide/exposing-tcp-udp-services/" rel="external nofollow noopener noreferrer" target="_blank">ingress四层转发配置参考</a><br><a href="https://www.ibm.com/docs/en/netcoolomnibus/8?topic=private-exposing-probe-service" rel="external nofollow noopener noreferrer" target="_blank">Exposing the probe service - IBM Documentation</a></p>
</blockquote>
<p>Due to a limitation on the Kubernetes Ingress resource to expose TCP and UDP services, the following steps can be used to create a static configuration on the Kubernetes Ingress controller to make the probe service reachable externally. This limitation does not apply to probes that use HTTP protocols to receive data.</p>
<p>A Cluster Administrator needs to reconfigure the nginx-ingress-controller with a “static” configuration based on Configmaps and restart the ingress controller for the changes to take effect.</p>
<a id="more"></a>
<blockquote>
<p>CAUTION:<br>Restarting the ingress controller would impact other workloads running. Consider performing the change during a planned downtime in production environments.</p>
</blockquote>
<p>To expose the probe TCP/UDP service to external networks using Ingress, you will need to configure the nginx-ingress-controller to specify the <strong>–tcp-services-configmap</strong> and <strong>–udp-services-configmap</strong> flags to point to an existing configuration map where the key is the external port to use and the value indicates the service to expose:</p>
<ol>
<li><p>Set <strong>probe.service.type=ClusterIP</strong>.</p>
</li>
<li><p>Determine the service name and ports of deployment using the following commands. In this example, the myprobe Helm release in the default namespace is used to query for the service name and port.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export NAMESPACE=default</span><br><span class="line">export CHARTREL=myprobe</span><br><span class="line">export SERVICE_NAME=$(kubectl get services --namespace $NAMESPACE -l &quot;app.kubernetes.io/instance=$CHARTREL&quot; -o jsonpath=&quot;&#123;.items[0].metadata.name&#125;&quot;)</span><br><span class="line">export SERVICE_PORT=$(kubectl get services --namespace $NAMESPACE -l &quot;app.kubernetes.io/instance=$CHARTREL&quot; -o jsonpath=&quot;&#123;.items[0].spec.ports[0].port&#125;&quot;)</span><br><span class="line">echo &quot;$NAMESPACE/$SERVICE_NAME:$SERVICE_PORT&quot;</span><br><span class="line">default/myprobe-ibm-netcool-probe-snmp:162</span><br></pre></td></tr></table></figure>
</li>
<li><p>Create a configuration map to store the external port to use and service to expose using the format: &lt;namespace/service name&gt;:<service port>:[PROXY]:[PROXY] where [PROXY]:[PROXY] is optional. For example, create the configmap resource as shown below in the default namepace to expose a host port 1162 to myprobe-ibm-netcool-probe-snmp on port 162 which is deployed on default namespace. If an existing configmap already exists, add a new entry into the section data.</service></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl create configmap tcp-controller-configmap \</span><br><span class="line">    --from-literal=1162=default/myprobe-ibm-netcool-probe-snmp:162</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>This creates the following config map:<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">    name: tcp-controller-configmap</span><br><span class="line">    namespace: default</span><br><span class="line">data:</span><br><span class="line">    1162: &quot;default/myprobe-ibm-netcool-probe-snmp:162&quot;</span><br></pre></td></tr></table></figure></p>
<ol start="4">
<li><p>Optionally, to expose a UDP service, create a new config map as shown in the following example. If an existing configmap exists, add a new entry into the data section.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">    name: udp-controller-configmap</span><br><span class="line">    namespace: default</span><br><span class="line">data:</span><br><span class="line">    1162: &quot;default/myprobe-ibm-netcool-probe-snmp:162&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Edit the nginx-ingress-controller daemon set to add the following items.</p>
<blockquote>
<p><strong>Note</strong>: In IBM Cloud Private 2.1.0.2, the Nginx Controller name is nginx-ingress-lb-<arch>, where <arch> is the platform architecture such amd64 or ppc64le.</arch></arch></p>
</blockquote>
</li>
</ol>
<p>The TCP/UDP services configmap flags <strong>–tcp-services-configmap=tcp-controller-configmap</strong> and <strong>–udp-services-configmap=udp-controller-configmap</strong> in the .spec.template.spec.containers[].args[] attribute. An example is shown in the following JSON snippet:</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;spec&quot;: &#123;</span><br><span class="line">    &quot;containers&quot;: [</span><br><span class="line"> &#123;</span><br><span class="line">        &quot;args&quot;: [</span><br><span class="line">         &quot;/nginx-ingress-controller&quot;,</span><br><span class="line">            &quot;--default-backend-service=$(POD_NAMESPACE)/default-backend&quot;,</span><br><span class="line">            &quot;--configmap=$(POD_NAMESPACE)/nginx-ingress-controller&quot;,</span><br><span class="line">            &quot;--report-node-internal-ip-address=true&quot;,</span><br><span class="line">         &quot;--annotations-prefix=ingress.kubernetes.io&quot;,</span><br><span class="line">            &quot;--enable-ssl-passthrough=true&quot;,</span><br><span class="line">         &quot;--publish-status-address=9.42.83.226&quot;,</span><br><span class="line">            &quot;--udp-services-configmap=default/udp-controller-configmap&quot;,</span><br><span class="line">            &quot;--tcp-services-configmap=default/tcp-controller-configmap&quot;</span><br><span class="line">    	],</span><br></pre></td></tr></table></figure>
<p>Add an additional hostport for the Ingress to open in the .spec.template.spec.containers[].ports[] attribute of the nginx-ingress-controller daemon set in the kube-system namespace. The default ports are ports 80 (TCP) and 443 (TCP). To add the additional hostports, use the following steps:</p>
<p>Edit the nginx-ingress-controller and find the .spec.template.spec.containers[].ports[] attribute.</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl edit ds/nginx-ingress-controller -n kube-system</span><br></pre></td></tr></table></figure>
<p>The example shown in the following JSON snippet adds two new hostports 1162 for both TCP/UDP in the Ingress controller.</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;name&quot;: &quot;nginx-ingress&quot;,</span><br><span class="line">&quot;ports&quot;: [</span><br><span class="line"> &#123;</span><br><span class="line">        &quot;containerPort&quot;: 80,</span><br><span class="line">     &quot;hostPort&quot;: 80,</span><br><span class="line">        &quot;name&quot;: &quot;http&quot;,</span><br><span class="line">     &quot;protocol&quot;: &quot;TCP&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;containerPort&quot;: 443,</span><br><span class="line">     &quot;hostPort&quot;: 443,</span><br><span class="line">        &quot;name&quot;: &quot;https&quot;,</span><br><span class="line">     &quot;protocol&quot;: &quot;TCP&quot;</span><br><span class="line">    &#125;,</span><br><span class="line"> &#123;</span><br><span class="line">        &quot;containerPort&quot;: 1162,</span><br><span class="line">        &quot;hostPort&quot;: 1162,</span><br><span class="line">        &quot;name&quot;: &quot;snmp-tcp&quot;,</span><br><span class="line">     &quot;protocol&quot;: &quot;TCP&quot;</span><br><span class="line">    &#125;,</span><br><span class="line"> &#123;</span><br><span class="line">        &quot;containerPort&quot;: 1162,</span><br><span class="line">     &quot;hostPort&quot;: 1162,</span><br><span class="line">        &quot;name&quot;: &quot;snmp-udp&quot;,</span><br><span class="line">        &quot;protocol&quot;: &quot;UDP&quot;</span><br><span class="line">    &#125;</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<p>Save/apply the changes to the nginx-ingress-controller daemon set. The nginx-ingress-controller will automatically restart its nginx-ingress-controller pod and load the new configuration.</p>
<ol start="6">
<li><p>After the nginx-ingress-controller pod is running, verify that you are able to reach the probe service via the hostport. For the SNMP Probe for example, test by sending a SNMP trap to <kubernetes-proxy-ip>:1162 as configured above and the SNMP Probe should log (if messageLevel=debug) indicating that trap is received.</kubernetes-proxy-ip></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">snmptrap -C i -v 2c \</span><br><span class="line">    -c public tcp:&lt;kubernetes-proxy-ip&gt;:1162 \</span><br><span class="line">    .1.3.6.1.6.3.1.1.5.3 .1.3.6.1.6.3.1.1.5.3   \</span><br><span class="line">    ifIndex i 2 \</span><br><span class="line">    ifAdminStatus i 1 \</span><br><span class="line">    ifOperStatus i 1</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>K8s</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch笔记02</title>
    <url>/2021/elasticsearch-note/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h2><p>倒排索引是单词文档矩阵的一种存储形式<br>分词系统将文档切分成单词序列</p>
<blockquote>
<p>单词文档矩阵 = 单词词典 + 倒排文件<br>单词词典：所有单词的集合，包括单词本身的信息和指向倒排列表的指针<br>倒排文件：所有单词的倒排列表顺序地存储在磁盘里形成的文件</p>
</blockquote>
<p>倒排列表最简单的形式仅记录包含某个单词的文档编号(DocID)，复杂一些的，还记录了单词在某个文档出现的次数，即单词频率（TF），还可能包含某个单词的文档数，即文档频率（DF）,和单词在文档中的位置（Pos）</p>
<a id="more"></a>
<h2 id="ES操作记录"><a href="#ES操作记录" class="headerlink" title="ES操作记录"></a>ES操作记录</h2><p>版本：7.5</p>
<h3 id="创建索引（同时创建映射）"><a href="#创建索引（同时创建映射）" class="headerlink" title="创建索引（同时创建映射）"></a>创建索引（同时创建映射）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -XPUT http://localhost:9200/book -H &quot;Content-Type: application/json&quot; -d &apos;&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;number_of_shards&quot;: 1,</span><br><span class="line">    &quot;number_of_replicas&quot;: 1</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;id&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;long&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;name&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;book_url&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;price&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;double&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;&apos;</span><br></pre></td></tr></table></figure>
<p>7.0之后的版本没有type的概念（见<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/removal-of-types.html" rel="external nofollow noopener noreferrer" target="_blank">Removal of mapping types</a>）。如果需要迁移包含多个type的旧索引到新版本ES里，可以创建多个index分别对应一个type，或者只创建一个index并增加type字段，然后使用<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.15/docs-reindex.html" rel="external nofollow noopener noreferrer" target="_blank">reindex</a>迁移文档。</p>
<h3 id="用PUT还是POST？"><a href="#用PUT还是POST？" class="headerlink" title="用PUT还是POST？"></a>用PUT还是POST？</h3><p>操作具体的资源用PUT，操作集合资源用POST，POST非幂等性。</p>
<blockquote>
<p>_settings需用PUT不能用POST<br>_search不能用PUT</p>
</blockquote>
<h3 id="查看映射"><a href="#查看映射" class="headerlink" title="查看映射"></a>查看映射</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost es_api_test]# curl -s -XGET http://localhost:9200/book/_mapping |jq</span><br></pre></td></tr></table></figure>
<h3 id="创建一个文档、查看"><a href="#创建一个文档、查看" class="headerlink" title="创建一个文档、查看"></a>创建一个文档、查看</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT /user/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;username&quot;: &quot;dream-hammer&quot;,</span><br><span class="line">  &quot;message&quot;: &quot;abc123&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># curl创建</span><br><span class="line">curl -XPUT  -H &apos;Content-Type: application/json&apos; http://localhost:9200/user/_doc/1 -d &apos;&#123;&quot;username&quot;: &quot;dream-hammer&quot;,&quot;message&quot;: &quot;abc123&quot;&#125;&apos;</span><br><span class="line"># curl查询</span><br><span class="line">curl -s -XPOST localhost:9200/user/_search -H &apos;Content-Type: application/json&apos; -d &apos;&#123;&quot;query&quot;: &#123;&quot;match_all&quot;: &#123;&#125;&#125;&#125;&apos; |jq</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot;: 0,</span><br><span class="line">  &quot;timed_out&quot;: false,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 1,</span><br><span class="line">    &quot;successful&quot;: 1,</span><br><span class="line">    &quot;skipped&quot;: 0,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: &#123;</span><br><span class="line">      &quot;value&quot;: 1,</span><br><span class="line">      &quot;relation&quot;: &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot;: 1,</span><br><span class="line">    &quot;hits&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;user&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;1&quot;,</span><br><span class="line">        &quot;_score&quot;: 1,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;username&quot;: &quot;dream-hammer&quot;,</span><br><span class="line">          &quot;message&quot;: &quot;abc123&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="更新一个文档"><a href="#更新一个文档" class="headerlink" title="更新一个文档"></a>更新一个文档</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT /user/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;message&quot;: &quot;def321&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;_index&quot; : &quot;user&quot;,</span><br><span class="line">  &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">  &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">  &quot;_version&quot; : 7,</span><br><span class="line">  &quot;result&quot; : &quot;updated&quot;,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 2,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;_seq_no&quot; : 10,</span><br><span class="line">  &quot;_primary_term&quot; : 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="乐观更新"><a href="#乐观更新" class="headerlink" title="乐观更新"></a>乐观更新</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT /user/_doc/1?version=7</span><br><span class="line">&#123;</span><br><span class="line">  &quot;message&quot;: &quot;def3210&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>报错如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;error&quot;: &#123;</span><br><span class="line">    &quot;root_cause&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;type&quot;: &quot;action_request_validation_exception&quot;,</span><br><span class="line">        &quot;reason&quot;: &quot;Validation Failed: 1: internal versioning can not be used for optimistic concurrency control. Please use `if_seq_no` and `if_primary_term` instead;&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;type&quot;: &quot;action_request_validation_exception&quot;,</span><br><span class="line">    &quot;reason&quot;: &quot;Validation Failed: 1: internal versioning can not be used for optimistic concurrency control. Please use `if_seq_no` and `if_primary_term` instead;&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;status&quot;: 400</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>version不能用于乐观并发更新。改用seq_no和primary_term如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET /user/_doc/1  # 查看当前seq_no, primary_term</span><br><span class="line">PUT /user/_doc/1?if_seq_no=10&amp;if_primary_term=1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;message&quot;: &quot;def3210&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="批量创建文档"><a href="#批量创建文档" class="headerlink" title="批量创建文档"></a>批量创建文档</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost es_api_test]<span class="comment"># cat songs.bulk</span></span><br><span class="line">&#123;<span class="string">"index"</span>: &#123;<span class="string">"_index"</span>: <span class="string">"songs"</span>, <span class="string">"_type"</span>: <span class="string">"_doc"</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">"id"</span>: 1, <span class="string">"name"</span>: <span class="string">"风筝误"</span>, <span class="string">"time"</span>: <span class="string">"04:31"</span>, <span class="string">"artist"</span>: <span class="string">"刘珂矣"</span>, <span class="string">"album"</span>: <span class="string">"半壶纱"</span>, <span class="string">"cover"</span>: <span class="string">"https://s5.music.126.net/style/web2/img/default/default_album.jpg"</span>, <span class="string">"url"</span>: <span class="string">"static/media/风筝误.mp3"</span>&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -s -H &quot;Content-Type: application/x-ndjson&quot; -XPOST localhost:9200/_bulk --data-binary &quot;@songs.bulk&quot;    #是--data-binary，不是-d，否则提示parse_exception</span><br></pre></td></tr></table></figure>
<h3 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost es_api_test]# curl http://localhost:9200/_cat/indices?v</span><br><span class="line">health status index                    uuid                   pri rep docs.count docs.deleted store.size pri.store.size</span><br><span class="line">green  open   .kibana_task_manager_1   zKnjGTdrRgyElkST2F-Bdw   1   0          2            0     31.6kb         31.6kb</span><br><span class="line">yellow open   songs                    2-yMj8ikTYay4k8f_CIQ2g   1   1         25            0     28.4kb         28.4kb</span><br><span class="line">green  open   .apm-agent-configuration nP5HnnIYQhWqjcd17By6lA   1   0          0            0       283b           283b</span><br><span class="line">green  open   .kibana_1                zZuFlefIRhaHHBdJiYovuw   1   0         10            3     43.4kb         43.4kb</span><br></pre></td></tr></table></figure>
<h3 id="查看集群健康状态"><a href="#查看集群健康状态" class="headerlink" title="查看集群健康状态"></a>查看集群健康状态</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost es_api_test]<span class="comment"># curl http://localhost:9200/_cluster/health?pretty</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"cluster_name"</span> : <span class="string">"docker-cluster"</span>,</span><br><span class="line">  <span class="string">"status"</span> : <span class="string">"yellow"</span>,    <span class="comment">#yellow状态</span></span><br><span class="line">  <span class="string">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"number_of_nodes"</span> : 1,</span><br><span class="line">  <span class="string">"number_of_data_nodes"</span> : 1,</span><br><span class="line">  <span class="string">"active_primary_shards"</span> : 4,</span><br><span class="line">  <span class="string">"active_shards"</span> : 4,</span><br><span class="line">  <span class="string">"relocating_shards"</span> : 0,</span><br><span class="line">  <span class="string">"initializing_shards"</span> : 0,</span><br><span class="line">  <span class="string">"unassigned_shards"</span> : 1,    <span class="comment">#unassigned 1</span></span><br><span class="line">  <span class="string">"delayed_unassigned_shards"</span> : 0,</span><br><span class="line">  <span class="string">"number_of_pending_tasks"</span> : 0,</span><br><span class="line">  <span class="string">"number_of_in_flight_fetch"</span> : 0,</span><br><span class="line">  <span class="string">"task_max_waiting_in_queue_millis"</span> : 0,</span><br><span class="line">  <span class="string">"active_shards_percent_as_number"</span> : 80.0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="查看分片"><a href="#查看分片" class="headerlink" title="查看分片"></a>查看分片</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost es_api_test]<span class="comment"># curl http://localhost:9200/_cat/shards/songs?v</span></span><br><span class="line">index shard prirep state      docs  store ip         node</span><br><span class="line">songs 0     p      STARTED      25 28.4kb 172.24.0.2 1583abe64b70</span><br><span class="line">songs 0     r      UNASSIGNED</span><br></pre></td></tr></table></figure>
<h3 id="查看文档数"><a href="#查看文档数" class="headerlink" title="查看文档数"></a>查看文档数</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost es_api_test]<span class="comment"># curl http://localhost:9200/songs/_count?pretty</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"count"</span> : 25,</span><br><span class="line">  <span class="string">"_shards"</span> : &#123;</span><br><span class="line">    <span class="string">"total"</span> : 1,</span><br><span class="line">    <span class="string">"successful"</span> : 1,</span><br><span class="line">    <span class="string">"skipped"</span> : 0,</span><br><span class="line">    <span class="string">"failed"</span> : 0</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="基数聚合"><a href="#基数聚合" class="headerlink" title="基数聚合"></a>基数聚合</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST /songs/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;distinct_name_count&quot;: &#123;&quot;cardinality&quot;: &#123;&quot;field&quot;: &quot;name&quot;&#125;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>报错信息如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;error&quot;: &#123;</span><br><span class="line">    &quot;root_cause&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;type&quot;: &quot;illegal_argument_exception&quot;,</span><br><span class="line">        &quot;reason&quot;: &quot;Fielddata is disabled on text fields by default. Set fielddata=true on [name] in order to load fielddata in memory by uninverting the inverted index. Note that this can however use significant memory. Alternatively use a keyword field instead.&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>解决方法：</p>
<ol>
<li>改name为name.keyword</li>
<li>设置fileddata=true</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST /songs/_mapping</span><br><span class="line">&#123;</span><br><span class="line">  &quot;properties&quot;: &#123;</span><br><span class="line">     &quot;name&quot;: &#123;</span><br><span class="line">       &quot;type&quot;: &quot;text&quot;, </span><br><span class="line">       &quot;fielddata&quot;: true</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="获取索引前50个文档"><a href="#获取索引前50个文档" class="headerlink" title="获取索引前50个文档"></a>获取索引前50个文档</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET|POST /songs/_search?size=50</span><br><span class="line"></span><br><span class="line">GET|POST /songs/_search?size=50</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET|POST /songs/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name.keyword&quot;: &quot;风筝误&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="用GET还是POST"><a href="#用GET还是POST" class="headerlink" title="用GET还是POST?"></a>用GET还是POST?</h3><p>有点奇怪，GET也可以带请求体，ES官网的search语法<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-span-containing-query.html" rel="external nofollow noopener noreferrer" target="_blank">示例</a>都是GET。</p>
<blockquote>
<p>GET请求是是依靠URI检索数据的，RFC没有规定不能有响应体，只是说GET通过URI标识并<strong>获取</strong>了一个资源，且再次获取不会重新请求，可以减少网络负担。</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># curl -s -XPOST localhost:9200/songs/_search?size=50 -H 'Content-Type: application/json' -d '&#123;"query": &#123;"match_all": &#123;&#125;&#125;&#125;' 2&gt;/dev/null  |jq</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"took"</span>: 0,</span><br><span class="line">  <span class="string">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"_shards"</span>: &#123;</span><br><span class="line">    <span class="string">"total"</span>: 1,</span><br><span class="line">    <span class="string">"successful"</span>: 1,</span><br><span class="line">    <span class="string">"skipped"</span>: 0,</span><br><span class="line">    <span class="string">"failed"</span>: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"hits"</span>: &#123;</span><br><span class="line">    <span class="string">"total"</span>: &#123;</span><br><span class="line">      <span class="string">"value"</span>: 25,</span><br><span class="line">      <span class="string">"relation"</span>: <span class="string">"eq"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"max_score"</span>: 1,</span><br><span class="line">    <span class="string">"hits"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"_index"</span>: <span class="string">"songs"</span>,</span><br><span class="line">        <span class="string">"_type"</span>: <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="string">"_id"</span>: <span class="string">"vwFbiHsBbxOPhTYXJGC2"</span>,</span><br><span class="line">        <span class="string">"_score"</span>: 1,</span><br><span class="line">        <span class="string">"_source"</span>: &#123;</span><br><span class="line">          <span class="string">"id"</span>: 1,</span><br><span class="line">          <span class="string">"name"</span>: <span class="string">"风筝误"</span>,</span><br><span class="line">          <span class="string">"time"</span>: <span class="string">"04:31"</span>,</span><br><span class="line">          <span class="string">"artist"</span>: <span class="string">"刘珂矣"</span>,</span><br><span class="line">          <span class="string">"album"</span>: <span class="string">"半壶纱"</span>,</span><br><span class="line">          <span class="string">"cover"</span>: <span class="string">"https://s4.music.126.net/style/web2/img/default/default_album.jpg"</span>,</span><br><span class="line">          <span class="string">"url"</span>: <span class="string">"static/media/风筝误.mp3"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      ...</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>生成jsonp</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># curl -s -XPOST localhost:9200/songs/_doc/_search?size=50 -H 'Content-Type: application/json' -d '&#123;"query": &#123;"match_all": &#123;&#125;&#125;&#125;' 2&gt;/dev/null  |jq |awk 'BEGIN&#123;flag=0&#125;&#123;if($0~/"_source":/)&#123;print "&#123;"; flag=1&#125;else if(flag)&#123;print $0;&#125; if($0~/^\s*&#125;$/)&#123;flag=0&#125;&#125;' |sed 's/\s*&#125;/&#125;,/g;' |sed '1 s/^&#123;/&#123;"data": [&#123;/' |sed '$ s/,$/]&#125;/' |jq |sed '1 i callBack(' |sed '$ s/$/);/'</span></span><br><span class="line">callBack(</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"data"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"id"</span>: 1,</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"风筝误"</span>,</span><br><span class="line">      <span class="string">"time"</span>: <span class="string">"04:31"</span>,</span><br><span class="line">      <span class="string">"artist"</span>: <span class="string">"刘珂矣"</span>,</span><br><span class="line">      <span class="string">"album"</span>: <span class="string">"半壶纱"</span>,</span><br><span class="line">      <span class="string">"cover"</span>: <span class="string">"https://s4.music.126.net/style/web2/img/default/default_album.jpg"</span>,</span><br><span class="line">      <span class="string">"url"</span>: <span class="string">"static/media/风筝误.mp3"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="其它API"><a href="#其它API" class="headerlink" title="其它API"></a>其它API</h3><ul>
<li><a href="https://lzzeng.github.io/docs/docs/log-analysis/es-api-memo.html">es-api-memo</a></li>
<li><a href="https://lzzeng.github.io/2021/Elasticsearch/">Elasticsearch笔记01</a></li>
</ul>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>【摘】HDFS和HBase</title>
    <url>/2021/hdfs-hbase/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="HDFS"><a href="#HDFS" class="headerlink" title="HDFS"></a>HDFS</h2><p>HDFS是Hadoop分布式文件系统。<br>一个HDFS集群主要由一个NameNode和很多个Datanode组成：Namenode管理文件系统的元数据，而Datanode存储了实际的数据。<br><a id="more"></a><br>HDFS采用一种称为机架感知(rack-aware)的策略来改进数据的可靠性、可用性和网络带宽的利用率。</p>
<p>副本：在大多数情况下，副本系数是3，HDFS的存放策略是将一个副本存放在本地机架的节点上，一个副本放在同一机架的另一个节点上，最后一个副本放在不同机架的节点上。</p>
<h2 id="HBase"><a href="#HBase" class="headerlink" title="HBase"></a>HBase</h2><p>HBase是Google Bigtable的开源实现，类似Google Bigtable利用GFS作为其文件存储系统，HBase利用Hadoop HDFS作为其文件存储系统。</p>
<p>利用Hadoop MapReduce来处理HBase中的海量数据。</p>
<p>为什么在HDFS上使用HBase？</p>
<ul>
<li>HBase 在 HDFS 之上提供了：<ul>
<li>高并发实时随机写，通过 LSM（内存+顺序写磁盘）的方式提供了 HDFS 所不拥有的实时随机写及修改功能</li>
<li>高并发实时点读及扫描（了解一下 LSM 算法），在文件系统之上有数据库，在业务层面，HBase 完全可以独立于 HDFS</li>
</ul>
</li>
<li>HDFS为HBase提供了高可靠性的底层存储支持</li>
<li>Hadoop MapReduce为HBase提供了高性能的计算能力，Zookeeper为HBase提供了稳定服务和failover机制。Pig和Hive还为HBase提供了高层语言支持，使得在HBase上进行数据统计处理变的非常简单。 Sqoop则为HBase提供了方便的RDBMS（关系型数据库）数据导入功能，使得传统数据库数据向HBase中迁移变的非常方便</li>
<li>HBASE可以满足大规模数据的实时处理需求<ul>
<li>HDFS面向批量访问模式，不是随机访问模式</li>
<li>Hadoop可以很好地解决大规模数据的离线批量处理问题，但是，受限于Hadoop MapReduce编程框架的高延迟数据处理机制，使得Hadoop无法满足大规模数据实时处理应用的需求</li>
</ul>
</li>
</ul>
<p>Hadoop的四个主要组成部分：核心包，HDFS文件系统，MapReduce模型，yarn资源调度框架。</p>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>密码管理工具一只</title>
    <url>/2021/mypass/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>密码百八十个，又不便明文记录在手机或本子上，只记提示符时间一长看着一堆简略的提示符也傻眼，市场上的密码管理app虽然界面好看但也不敢用，安卓开发又不hui，索性鼓捣一个命令行工具</p>
</blockquote>
<a id="more"></a>
<p>效果图：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2021/mypass.jpg" alt="mypass" style="zoom: 33%;"></p>
<p>加密/解密：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPass</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, file_passwd=<span class="string">'./passwd'</span>)</span>:</span></span><br><span class="line">        self.encrypt_head = bytes(<span class="string">'MYPASSWD_HEAD'</span>, encoding=<span class="string">"utf8"</span>)</span><br><span class="line">        self.secret = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(self, content, encode=False, decode=True)</span>:</span></span><br><span class="line">        <span class="string">""" bytes -&gt; str</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> len(self.secret) == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">"Warning: the secret is empty"</span>)</span><br><span class="line">        <span class="keyword">elif</span> decode <span class="keyword">and</span> <span class="keyword">not</span> content.startswith(self.encrypt_head):</span><br><span class="line">            print(<span class="string">"The content has already been decrypt"</span>)</span><br><span class="line">            <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line">        content = content[len(self.encrypt_head):]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">from</span> itertools <span class="keyword">import</span> cycle</span><br><span class="line">        result = bytes()</span><br><span class="line">        temp = cycle(self.secret)</span><br><span class="line">        <span class="keyword">for</span> ch <span class="keyword">in</span> content:</span><br><span class="line">            result += bytes(chr(ch ^ ord(next(temp))), encoding=<span class="string">"utf8"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result.decode(encoding=<span class="string">"utf8"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(self, content, encode=True, decode=False)</span>:</span></span><br><span class="line">        <span class="string">""" bytes -&gt; bytes</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> len(self.secret) == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">"Warning: the secret is empty"</span>)</span><br><span class="line">        <span class="keyword">elif</span> encode <span class="keyword">and</span> content.startswith(self.encrypt_head):</span><br><span class="line">            print(<span class="string">"The content has already been encrypt"</span>)</span><br><span class="line">            <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line">        <span class="keyword">from</span> itertools <span class="keyword">import</span> cycle</span><br><span class="line">        result = self.encrypt_head</span><br><span class="line">        temp = cycle(self.secret)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> bt <span class="keyword">in</span> content:</span><br><span class="line">            result += bytes(chr(bt ^ ord(next(temp))), encoding=<span class="string">"utf8"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>
<p><a href="/assets/files/mypass.py">附件：mypass.py</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>【摘】MySQL调优</title>
    <url>/2021/mysql-optimization/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="SQL语句优化"><a href="#SQL语句优化" class="headerlink" title="SQL语句优化"></a>SQL语句优化</h2><p><strong>ORDER BY，GROUP BY和DISTINCT优化</strong></p>
<ul>
<li><p>ORDER BY的实现与优化</p>
<ul>
<li>优化Query语句中的ORDER BY的时候，尽可能利用已有的索引来避免实际的排序计算，可以很大幅度的提升ORDER BY操作的性能。<a id="more"></a>
优化排序：<br>1.加大max_length_for_sort_data参数的设置；<br>2.去掉不必要的返回字段；<br>3.增大sort_buffer_size参数设置；</li>
</ul>
</li>
<li><p>GROUP BY的实现与优化</p>
<ul>
<li>由于GROUP BY实际上也同样需要进行排序操作，而且与ORDER BY相比，GROUP BY主要只是多了排序之后的分组操作。当然，如果在分组的时候还使用了其他的一些聚合函数，那么还需要一些聚合函数的计算。所以，在GROUP BY的实现过程中，与ORDER BY一样也可以利用到索引。</li>
</ul>
</li>
<li><p>DISTINCT的实现与优化</p>
<ul>
<li>DISTINCT实际上和GROUP BY的操作非常相似，只不过是在GROUP BY之后的每组中只取出一条记录而已。所以，DISTINCT的实现和GROUP BY的实现也基本差不多，没有太大的区别。同样可以通过松散索引扫描或者是紧凑索引扫描来实现，当然，在无法仅仅使用索引即能完成DISTINCT的时候，MySQL只能通过临时表来完成。但是，和GROUP BY有一点差别的是，DISTINCT并不需要进行排序。也就是说，在仅仅只是DISTINCT操作的Query如果无法仅仅利用索引完成操作的时候，MySQL会利用临时表来做一次数据的“缓存”，但是不会对临时表中的数据进行filesort操作。</li>
</ul>
</li>
</ul>
<p><strong>Join语句的优化</strong></p>
<p>…</p>
<h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p><strong>Mysql8.0已去掉查询缓存</strong></p>
<p>查询缓存的失效非常频繁，只要有对一个表的更新，这个表上所有的查询缓存都会被清空。因此很可能你费劲地把结果存起来，还没使用呢，就被一个更新全清空了。对于更新压力大的数据库来说，查询缓存的命中率会非常低。<strong>绝大部分场景下启用查询缓存弊大于利</strong>，除非你的业务就是有一张静态表，很长时间才会更新一次。</p>
<p>Mysql缓存主要包括关键字缓存（key cache）和查询缓存（query cache）</p>
<p>查询缓存优化</p>
<ul>
<li>对于一些不常改变的数据且有大量相同sql查询的表，查询缓存会节约很大的性能</li>
<li>如果系统确实存在一些性能问题，可以尝试打开查询缓存，并在数据库设计上做一些优化，比如：<br>1.用多个小表代替一个大表，注意不要过度设计<br>2.批量插入代替循环单条插入<br>3.合理控制缓存空间大小，一般来说其大小设置为几十兆比较合适<br>4.可以通过SQL_CACHE和SQL_NO_CACHE来控制某个查询语句是否需要进行缓存</li>
<li>show status like ‘%qcache_hits%’;</li>
<li><p>配置查询缓存</p>
<ul>
<li>query_cache_type可以是0,1,2，0代表不使用缓存，1代表使用缓存，2代表根据需要使用<br>query_cache_size<br>query_cache_limit<ul>
<li>query_cache_type=1<br>query_cache_size=67108864<br>query_cache_limit=67108864</li>
</ul>
</li>
</ul>
</li>
<li><p>MySql中可以在SQL中指定SQL_CACHE和SQL_NO_CACHE来控制某个查询语句是否需要进行缓存</p>
<ul>
<li>select SQL_NO_CACHE * from …   不走缓存，不查询缓存，也不写入缓存</li>
</ul>
</li>
<li>Query Cache 命中率= Qcache_hits / ( Qcache_hits + Qcache_inserts )；</li>
</ul>
<h2 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h2><p>垂直，水平分库分表 …</p>
<h2 id="使用redis或memcache"><a href="#使用redis或memcache" class="headerlink" title="使用redis或memcache"></a>使用redis或memcache</h2><p>1.获得数据 2.处理数据 3.缓存数据 4.读取缓存数据</p>
<p>Mysql Query Cache没有接口放定制数据（2，3），只能放搜索结果集，只是对1的优化，在具体业务场景里没有可用性；Memcache里可以放任意结构的业务数据；因此程序员可以通过合理地设计，提升cache的使用效率</p>
<h2 id="OLTP（联机事务处理-On-Line-Transaction-Processing）场景"><a href="#OLTP（联机事务处理-On-Line-Transaction-Processing）场景" class="headerlink" title="OLTP（联机事务处理 On-Line Transaction Processing）场景"></a>OLTP（联机事务处理 On-Line Transaction Processing）场景</h2><p>并发量大，整体数据量比较多，但每次访问的数据比较少，且访问的数据比较离散，活跃数据占总体数据的比例不是太大</p>
<h2 id="OLAP（联机分析处理-On-Line-Analytical-Processing）场景"><a href="#OLAP（联机分析处理-On-Line-Analytical-Processing）场景" class="headerlink" title="OLAP（联机分析处理 On-Line Analytical Processing）场景"></a>OLAP（联机分析处理 On-Line Analytical Processing）场景</h2><p>数据量非常大，并发访问不多，但每次访问所需要检索的数据量都比较多，而且数据访问相对较为集中，没有太明显的活跃数据概念</p>
<p>并发大，cpu要好<br>内存要大一些，以缓存更多活跃的数据<br>磁盘iops要好，吞吐能力其次<br>网络交互非常频繁</p>
<p>OLTP负责基本业务的正常运转，而业务数据积累时所产生的价值信息则被OLAP不断呈现，企业高层通过参考这些信息会不断调整经营方针，也会促进基础业务的不断优化</p>
<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p><strong>隔离级别</strong></p>
<ul>
<li>READ_UNCOMMITTED</li>
<li>READ_COMMITED</li>
<li>REPEATABLE_READ</li>
<li>SERLALIZABLE</li>
</ul>
<p><strong>特点</strong></p>
<ul>
<li>原子性</li>
<li>一致性</li>
<li>隔离性</li>
<li>持久性</li>
</ul>
<p><strong>并发问题</strong></p>
<ul>
<li>第一类更新</li>
<li>第二类更新</li>
<li>脏读</li>
<li>不可重复读</li>
<li>幻读</li>
</ul>
<p><strong>1、脏读</strong></p>
<p>所谓脏读，就是指事务A读到了事务B还没有提交的数据，比如银行取钱，事务A开启事务，此时切换到事务B，事务B开启事务–&gt;取走100元，此时切换回事务A，事务A读取的肯定是数据库里面的原始数据，因为事务B取走了100块钱，并没有提交，数据库里面的账务余额肯定还是原始余额，这就是脏读。</p>
<p><strong>2、不可重复读</strong></p>
<p>所谓不可重复读，就是指在一个事务里面读取了两次某个数据，读出来的数据不一致。还是以银行取钱为例，事务A开启事务–&gt;查出银行卡余额为1000元，此时切换到事务B事务B开启事务–&gt;事务B取走100元–&gt;提交，数据库里面余额变为900元，此时切换回事务A，事务A再查一次查出账户余额为900元，这样对事务A而言，在同一个事务内两次读取账户余额数据不一致，这就是不可重复读。</p>
<p><strong>3、幻读</strong></p>
<p>所谓幻读，就是指在一个事务里面的操作中发现了未被操作的数据。比如学生信息，事务A开启事务–&gt;修改所有学生当天签到状况为false，此时切换到事务B，事务B开启事务–&gt;事务B插入了一条学生数据，此时切换回事务A，事务A提交的时候发现了一条自己没有修改过的数据，这就是幻读，就好像发生了幻觉一样。幻读出现的前提是并发的事务中有事务发生了插入、删除操作。</p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>HJ-03</title>
    <url>/2021/py-coding-2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="求质因子"><a href="#求质因子" class="headerlink" title="求质因子"></a>求质因子</h2><blockquote>
<p>题目：输入一个正整数，按照从小到大的顺序输出它的所有质因子（重复的也要列举，如180的质因子为2 2 3 3 5 ）</p>
</blockquote>
<a id="more"></a>
<p>递归拆解：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">以180为例，因子列表会依次变化如下：</span></span><br><span class="line"><span class="string">[180]</span></span><br><span class="line"><span class="string">[2, 90]</span></span><br><span class="line"><span class="string">[2, 2, 45]</span></span><br><span class="line"><span class="string">[2, 2, 3, 15]</span></span><br><span class="line"><span class="string">[2, 2, 3, 3, 5]  # 不可继续拆解了，此时就是质因子列表</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(x, len(a)):</span><br><span class="line">        v = a[k]</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">2</span>, int(v ** <span class="number">0.5</span> + <span class="number">1</span>)):</span><br><span class="line">            <span class="keyword">if</span> v % i == <span class="number">0</span>:</span><br><span class="line">                flag = <span class="literal">True</span></span><br><span class="line">                a.pop(k)</span><br><span class="line">                a.append(i)</span><br><span class="line">                v /= i</span><br><span class="line">                <span class="keyword">if</span> v &gt; <span class="number">1</span>:</span><br><span class="line">                    a.append(v)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> flag:</span><br><span class="line">            f(k + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">m = int(raw_input())</span><br><span class="line">a = [m]</span><br><span class="line">f(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="keyword">print</span> i,</span><br></pre></td></tr></table></figure>
<p>特别解法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">能被2，3，5 ... 整除则print，接着以【商】递归。注意break的位置！</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prime</span><span class="params">(a)</span>:</span></span><br><span class="line">    mark = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, int(a ** <span class="number">0.5</span> + <span class="number">2</span>)):</span><br><span class="line">        <span class="keyword">if</span> a % i == <span class="number">0</span>:</span><br><span class="line">            mark = <span class="number">0</span></span><br><span class="line">            <span class="keyword">print</span> i,</span><br><span class="line">            b = int(a / i)</span><br><span class="line">            prime(b)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> mark == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">print</span> a,</span><br><span class="line"></span><br><span class="line">prime(int(input()))</span><br></pre></td></tr></table></figure>
<p>用循环替代递归：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_result</span><span class="params">(num)</span>:</span></span><br><span class="line">    end = int(math.sqrt(num))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">2</span>, end+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">while</span> num % i == <span class="number">0</span>:</span><br><span class="line">            print(i, end=<span class="string">" "</span>)</span><br><span class="line">            num /= i</span><br><span class="line">            flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> num != <span class="number">1</span>:</span><br><span class="line">        print(num, end=<span class="string">" "</span>)</span><br><span class="line"></span><br><span class="line">a = raw_input()</span><br><span class="line">get_result(int(a))</span><br></pre></td></tr></table></figure>
<h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><blockquote>
<p>题目：购物单问题</p>
<p>如果要买归类为附件的物品，必须先买该附件所属的主件；<br>每个主件可以有 0 个、 1 个或 2 个附件；<br>附件不再有从属于自己的附件；<br>每件物品规定了一个重要度，分为 5 等：用整数 1 <strong>~</strong> 5 表示，第 5 等最重要；<br>每件物品的价格都是10元的整数倍；<br>希望在不超过 N 元（可以等于 N 元）的前提下，使每件物品的价格与重要度的乘积的总和最大。<br>求这个最大值。</p>
</blockquote>
<p>参考解法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">示例输入：</span></span><br><span class="line"><span class="string">1000 5</span></span><br><span class="line"><span class="string">800 2 0</span></span><br><span class="line"><span class="string">400 5 1</span></span><br><span class="line"><span class="string">300 5 1</span></span><br><span class="line"><span class="string">400 3 0</span></span><br><span class="line"><span class="string">500 2 0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">输出：</span></span><br><span class="line"><span class="string">2200</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">说明：</span></span><br><span class="line"><span class="string">1000 5 中1000是总预算，5表示下面列出5件候选商品</span></span><br><span class="line"><span class="string">接下的第一行：800 2 0 表示第一件是主件（0），重要度2，价格800</span></span><br><span class="line"><span class="string">第二行：400 5 1 表示第二件是附件（非0），且是第一件（1）的附件，重要度5，价格400</span></span><br><span class="line"><span class="string">以下类推</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n, m = map(int, raw_input().split())</span><br><span class="line">pri, anex = &#123;&#125;, &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, m + <span class="number">1</span>):</span><br><span class="line">    v, p, q = map(int, raw_input().split())</span><br><span class="line">    <span class="keyword">if</span> q == <span class="number">0</span>:</span><br><span class="line">        pri[i] = [v, p]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> q <span class="keyword">in</span> anex:</span><br><span class="line">            anex[q].append([v, p])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            anex[q] = [[v, p]]</span><br><span class="line">            </span><br><span class="line">dp = [<span class="number">0</span>] * (n + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> pri:  <span class="comment"># 对于每一个主件</span></span><br><span class="line">    w, v = [], []  <span class="comment"># 计算 该主件+附件 各种组合的w,v</span></span><br><span class="line">    w.append(pri[key][<span class="number">0</span>])  <span class="comment"># 仅主件</span></span><br><span class="line">    v.append(pri[key][<span class="number">0</span>] * pri[key][<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> key <span class="keyword">in</span> anex:</span><br><span class="line">        w.append(w[<span class="number">0</span>] + anex[key][<span class="number">0</span>][<span class="number">0</span>])  <span class="comment"># 主件+附件1 的价格</span></span><br><span class="line">        v.append(v[<span class="number">0</span>] + anex[key][<span class="number">0</span>][<span class="number">0</span>] * anex[key][<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">if</span> len(anex[key]) &gt;= <span class="number">2</span>:</span><br><span class="line">            w.append(w[<span class="number">0</span>] + anex[key][<span class="number">1</span>][<span class="number">0</span>])  <span class="comment"># 主件+附件2</span></span><br><span class="line">            v.append(v[<span class="number">0</span>] + anex[key][<span class="number">1</span>][<span class="number">0</span>] * anex[key][<span class="number">1</span>][<span class="number">1</span>])</span><br><span class="line">            w.append(w[<span class="number">0</span>] + anex[key][<span class="number">0</span>][<span class="number">0</span>] + anex[key][<span class="number">1</span>][<span class="number">0</span>])  <span class="comment"># 主件+附件1+附件2</span></span><br><span class="line">            v.append(v[<span class="number">0</span>] + anex[key][<span class="number">0</span>][<span class="number">0</span>] * anex[key][<span class="number">0</span>][<span class="number">1</span>] + anex[key][<span class="number">1</span>][<span class="number">0</span>] * anex[key][<span class="number">1</span>][<span class="number">1</span>])</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(n, <span class="number">-1</span>, <span class="number">-10</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(len(w)):</span><br><span class="line">            <span class="comment"># 如果够买第k组合，当前金额dp 和 剩余金额dp+本组合v 大者更新为当前dp</span></span><br><span class="line">            <span class="keyword">if</span> j - w[k] &gt;= <span class="number">0</span>:</span><br><span class="line">                dp[j] = max(dp[j], dp[j - w[k]] + v[k])</span><br><span class="line">                </span><br><span class="line"><span class="keyword">print</span> dp[n]</span><br></pre></td></tr></table></figure>
<h2 id="走方格"><a href="#走方格" class="headerlink" title="走方格"></a>走方格</h2><blockquote>
<p>题目：计算n*m的棋盘格子（n为横向的格子数，m为竖向的格子数，m&lt;=8）从棋盘左上角出发沿着边缘线从左上角走到右下角，总共有多少种走法，要求不能走回头路，即：只能往右和往下走，不能往左和往上走。</p>
<p>注：沿棋盘格之间的边缘线行走</p>
</blockquote>
<p>递归法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">p_mn</span><span class="params">(m, n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> m == <span class="number">1</span> <span class="keyword">or</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> m + n</span><br><span class="line">    <span class="keyword">return</span> p_mn(m - <span class="number">1</span>, n) + p_mn(m, n - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">m, n = map(int, raw_input().split())</span><br><span class="line"><span class="keyword">if</span> m &gt; <span class="number">8</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"><span class="keyword">print</span> p_mn(m, n)</span><br></pre></td></tr></table></figure>
<p>公式法（阶乘）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> factorial <span class="keyword">as</span> f</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        n, m = map(int, raw_input().split())</span><br><span class="line">        <span class="keyword">print</span> f(n + m) / (f(m) * f(n))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>如果不知道从math导入，可自定义阶乘函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(n)</span>:</span></span><br><span class="line">    ans = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n:</span><br><span class="line">        ans *= n</span><br><span class="line">        n -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
<p>如何证明可以按这个公式？看起来像是排列组合或概率统计的问题。<br>f(n+m)是既不考虑顺序，又不考虑方向的排列数，f(m)和f(n)分别是竖向、横向不考虑顺序的排列数。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>【摘】MySQL问题</title>
    <url>/2021/mysql-questions/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="主从延迟"><a href="#主从延迟" class="headerlink" title="主从延迟"></a>主从延迟</h2><p>主从复制中有两个很重要的日志文件，binlog和relay log，分别位于主库与从库中。其中 binlog 是主从复制的基础，通过将操作事件写入 binlog 通过 I/O 线程传送至从库进行同步。</p>
<p>主从延迟可能的原因：</p>
<ul>
<li>从库中 SQL 线程重放的过程是随机写盘的，并且 SQL 线程是单线程的，因此数据来不及重放的话就会导致主从延迟。</li>
<li><strong>主库并发高</strong>会导致写操作不断写入 binlog，对于 SQL 线程说可能会应接不暇，也会产生主从延迟。</li>
<li>重放过程中如果遇到<strong>锁等待</strong>也是产生延迟的原因之一。</li>
</ul>
<a id="more"></a>
<p>一些处理方法：</p>
<p><strong>1. 并行复制</strong><br>MySQL 5.6 版本后，提供了一种并行复制的方式，通过将 SQL 线程转换为多个 work 线程来进行重放</p>
<p><strong>2. 降低主库写并发，降低从库读并发</strong><br>通过<strong>限流</strong>措施降低读并发、写并发<br>使用redis降低读从库的压力</p>
<p><strong>3. 读主库</strong><br>配置主库可写可读</p>
<hr>
<h2 id="主库查询更新受主从复制的影响"><a href="#主库查询更新受主从复制的影响" class="headerlink" title="主库查询更新受主从复制的影响"></a>主库查询更新受主从复制的影响</h2><p>新建备库级联到主库会将主库上大量的binlog拉到本地保存为relaylog，这个阶段会导致主库网络流量非常大，从而引发主库的查询更新等受到影响。</p>
<p>新建slave连到master时，会将主库上大量的binlog（几百G）拉取到本地保存为relay log，会导致两个问题：</p>
<ul>
<li>主库网络带宽被占满 </li>
<li>主库的磁盘I/O负载很高</li>
</ul>
<p>解决思路：<br><strong>1. 在备库拉主库binlog的IO线程上做限流，每拉一定数据量M的binlog则sleep时间N</strong><br>这个测试效果比较明显，但存在如下几个问题：</p>
<ul>
<li>参数比较难控制 需要DBA根据实际场景调整来获得预期的网络流量，这个过程可能需要多次尝试才可能获取到预期行为</li>
<li>存在抖动 在sleep时刻明显能观察到不均匀的网络流量</li>
</ul>
<p><strong>2. 在socket的选型上做改进</strong></p>
<p><strong>3.考虑到瓶颈在网络带宽和磁盘I/O上，可以改进架构，改为slave级联的架构，但是维护的成本会相应增加，需要权衡场景。</strong></p>
<p><strong>4.考虑使用SSD</strong></p>
<p><em>原文：<a href="https://blog.51cto.com/laoxu/1413257" rel="external nofollow noopener noreferrer" target="_blank">https://blog.51cto.com/laoxu/1413257</a></em></p>
<hr>
<h2 id="MySQL读写分离：如何解决写完读不到问题"><a href="#MySQL读写分离：如何解决写完读不到问题" class="headerlink" title="MySQL读写分离：如何解决写完读不到问题"></a>MySQL读写分离：如何解决写完读不到问题</h2><p>MySQL经典的<strong>一主两从</strong>是大多数创业公司初期使用的主流数据存储方案之一。</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2021/mysql-questions.assets/image-20211010012130423.png" alt="image-20211010012130423" style="zoom:80%;"></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2021/mysql-questions.assets/image-20211010012615624.png" alt="image-20211010012615624" style="zoom:80%;"></p>
<p>上图是默认的<strong>异步同步模式</strong>，我们发现，从主节点提交成功到从节点同步完成，中间间隔了6、7、8、9、10多个步骤，涉及到一次网络传输，多次文件读取和写入的磁盘 IO 操作，以及最后的 SQL 执行的 CPU 操作。</p>
<p>所以，当主从节点间网络传输出现问题，或者从节点性能较低时，主从节点间的同步就会出现延迟，导致写后读不到的问题。在高并发场景，从节点一般要过几十毫秒，甚至几百毫秒才能读到最新的状态。</p>
<p><strong>常见的解决策略</strong></p>
<p>一般来讲，大致有如下方案解决写后读不出问题：</p>
<ul>
<li>强制走主库</li>
<li>判断主备无延迟</li>
<li>等主库位点或 GTID 方案</li>
</ul>
<p><strong>1. 强制走主库</strong><br>这种方案问题在于将一部分读压力给了主节点，部分违背了读写分离的初衷，降低了整个系统的扩展性。</p>
<p><strong>2. 判断主备无延迟</strong><br>第二种方案是使用 show slave status 语句结果中的部分值来判断主从同步的延迟时间：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; show slave status</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">Master_Log_File: mysql-bin.001822</span><br><span class="line">Read_Master_Log_Pos: 290072815</span><br><span class="line">Seconds_Behind_Master: 2923</span><br><span class="line">Relay_Master_Log_File: mysql-bin.001821</span><br><span class="line">Exec_Master_Log_Pos: 256529431</span><br><span class="line">Auto_Position: 0</span><br><span class="line">Retrieved_Gtid_Set: </span><br><span class="line">Executed_Gtid_Set: </span><br><span class="line">.....</span><br></pre></td></tr></table></figure>
<ul>
<li><em>seconds_behind_master</em>，表示落后主节点秒数，如果此值为0，则表示主从无延迟；</li>
<li><em>Master_Log_File 和 Read_Master_Log_Pos</em>，表示的是读到的主库的最新位点，Relay_Master_Log_File 和 Exec_Master_Log_Pos，表示的是备库执行的最新位点。如果这两组值相等，则表示主从无延迟；</li>
<li><em>Auto_Position=1</em> ，表示使用了 GTID 协议，并且备库收到的所有日志的 GTID 集合 Retrieved_Gtid_Set 和 执行完成的 GTID 集合 Executed_Gtid_Set 相等，则表示主从无延迟。</li>
</ul>
<p>在进行读操作前，先根据上述方式来判断主从是否有延迟。如果有延迟，则一直等待到无延迟后执行。但是这类方案在判断是否有延迟时存在着假阳和假阴的问题：</p>
<ul>
<li><em>判断无延迟，其他延迟了</em>。因为上述判断是基于从节点的状态，当主节点的 Dump Thread 尚未将最新状态发送给从节点的 IO SQL 时，从节点可能会错误的判断自己和主节点无延迟。</li>
<li><em>判断有延迟，但是读操作读取的最新状态已经同步</em>。因为 MySQL 主从复制是一直在进行的，写后直接读的同时可能还有其他无关写操作，虽然主从有延迟，但是对于第一次写操作的同步已经完成，所以读操作已经可以读到最新的状态。</li>
</ul>
<p>对于第一个问题，需要使用主从复制的 <strong>semi-sync 模式</strong>，即<strong>半同步模式</strong>，上文中讲解介绍的是默认的异步模式，semi-sync 模式的流程如下图所示：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2021/mysql-questions.assets/image-20211010013950743.png" alt="image-20211010013950743" style="zoom:80%;"></p>
<p>主节点只需要接收到其中一台从节点的ACK，就会commit，所以对于一主多从的模式，该方案无效。</p>
<p>虽然该方案有种种问题，但是对于一致性要求不那么高的场景也能适用，比如 MyCat 就是用 seconds_behind_master 是否落后主节点过多，如果超过一定阈值，就将其从有效从节点列表中删除，不再将读请求路由到它身上。</p>
<p>在 MyCAT 的用于监听从节点状态，发送心跳的 MySQLDetector 类中，它会读取从节点的 seconds_behind_master，如果其值大于配置的 slaveThreshold，则将打印日志，并将延迟时间设置到心跳信息中。</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2021/mysql-questions.assets/image-20211010020752584.png" alt="image-20211010020752584" style="zoom:80%;"></p>
<p>半同步模式(mysql semi-sync)<br>这种模式下主节点只需要接收到其中一台从节点的返回信息，就会commit；否则需要等待直到超时时间然后切换成异步模式再提交；这样做的目的可以使主从数据库的数据延迟缩小，可以提高数据安全性，确保了事务提交后，binlog至少传输到了一个从节点上，不能保证从节点将此事务更新到db中。性能上会有一定的降低，响应时间会变长。如下图所示：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2021/mysql-questions.assets/v2-d9ac9c5493d1d772f5bf57ede089f0d5_hd.jpg" alt="img"></p>
<p>半同步模式不是mysql内置的，从mysql 5.5开始集成，需要master 和slave 安装插件开启半同步模式。</p>
<p><strong>3. 等待GTID</strong><br>首先介绍一下 GTID，也就是<strong>全局事务ID</strong>，是一个事务在提交的时候生成的，是这个事务的唯一标识。它由MySQL 实例的 uuid 和一个整数组成，该整数由该实例维护，初始值是 1，每次该实例提交事务后都会加一。</p>
<p>MySQL 提供了一条基于 GTID 的命令，用于在从节点上执行，等待从库同步到了对应的 GTID（binlog文件中会包含 GTID）或者超时返回。</p>
<p>MySQL 在执行完事务后，会将该事务的 GTID 会给客户端，然后客户端可以使用该命令去要执行读操作的从库中执行，等待该GTID，等待成功后，再执行读操作。如果等待超时，则去主库执行读操作，或者再换一个从库执行上述流程。</p>
<p><em>来源：程序员历小冰</em></p>
<hr>
<h2 id="隐式类型转换导致的慢SQL"><a href="#隐式类型转换导致的慢SQL" class="headerlink" title="隐式类型转换导致的慢SQL"></a>隐式类型转换导致的慢SQL</h2><p>业务方反馈了一个问题，说是某一服务每次在查询的时候会有0.5s的延迟：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`account`</span> </span><br><span class="line"><span class="keyword">WHERE</span>  </span><br><span class="line"><span class="string">`accountid`</span> = <span class="number">20000000528</span> </span><br><span class="line"><span class="keyword">and</span> </span><br><span class="line"><span class="string">`accounttype`</span> = <span class="number">1</span> </span><br><span class="line"><span class="keyword">and</span> </span><br><span class="line"><span class="string">`appid`</span>=<span class="number">10005</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysql--dba_admin 12:59:09&gt;&gt;show create table account\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">       Table: account</span><br><span class="line">Create Table: CREATE TABLE `account` (</span><br><span class="line">  `appid` int(4) unsigned NOT NULL,</span><br><span class="line">  `uid` bigint(8) unsigned NOT NULL,</span><br><span class="line">  `accountid` char(32) NOT NULL DEFAULT <span class="string">''</span>,</span><br><span class="line">  `accounttype` int(4) unsigned NOT NULL,</span><br><span class="line">  `mtime` bigint(8) unsigned NOT NULL DEFAULT <span class="string">'0'</span>,</span><br><span class="line">  `id` bigint(20) NOT NULL,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  KEY `appid` (`appid`,`accountid`,`accounttype`,`uid`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>修改1：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> uid <span class="keyword">FROM</span> <span class="string">`account`</span> </span><br><span class="line"><span class="keyword">WHERE</span>  </span><br><span class="line"><span class="string">`accountid`</span> = <span class="number">20000000528</span> </span><br><span class="line"><span class="keyword">and</span> </span><br><span class="line"><span class="string">`accounttype`</span> = <span class="number">1</span> </span><br><span class="line"><span class="keyword">and</span> </span><br><span class="line"><span class="string">`appid`</span>=<span class="number">10005</span>;</span><br></pre></td></tr></table></figure>
<p>业务方反馈说是并没有明显的降低查询时间。时间还是在0.3s左右，还是不能满足需求。开始怀疑这个表的索引创建的是否有问题：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysql &gt;&gt;select distinct accounttype from account <span class="built_in">limit</span> 10;</span><br><span class="line">+-------------+</span><br><span class="line">| accounttype |</span><br><span class="line">+-------------+</span><br><span class="line">|           1 |</span><br><span class="line">+-------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql &gt;&gt;select distinct appid  from account <span class="built_in">limit</span> 10;</span><br><span class="line">+-------------+</span><br><span class="line">|   appid     |</span><br><span class="line">+-------------+</span><br><span class="line">|       10005 |</span><br><span class="line">+-------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.02 sec)</span><br></pre></td></tr></table></figure>
<p>发现appid的值目前只包含一个10005，而accounttype的值也只包含数字1，而accountid和uid的值包含5w左右。</p>
<p>修改索引字段</p>
<p>联合索引：key appid(appid,accountid,accounttype,uid)  不合理，因为appid和accounttype的值基数太小，只有1，所以这个索引应该修改，具体的改法有很多，我是通过修改联合索引的先后顺序，将基数大的字段放在前面，这样扫描的时候能够过滤的更加准确一些。将索引改为：</p>
<p>key ‘idx_accid’ (accountid,uid,appid,accounttype)</p>
<p>查看执行计划：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysql--dba_admin 13:05:51&gt;&gt;explain SELECT uid FROM `account` WHERE  `accountid` = 20000000528;</span><br><span class="line">+----+-------------+---------+-------+---------------+-----------+---------+------+-------+--------------------------+</span><br><span class="line">| id | select_type | table   | <span class="built_in">type</span>  | possible_keys | key       | key_len | ref  | rows  | Extra                    |</span><br><span class="line">+----+-------------+---------+-------+---------------+-----------+---------+------+-------+--------------------------+</span><br><span class="line">|  1 | SIMPLE      | account | index | idx_accid     | idx_accid | 112     | NULL | 57237 | Using <span class="built_in">where</span>; Using index |</span><br><span class="line">+----+-------------+---------+-------+---------------+-----------+---------+------+-------+--------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>发现没走索引。</p>
<p>最终定位到原因是：accountid在表中应该是一个char类型的，但是在SQL语句中写成了整数类型，发生了隐式类型转换，导致索引不可用。</p>
<p>应修改为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> uid <span class="keyword">FROM</span> <span class="string">`account`</span> </span><br><span class="line"><span class="keyword">WHERE</span>  </span><br><span class="line"><span class="string">`accountid`</span> = <span class="string">'20000000528'</span></span><br><span class="line"><span class="keyword">and</span> </span><br><span class="line"><span class="string">`accounttype`</span> = <span class="number">1</span> </span><br><span class="line"><span class="keyword">and</span> </span><br><span class="line"><span class="string">`appid`</span>=<span class="number">10005</span>;</span><br></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>索引的创建，应该选择基数多的列作为索引列，这样比较有区分度，可以减少扫描行数；</li>
<li>查询SQL，不要返回无用的字段，有可能错失最佳查询路径，例如select * 不能用到覆盖索引；</li>
<li>查询SQL中的数据类型一定要匹配，否则一旦产生了隐式转换，就有可能用不到索引。</li>
</ul>
<p><em>来源：DAB随笔，一个慢SQL，一波三折…</em></p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>分苹果</title>
    <url>/2021/py-coding-3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>题目：m个人分n个苹果，按分得个数排序前后相邻2个人最多相差3个，每个人最少分得1个，问有几种分法?</p>
</blockquote>
<a id="more"></a>
<p>普通版的分苹果问题：</p>
<blockquote>
<p>M个同样的苹果分在N个同样的篮子里，允许有篮子空着不放，求一共有多少种不同的分法。<br>说明，3，1，1和1，3，1是一种分法；篮子可以放入的苹果数量没有最大限制。</p>
</blockquote>
<p>递归解法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def share(apple, basket):</span><br><span class="line">    if apple &lt; 0 or basket &lt;= 0:</span><br><span class="line">        return 0</span><br><span class="line">    elif apple == 0 or basket == 1:</span><br><span class="line">        return 1</span><br><span class="line">    elif apple &lt; basket:</span><br><span class="line">        return share(apple, apple)</span><br><span class="line">    else:</span><br><span class="line">        return share(apple, basket - 1) + share(apple - basket, basket)</span><br><span class="line"> </span><br><span class="line">echo = list(map(int, raw_input().split()))</span><br><span class="line">apple = echo[0]</span><br><span class="line">basket = echo[1]</span><br><span class="line">print(share(apple, basket))</span><br></pre></td></tr></table></figure>
<p>和本题有一定的相似，但没找到递归或动态规划的思路。</p>
<p>以下是一种不太好的解法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf8</span></span><br><span class="line"></span><br><span class="line"><span class="string">""" 分苹果</span></span><br><span class="line"><span class="string">m个人 分n个苹果 按分得数排序 前后相邻2个人最多相差3个 每个人最少分得1个 有几种分法?</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">注意：</span></span><br><span class="line"><span class="string">A，B两人分4个苹果，分别 1，3 和 分别 3，1 视为同一种分法，不考虑人的对应顺序</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">n &gt;= m</span></span><br><span class="line"><span class="string">m &gt; 0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">示例：</span></span><br><span class="line"><span class="string">2个人分4个苹果，输入：</span></span><br><span class="line"><span class="string">2 4</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">有[3,1]，[2,2]共2种方案，输出：</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        m, n = map(int, raw_input().split())</span><br><span class="line">        <span class="keyword">if</span> n &lt; m <span class="keyword">or</span> m &lt; <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> m == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"--------------------------&gt;"</span>, [n]</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 最后一个人最多km个，最少一个(n&gt;=m)</span></span><br><span class="line">        km = n // m</span><br><span class="line">        Q = <span class="number">4</span>  <span class="comment"># 比后一位多 0 1 2 3 四种取值，所以模为4</span></span><br><span class="line"></span><br><span class="line">        nS = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> pm <span class="keyword">in</span> range(<span class="number">1</span>, km + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"pm:"</span>, pm  <span class="comment"># 记最后一个人分得pm个</span></span><br><span class="line">            <span class="comment"># 均分特例</span></span><br><span class="line">            <span class="keyword">if</span> m * pm == n:</span><br><span class="line">                nS += <span class="number">1</span></span><br><span class="line">                <span class="keyword">print</span> <span class="string">"-------------*------------&gt;"</span>, [pm] * m</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 非均分的情况</span></span><br><span class="line">            p = [<span class="number">0</span>] * (m - <span class="number">1</span>)  <span class="comment"># p[x] 表示第x个人 比第x+1个人 多p[x]个</span></span><br><span class="line">            QL = [Q] * (m - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 更新各位的模，以减少循环次数</span></span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> range(m - <span class="number">1</span>):</span><br><span class="line">                <span class="comment"># p[y]*(y+1) + pm*m &lt;= n</span></span><br><span class="line">                QL[y] = min((n - m * pm) // (y + <span class="number">1</span>) + <span class="number">1</span>, Q)</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"QL:"</span>, QL</span><br><span class="line"></span><br><span class="line">            is_break = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                p[m - <span class="number">2</span>] += <span class="number">1</span>  <span class="comment"># 循环+1，逐位检查是否进1退0，生成一个长度为m-1的序列p</span></span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(m - <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">                    <span class="keyword">if</span> p[j] &lt; QL[j]:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">if</span> j &gt; <span class="number">0</span>:</span><br><span class="line">                            p[j - <span class="number">1</span>] += <span class="number">1</span></span><br><span class="line">                            p[j] = <span class="number">0</span></span><br><span class="line">                        <span class="keyword">elif</span> j == <span class="number">0</span>:</span><br><span class="line">                            is_break = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> is_break:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">                sum_p = pm * m</span><br><span class="line">                <span class="keyword">for</span> x <span class="keyword">in</span> range(m - <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">                    sum_p += p[x] * (x + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> sum_p != n:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># print "--------------------------&gt;", p, pm, sum_p</span></span><br><span class="line">                    nS += <span class="number">1</span></span><br><span class="line">                    t = p[<span class="number">-1</span>] + pm</span><br><span class="line">                    res = [t]</span><br><span class="line">                    <span class="keyword">for</span> k <span class="keyword">in</span> range(len(p) - <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">                        t += p[k]</span><br><span class="line">                        res.insert(<span class="number">0</span>, t)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">print</span> <span class="string">"--------------------------&gt;"</span>, res + [pm]</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Total:"</span>, nS</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>示例输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2 4</span><br><span class="line">pm: 1</span><br><span class="line">QL: [3]</span><br><span class="line">--------------------------&gt; [3, 1]</span><br><span class="line">pm: 2</span><br><span class="line">-------------*------------&gt; [2, 2]</span><br><span class="line">Total: 2</span><br><span class="line"></span><br><span class="line">5 7</span><br><span class="line">pm: 1</span><br><span class="line">QL: [3, 2, 1, 1]</span><br><span class="line">--------------------------&gt; [2, 2, 1, 1, 1]</span><br><span class="line">--------------------------&gt; [3, 1, 1, 1, 1]</span><br><span class="line">Total: 2</span><br><span class="line"></span><br><span class="line">5 12</span><br><span class="line">pm: 1</span><br><span class="line">QL: [4, 4, 3, 2]</span><br><span class="line">--------------------------&gt; [3, 3, 3, 2, 1]</span><br><span class="line">--------------------------&gt; [4, 4, 2, 1, 1]</span><br><span class="line">--------------------------&gt; [4, 3, 3, 1, 1]</span><br><span class="line">--------------------------&gt; [4, 3, 2, 2, 1]</span><br><span class="line">--------------------------&gt; [5, 4, 1, 1, 1]</span><br><span class="line">--------------------------&gt; [5, 3, 2, 1, 1]</span><br><span class="line">--------------------------&gt; [5, 2, 2, 2, 1]</span><br><span class="line">--------------------------&gt; [6, 3, 1, 1, 1]</span><br><span class="line">pm: 2</span><br><span class="line">QL: [3, 2, 1, 1]</span><br><span class="line">--------------------------&gt; [3, 3, 2, 2, 2]</span><br><span class="line">--------------------------&gt; [4, 2, 2, 2, 2]</span><br><span class="line">Total: 10</span><br><span class="line"></span><br><span class="line">13 27</span><br><span class="line">pm: 1</span><br><span class="line">QL: [4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2]</span><br><span class="line">--------------------------&gt; [3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1]</span><br><span class="line">...（此处省略几十行）</span><br><span class="line">--------------------------&gt; [8, 5, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]</span><br><span class="line">--------------------------&gt; [7, 4, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1]</span><br><span class="line">--------------------------&gt; [8, 5, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1]</span><br><span class="line">--------------------------&gt; [8, 5, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1]</span><br><span class="line">pm: 2</span><br><span class="line">QL: [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]</span><br><span class="line">--------------------------&gt; [3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]</span><br><span class="line">Total: 81</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python题记-04</title>
    <url>/2021/py-coding-4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>数字链表，随机密码</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>题1：用链表存0-9的数字，然后从头到尾输出其代表的10进制数值（前面的0忽略）</p>
<p>题2：随机生成8字符的密码<br>包含1个特殊字符：!#$%&amp;()+,-./:;&lt;=&gt;?@[]^_{}~<br>包含1到2个数字<br>包含大写字母<br>包含小写字母</p>
<p>示例：<br>4mOhNkV?<br>$pDz0Q9F<br>fXi?AGC9</p>
</blockquote>
<h2 id="数字链表"><a href="#数字链表" class="headerlink" title="数字链表"></a>数字链表</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf8</span></span><br><span class="line"></span><br><span class="line"><span class="string">""" 数字链表</span></span><br><span class="line"><span class="string">用链表存0-9的数字，然后从头到尾输出其代表的10进制数值（前面的0忽略）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">示例：</span></span><br><span class="line"><span class="string">0 0 1 2 3</span></span><br><span class="line"><span class="string">输出</span></span><br><span class="line"><span class="string">123</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1 0 3 4 5</span></span><br><span class="line"><span class="string">输出</span></span><br><span class="line"><span class="string">10345</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, v=None)</span>:</span></span><br><span class="line">        self.value = v</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> str(self.value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Nodes</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, node=None)</span>:</span></span><br><span class="line">        self.head = node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_tail</span><span class="params">(self)</span>:</span></span><br><span class="line">        cur_node = self.head</span><br><span class="line">        <span class="keyword">while</span> cur_node.next:</span><br><span class="line">            cur_node = cur_node.next</span><br><span class="line">        <span class="keyword">return</span> cur_node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_node</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.head <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.head = node</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cur_node = self.get_tail()</span><br><span class="line">            cur_node.next = node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_num</span><span class="params">(self)</span>:</span></span><br><span class="line">        s = <span class="literal">None</span></span><br><span class="line">        cur_node = self.head</span><br><span class="line">        <span class="keyword">while</span> cur_node:</span><br><span class="line">            <span class="keyword">if</span> s <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">if</span> cur_node.value:</span><br><span class="line">                    s = str(cur_node.value)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                s += str(cur_node.value)</span><br><span class="line">            cur_node = cur_node.next</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">print</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    nums = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">    nodes = Nodes()</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> nums:</span><br><span class="line">        nodes.add_node(Node(n))</span><br><span class="line"></span><br><span class="line">    nodes.print_num()</span><br></pre></td></tr></table></figure>
<p>或者Nodes稍作修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Nodes(object):</span><br><span class="line">    def __init__(self, node=None):</span><br><span class="line">        self.head = node</span><br><span class="line">        self.tail = node</span><br><span class="line"></span><br><span class="line">    def add_node(self, node):</span><br><span class="line">        if self.head is None:</span><br><span class="line">            self.head = node</span><br><span class="line">            self.tail = node</span><br><span class="line">        else:</span><br><span class="line">            self.tail.next = node</span><br><span class="line">            self.tail = node            </span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h2 id="随机密码"><a href="#随机密码" class="headerlink" title="随机密码"></a>随机密码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf8</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint, choice, shuffle</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> letters, digits, uppercase, lowercase</span><br><span class="line"></span><br><span class="line"><span class="string">""" 生成10个随机8位数密码</span></span><br><span class="line"><span class="string">包含1个特殊字符：!#$%&amp;()+,-./:;&lt;=&gt;?@[]^_&#123;&#125;~</span></span><br><span class="line"><span class="string">包含1到2个数字</span></span><br><span class="line"><span class="string">包含大写字母</span></span><br><span class="line"><span class="string">包含小写字母</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">示例：</span></span><br><span class="line"><span class="string">4mOhNkV?</span></span><br><span class="line"><span class="string">$pDz0Q9F</span></span><br><span class="line"><span class="string">fXi?AGC9</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_psw</span><span class="params">()</span>:</span></span><br><span class="line">    r_lst = []</span><br><span class="line">    my_punctuation = <span class="string">"""!#$%&amp;()+,-./:;&lt;=&gt;?@[]^_&#123;&#125;~"""</span></span><br><span class="line">    r_lst.append(choice(my_punctuation))</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(randint(<span class="number">1</span>, <span class="number">2</span>)):</span><br><span class="line">        r_lst.append(choice(digits))</span><br><span class="line">    r_lst.append(choice(uppercase))</span><br><span class="line">    r_lst.append(choice(lowercase))</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">8</span> - len(r_lst)):</span><br><span class="line">        r_lst.append(choice(letters))</span><br><span class="line"></span><br><span class="line">    shuffle(r_lst)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>.join(r_lst)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        <span class="keyword">print</span> create_psw()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>HJ-01</title>
    <url>/2021/py-coding/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="分割、逆序"><a href="#分割、逆序" class="headerlink" title="分割、逆序"></a>分割、逆序</h3><p>字符逆序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">""" 字符串反转 数字颠倒 字符逆序 """</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> raw_input()[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>单词逆序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">""" 单词逆序</span></span><br><span class="line"><span class="string">i am a student</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">student a am i</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># S1:</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">line = raw_input()</span><br><span class="line">a = re.findall(<span class="string">"[A-Za-z]+"</span>, line)</span><br><span class="line"><span class="keyword">print</span> <span class="string">' '</span>.join(a[::<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># S2:</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">" "</span>.join(reversed(raw_input().split()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># S3:</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">" "</span>.join(raw_input().split()[::<span class="number">-1</span>])</span><br></pre></td></tr></table></figure>
<p>字符串最后一个单词的长度</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">""" 字符串最后一个单词的长度</span></span><br><span class="line"><span class="string">hello abc</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">s = raw_input()</span><br><span class="line">lst = s.split(<span class="string">' '</span>)</span><br><span class="line">print(len(lst[<span class="number">-1</span>]))</span><br></pre></td></tr></table></figure>
<p>字符串分割</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">""" 字符串分割 每8个字符分割 不足则右补零</span></span><br><span class="line"><span class="string">abc</span></span><br><span class="line"><span class="string">123456789</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">abc00000</span></span><br><span class="line"><span class="string">12345678</span></span><br><span class="line"><span class="string">90000000</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s = raw_input()</span><br><span class="line">        <span class="keyword">while</span> len(s) &gt; <span class="number">8</span>:</span><br><span class="line">            <span class="keyword">print</span> s[:<span class="number">8</span>]</span><br><span class="line">            s = s[<span class="number">8</span>:]</span><br><span class="line">        <span class="keyword">print</span> s.ljust(<span class="number">8</span>, <span class="string">"0"</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<h3 id="字符数"><a href="#字符数" class="headerlink" title="字符数"></a>字符数</h3><p>统计不重复的字符总数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">""" 统计不重复的字符总数</span></span><br><span class="line"><span class="string">abc</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">s = raw_input()</span><br><span class="line">sn = set()</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">    sn.add(c)</span><br><span class="line"></span><br><span class="line">print(len(sn))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 其实一行就够了</span></span><br><span class="line">print(len(set(s)))</span><br></pre></td></tr></table></figure>
<p>统计各字符的数量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">""" 统计各字符的数量</span></span><br><span class="line"><span class="string">hello</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#123;'h': 1, 'e': 1, 'l': 2, 'o': 1&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">s = raw_input()</span><br><span class="line">d = dict(zip(s, [<span class="number">0</span>] * len(s)))</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">    d[c] += <span class="number">1</span></span><br><span class="line"><span class="keyword">print</span> d</span><br></pre></td></tr></table></figure>
<h3 id="回文"><a href="#回文" class="headerlink" title="回文"></a>回文</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">""" 最长的对称部分 最长回文长度问题</span></span><br><span class="line"><span class="string">ADEFFFFFFFFF</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">9</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>
<p><strong>正向查找法：</strong>先假定边界 再比较长度</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = raw_input()</span><br><span class="line">nmax = <span class="number">1</span></span><br><span class="line">j = len(s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> j &lt;= nmax:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    j -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> xrange(<span class="number">0</span>, j):</span><br><span class="line">        ss = s[k:j + <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> ss == ss[::<span class="number">-1</span>]:</span><br><span class="line">            <span class="keyword">if</span> j - k + <span class="number">1</span> &gt; nmax:</span><br><span class="line">                nmax = j - k + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> nmax</span><br></pre></td></tr></table></figure>
<p><strong>逆向查找法：</strong>先假定最大长度，再查找是否存在这样的子字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> length <span class="keyword">in</span> range(len(s), <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> range(<span class="number">0</span>, len(s) - length + <span class="number">1</span>):</span><br><span class="line">            sub_string = s[index:length + index]</span><br><span class="line">            <span class="keyword">if</span> sub_string == sub_string[::<span class="number">-1</span>]:</span><br><span class="line">                <span class="keyword">return</span> len(sub_string)</span><br><span class="line"></span><br><span class="line">a = input()</span><br><span class="line"><span class="keyword">if</span> a:</span><br><span class="line">    print(f(a))</span><br></pre></td></tr></table></figure>
<p><strong>单层循环法</strong>：最快</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = raw_input()</span><br><span class="line">m = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line">    <span class="keyword">if</span> i - m &gt;= <span class="number">1</span> <span class="keyword">and</span> s[i - m - <span class="number">1</span>:i + <span class="number">1</span>] == s[i - m - <span class="number">1</span>:i + <span class="number">1</span>][::<span class="number">-1</span>]:</span><br><span class="line">        m += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> i - m &gt;= <span class="number">0</span> <span class="keyword">and</span> s[i - m:i + <span class="number">1</span>] == s[i - m:i + <span class="number">1</span>][::<span class="number">-1</span>]:</span><br><span class="line">        m += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">print</span> m</span><br></pre></td></tr></table></figure>
<h2 id="字典、列表"><a href="#字典、列表" class="headerlink" title="字典、列表"></a>字典、列表</h2><p>合并表记录</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">""" 合并表记录</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">0 1</span></span><br><span class="line"><span class="string">0 2</span></span><br><span class="line"><span class="string">1 2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0 3</span></span><br><span class="line"><span class="string">1 2</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">d = &#123;&#125;</span><br><span class="line">n = int(raw_input())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    <span class="comment"># k, v = [int(e) for e in raw_input().split()]</span></span><br><span class="line">    k, v = map(int, raw_input().split())</span><br><span class="line">    <span class="keyword">if</span> k <span class="keyword">in</span> d:</span><br><span class="line">        d[k] += v</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        d[k] = v</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> d.items():</span><br><span class="line">    <span class="keyword">print</span> k, v</span><br></pre></td></tr></table></figure>
<p>查找兄弟单词</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">""" 查找兄弟单词</span></span><br><span class="line"><span class="string">6 cab ad abcd cba abc bca abc 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">bca</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">说明：</span></span><br><span class="line"><span class="string">abc的兄弟单词有cab cba bca，所以输出3</span></span><br><span class="line"><span class="string">经字典序排列后，变为bca cab cba，所以第1个字典序兄弟单词为bca</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">s = raw_input().strip().split()</span><br><span class="line">n = int(s.pop(<span class="number">0</span>))</span><br><span class="line">a, x, k = s[:n], s[n], int(s[<span class="number">-1</span>])</span><br><span class="line">y = sorted(x)</span><br><span class="line">temp = sorted([i <span class="keyword">for</span> i <span class="keyword">in</span> a <span class="keyword">if</span> i != x <span class="keyword">and</span> sorted(i) == y])</span><br><span class="line"><span class="keyword">print</span> len(temp)</span><br><span class="line"><span class="keyword">if</span> k &lt;= len(temp):</span><br><span class="line">    <span class="keyword">print</span> temp[k - <span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><h3 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">""" 十进制数 二进制形式1的个数</span></span><br><span class="line"><span class="string">7</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> bin(input()).count(<span class="string">"1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意类型：</span></span><br><span class="line"><span class="keyword">print</span> type(input())         <span class="comment"># int</span></span><br><span class="line"><span class="keyword">print</span> type(raw_input())     <span class="comment"># str</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">""" 二进制数问题 最长的连续1的个数 """</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># S0:</span></span><br><span class="line">s = bin(int(raw_input()))[<span class="number">2</span>:]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(s), <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'1'</span> * i <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">print</span> i</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="comment"># S2: 正则法 稍慢一点点</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> len(max(re.findall(<span class="string">r'1&#123;1,&#125;'</span>, bin(int(raw_input()))[<span class="number">2</span>:]), key=len))</span><br></pre></td></tr></table></figure>
<h3 id="最小公倍数"><a href="#最小公倍数" class="headerlink" title="最小公倍数"></a>最小公倍数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a, b = map(int, raw_input().split())</span><br><span class="line"><span class="keyword">if</span> a == b:</span><br><span class="line">    <span class="keyword">print</span> a</span><br><span class="line">    exit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a &gt; b:</span><br><span class="line">    a, b = b, a</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>, a + <span class="number">1</span>):</span><br><span class="line">    c = b * i</span><br><span class="line">    <span class="keyword">if</span> c % a == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">print</span> c</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p><strong>循环求余法：</strong>可同时求出 最小公倍数 和 最大公约数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m, n = map(int, raw_input().split())</span><br><span class="line">p = m * n</span><br><span class="line">t = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> n != <span class="number">0</span>:</span><br><span class="line">    t = m</span><br><span class="line">    m = n</span><br><span class="line">    n = t % n</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> p / m  <span class="comment"># m 即最大公约数, p/m 即最小公倍数</span></span><br></pre></td></tr></table></figure>
<h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><p>求斐波那契数列第n项</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> timeit <span class="keyword">import</span> default_timer <span class="keyword">as</span> timer</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    有边界，限制n个，就需要根据 n 来判断是否 yield</span></span><br><span class="line"><span class="string">    :param n:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> n &gt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> n &gt; <span class="number">2</span>:</span><br><span class="line">        a, b, i = <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> i != n:</span><br><span class="line">            a, b = b, a + b</span><br><span class="line">            <span class="keyword">yield</span> b</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者：</span></span><br><span class="line"><span class="comment"># def g(n):</span></span><br><span class="line"><span class="comment">#     a, b, counter = 1, 1, 0</span></span><br><span class="line"><span class="comment">#     while True:</span></span><br><span class="line"><span class="comment">#         if (counter &gt; n):</span></span><br><span class="line"><span class="comment">#             return</span></span><br><span class="line"><span class="comment">#         yield a</span></span><br><span class="line"><span class="comment">#         a, b = b, a + b</span></span><br><span class="line"><span class="comment">#         counter += 1</span></span><br><span class="line">            </span><br><span class="line"><span class="comment"># def g():</span></span><br><span class="line"><span class="comment">#     """</span></span><br><span class="line"><span class="comment">#     无边界限制</span></span><br><span class="line"><span class="comment">#     :return:</span></span><br><span class="line"><span class="comment">#     """</span></span><br><span class="line"><span class="comment">#     yield 1</span></span><br><span class="line"><span class="comment">#     yield 1</span></span><br><span class="line"><span class="comment">#     a, b = 1, 1</span></span><br><span class="line"><span class="comment">#     while True:</span></span><br><span class="line"><span class="comment">#         a, b = b, a + b</span></span><br><span class="line"><span class="comment">#         yield b</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        n = int(raw_input())</span><br><span class="line">        tic = timer()</span><br><span class="line">        <span class="keyword">for</span> i, e <span class="keyword">in</span> enumerate(g(n), start=<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> i == n:</span><br><span class="line">                <span class="keyword">print</span> e</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        toc = timer()</span><br><span class="line">        <span class="keyword">print</span> toc - tic</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>累计法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        i = int(raw_input())</span><br><span class="line">        tic = timer()</span><br><span class="line">        a, b = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">        n = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i &gt; <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>, i + <span class="number">1</span>):</span><br><span class="line">                n = a + b</span><br><span class="line">                a = b</span><br><span class="line">                b = n</span><br><span class="line">        <span class="keyword">print</span> n</span><br><span class="line">        toc = timer()</span><br><span class="line">        <span class="keyword">print</span> toc - tic</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>【摘】Redis笔记01</title>
    <url>/2021/redis-questions/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Redis为什么快"><a href="#Redis为什么快" class="headerlink" title="Redis为什么快"></a>Redis为什么快</h2><p>原因主要是以下三点：</p>
<ul>
<li>纯内存操作</li>
<li>单线程操作，避免了频繁的上下文切换</li>
<li>采用了非阻塞 I/O 多路复用机制</li>
</ul>
<a id="more"></a>
<blockquote>
<p>在项目中使用 Redis，主要考虑两个角度：性能和并发。如果只是为了分布式锁这些其他功能，还有其他中间件 Zookeeper 等代替，并非一定要使用 Redis。</p>
</blockquote>
<h2 id="Redis的数据类型"><a href="#Redis的数据类型" class="headerlink" title="Redis的数据类型"></a>Redis的数据类型</h2><p><strong>String</strong></p>
<p><strong>Hash</strong></p>
<p><strong>List</strong></p>
<p>使用 List 的数据结构，可以做简单的消息队列的功能。另外，可以利用 lrange 命令，做基于 Redis 的分页功能，性能极佳，用户体验好。</p>
<p><strong>Set</strong></p>
<p><strong>Sorted Set</strong></p>
<p><strong>Bitmap</strong></p>
<h2 id="Redis常见问题"><a href="#Redis常见问题" class="headerlink" title="Redis常见问题"></a>Redis常见问题</h2><ul>
<li>缓存和数据库双写一致性问题</li>
<li>缓存雪崩问题</li>
<li>缓存击穿问题</li>
<li>缓存的并发竞争问题</li>
</ul>
<h2 id="Redis-的过期策略和内存淘汰机制"><a href="#Redis-的过期策略和内存淘汰机制" class="headerlink" title="Redis 的过期策略和内存淘汰机制"></a>Redis 的过期策略和内存淘汰机制</h2><p>Redis 采用的是定期删除+惰性删除的过期策略。</p>
<p>定期删除，Redis 默认每100ms 检查一次，有过期 Key 则删除。但不是每100ms 将所有的 Key 检查一次，而是随机抽取进行检查。如果只采用定期删除策略，会导致很多 Key 到时间没有删除。于是，惰性删除派上用场。</p>
<p>如果定期删除没删除掉 Key。并且你也没及时去请求 Key，也就是说惰性删除也没生效。这样，Redis 的内存会越来越高。那么就应该采用<strong>内存淘汰机制</strong>。</p>
<ul>
<li>noeviction：当内存不足以容纳新写入数据时，新写入操作会报错。</li>
<li>allkeys-lru：<strong><em>当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的 Key</em></strong>。（推荐使用，目前项目在用这种）(最近最久使用算法)</li>
<li>allkeys-random：当内存不足以容纳新写入数据时，在键空间中，随机移除某个 Key。（应该也没人用吧，你不删最少使用 Key，去随机删）</li>
<li>volatile-lru：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，移除最近最少使用的 Key。这种情况一般是把 Redis 既当缓存，又做持久化存储的时候才用。（不推荐）</li>
<li>volatile-random：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，随机移除某个 Key。（依然不推荐）</li>
<li>volatile-ttl：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，有更早过期时间的 Key 优先移除。（不推荐）</li>
</ul>
<p>默认配置的是： maxmemory-policy  volatile-lru<br>推荐： maxmemory-policy  allkeys-lru</p>
<h2 id="Redis-和数据库双写一致性问题"><a href="#Redis-和数据库双写一致性问题" class="headerlink" title="Redis 和数据库双写一致性问题"></a>Redis 和数据库双写一致性问题</h2><p>一致性问题还可以再分为最终一致性和强一致性。数据库和缓存双写，就必然会存在不一致的问题。如果对数据有强一致性要求，不能放缓存。我们所做的一切，只能保证最终一致性。</p>
<p>首先，采取正确更新策略，先更新数据库，再删缓存。<br>其次，因为可能存在删除缓存失败的问题，提供一个补偿措施即可，例如利用消息队列。</p>
<h2 id="缓存穿透和缓存雪崩问题"><a href="#缓存穿透和缓存雪崩问题" class="headerlink" title="缓存穿透和缓存雪崩问题"></a>缓存穿透和缓存雪崩问题</h2><p>缓存穿透解决方案：</p>
<ul>
<li>利用互斥锁，缓存失效的时候，先去获得锁，得到锁了，再去请求数据库。没得到锁，则休眠一段时间重试。</li>
<li>采用异步更新策略，无论 Key 是否取到值，都直接返回。Value 值中维护一个缓存失效时间，缓存如果过期，异步起一个线程去读数据库，更新缓存。需要做缓存预热(项目启动前，先加载缓存)操作。</li>
<li>提供一个能迅速判断请求是否有效的拦截机制，比如，利用布隆过滤器，内部维护一系列合法有效的 Key。迅速判断出，请求所携带的 Key 是否合法有效。如果不合法，则直接返回。</li>
</ul>
<p>缓存雪崩，即缓存同一时间大面积的失效，这个时候又来了一波请求，结果请求都怼到数据库上，从而导致数据库连接异常。</p>
<p>缓存雪崩解决方案：</p>
<ul>
<li>给缓存的失效时间，加上一个随机值，避免集体失效。</li>
<li>使用互斥锁，但是该方案吞吐量明显下降了。</li>
<li>双缓存。我们有两个缓存，缓存 A 和缓存 B。缓存 A 的失效时间为 20 分钟，缓存 B 不设失效时间。自己做缓存预热操作。</li>
<li>然后细分以下几个小点：从缓存 A 读数据库，有则直接返回；A 没有数据，直接从 B 读数据，直接返回，并且异步启动一个更新线程，更新线程同时更新缓存 A 和缓存 B。</li>
</ul>
<p><em>来源：<a href="http://www.cnblogs.com/yaodengyan/p/9717080.html" rel="external nofollow noopener noreferrer" target="_blank">www.cnblogs.com/yaodengyan/p/9717080.html</a></em></p>
<hr>
<h2 id="并发竞争Key问题"><a href="#并发竞争Key问题" class="headerlink" title="并发竞争Key问题"></a>并发竞争Key问题</h2><p>并发竞争key，即同时有多个客户端去set一个key。解决方法：</p>
<p><strong>乐观锁</strong><br>对修改顺序没有要求的场景，并且redis没有使用分片时，可以通过<strong>watch</strong>命令实现。watch命令会监视给定的每一个key，当exec时如果监视的任一个key自从调用watch后发生过变化，则整个事务会回滚，不执行任何动作。</p>
<p><strong>分布式锁</strong><br>对修改顺序没有要求的场景，准备一个分布式锁，抢到锁才能set。</p>
<p><strong>时间戳</strong><br>对于有顺序要求的场景，在写入时保存一个时间戳，写入前先比较自己的时间戳是不是早于现有记录的时间戳，如果早于，就不写入了。</p>
<p><strong>队列</strong><br>通过消息队列进行串行化处理。</p>
<p><em>原文：<a href="https://blog.csdn.net/suifeng629/article/details/103304247" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/suifeng629/article/details/103304247</a></em></p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis笔记02</title>
    <url>/2021/redis/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p><a href="https://lzzeng.github.io/2021/redis-questions/">Redis笔记01</a></p>
</blockquote>
<h2 id="线程模型"><a href="#线程模型" class="headerlink" title="线程模型"></a>线程模型</h2><p>单线程模型，文件事件处理器通过IO多路复用 监听多个socket（socket执行accept read write close等操作产生文件事件），然后由文件事件处理器处理文件事件。</p>
<a id="more"></a>
<h2 id="持久化方式"><a href="#持久化方式" class="headerlink" title="持久化方式"></a>持久化方式</h2><p>rdb：快照</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br></pre></td></tr></table></figure>
<p>aof： 默认配置的是 appendonly no，改成yes打开AOF模式</p>
<h2 id="如何连接Redis"><a href="#如何连接Redis" class="headerlink" title="如何连接Redis"></a>如何连接Redis</h2><p>1～使用实现了一致性哈希算法的proxy中间件twemproxy<br>2～Java使用Jedis、ShardedJedis、JedisPool、JedisSentinelPool（哨兵模式）或JedisCluster（Redis cluster模式）连接redis</p>
<p>Jedis 2.9.1存在的一个bug: <a href="https://blog.csdn.net/u013527895/article/details/103121558" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/u013527895/article/details/103121558</a></p>
<p>Jedis加载redis集群的第一个节点如果异常不在线，并且redis设置了密码的话，会因连接异常退出不再尝试下一个节点。所谓第一个节点，就是所有redis节点加载到HashSet<hostandport>集合后集合里第一个元素。</hostandport></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//src/main/java/redis/clients/jedis/JedisClusterConnectionHandler.java</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initializeSlotsCache</span><span class="params">(Set&lt;HostAndPort&gt; startNodes, GenericObjectPoolConfig poolConfig, <span class="keyword">int</span> connectionTimeout, <span class="keyword">int</span> soTimeout, String password, String clientName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (HostAndPort hostAndPort : startNodes) &#123;</span><br><span class="line">      Jedis jedis = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        jedis = <span class="keyword">new</span> Jedis(hostAndPort.getHost(), hostAndPort.getPort(), connectionTimeout, soTimeout);</span><br><span class="line">        <span class="keyword">if</span> (password != <span class="keyword">null</span>) &#123;</span><br><span class="line">          jedis.auth(password);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (clientName != <span class="keyword">null</span>) &#123;</span><br><span class="line">          jedis.clientSetname(clientName);</span><br><span class="line">        &#125;</span><br><span class="line">        cache.discoverClusterNodesAndSlots(jedis);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (JedisConnectionException e) &#123;</span><br><span class="line">        <span class="comment">// try next nodes</span></span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (jedis != <span class="keyword">null</span>) &#123;</span><br><span class="line">          jedis.close();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h2 id="Jedis连接Redis代码参考"><a href="#Jedis连接Redis代码参考" class="headerlink" title="Jedis连接Redis代码参考"></a>Jedis连接Redis代码参考</h2><p>深入剖析Redis客户端Jedis的特性和原理: <a href="https://baijiahao.baidu.com/s?id=1715292157796722813&amp;wfr=spider&amp;for=pc" rel="external nofollow noopener noreferrer" target="_blank">https://baijiahao.baidu.com/s?id=1715292157796722813&amp;wfr=spider&amp;for=pc</a></p>
<p>主从模式连接：Jedis</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MasterAndSlaveTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Jedis jedis_M = <span class="keyword">new</span> Jedis(<span class="string">"192.168.248.129"</span>,<span class="number">6379</span>); <span class="comment">//主机</span></span><br><span class="line">        Jedis jedis_S = <span class="keyword">new</span> Jedis(<span class="string">"192.168.248.129"</span>,<span class="number">6380</span>); <span class="comment">//从机</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//遵循“配从不配主”的模式</span></span><br><span class="line">        jedis_S.slaveof(<span class="string">"192.168.248.129"</span>,<span class="number">6379</span>);</span><br><span class="line">        </span><br><span class="line">        jedis_M.set(<span class="string">"class"</span>, <span class="string">"8888"</span>); <span class="comment">//主机去写</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//内存中读写太快，防止读在写之前先完成而出现null的情况，这里做一下延迟</span></span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        String result = jedis_S.get(<span class="string">"class"</span>); <span class="comment">//从机去读</span></span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>多个redis实例（非cluster）：ShardedJedis，一致性哈希算法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisShardInfo;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.ShardedJedis;</span><br><span class="line"></span><br><span class="line">List&lt;JedisShardInfo&gt; shards = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">JedisShardInfo info = <span class="keyword">null</span> ;</span><br><span class="line"><span class="keyword">for</span> (String address : addresss.split(<span class="string">","</span>)) &#123;</span><br><span class="line">    String[] hostAndPort = address.split(<span class="string">":"</span>);</span><br><span class="line">    info = <span class="keyword">new</span> JedisShardInfo(hostAndPort[<span class="number">0</span>], Integer.valueOf(hostAndPort[<span class="number">1</span>]));</span><br><span class="line">    shards.add(info);</span><br><span class="line">&#125;</span><br><span class="line">shardedJedis = <span class="keyword">new</span> ShardedJedis(shards);</span><br><span class="line">shardedJedis.set(<span class="string">"a"</span>, <span class="string">"123"</span>);</span><br><span class="line">shardedJedis.get(<span class="string">"a"</span>);</span><br></pre></td></tr></table></figure>
<p>哨兵模式连接：JedisSentinelPool</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPoolConfig;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisSentinelPool</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.设置sentinel 各个节点集合</span></span><br><span class="line">Set&lt;String&gt; sentinelSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">sentinelSet.add(<span class="string">"192.168.14.101:26379"</span>);</span><br><span class="line">sentinelSet.add(<span class="string">"192.168.14.102:26379"</span>);</span><br><span class="line">sentinelSet.add(<span class="string">"192.168.14.103:26379"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.设置jedispool 连接池配置文件</span></span><br><span class="line">JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">config.setMaxTotal(<span class="number">10</span>);</span><br><span class="line">config.setMaxWaitMillis(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.设置mastername,sentinelNode集合,配置文件,Redis登录密码</span></span><br><span class="line">JedisSentinelPool jedisSentinelPool = <span class="keyword">new</span> JedisSentinelPool(<span class="string">"mymaster"</span>,sentinelSet,config,<span class="string">"123"</span>);</span><br><span class="line">Jedis jedis = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    jedis = jedisSentinelPool.getResource();</span><br><span class="line">    <span class="comment">//获取Redis中key=hello的值</span></span><br><span class="line">    String value = jedis.get(<span class="string">"hello"</span>);</span><br><span class="line">    System.out.println(value);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(jedis != <span class="keyword">null</span>)&#123;</span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>cluster模式连接：JedisCluster，哈希槽算法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.HostAndPort;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisCluster;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJedisCluster</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//1、创建jedidsCluster客户端</span></span><br><span class="line">   <span class="comment">//创建一个set集合，用来封装所有redis节点的信息</span></span><br><span class="line">   Set&lt;HostAndPort&gt; nodes = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">   </span><br><span class="line">   nodes.add(<span class="keyword">new</span> HostAndPort(<span class="string">"192.168.23.12"</span>, <span class="number">7001</span>));</span><br><span class="line">   nodes.add(<span class="keyword">new</span> HostAndPort(<span class="string">"192.168.23.12"</span>, <span class="number">7002</span>));</span><br><span class="line">   nodes.add(<span class="keyword">new</span> HostAndPort(<span class="string">"192.168.23.12"</span>, <span class="number">7003</span>));</span><br><span class="line">   <span class="comment">//...</span></span><br><span class="line">   </span><br><span class="line">   JedisCluster cluster = <span class="keyword">new</span> JedisCluster(nodes);</span><br><span class="line">   </span><br><span class="line">   String name = cluster.get(<span class="string">"user:id:1:name"</span>);</span><br><span class="line">   cluster.set(<span class="string">"user:id:1:address"</span>, <span class="string">"你好呀"</span>);</span><br><span class="line">   String address = cluster.get(<span class="string">"user:id:1:address"</span>);</span><br><span class="line">   </span><br><span class="line">   System.out.println(<span class="string">"name:"</span>+name);</span><br><span class="line">   System.out.println(<span class="string">"address:"</span>+address);     </span><br><span class="line">   <span class="keyword">if</span>(<span class="keyword">null</span>!=cluster)&#123;</span><br><span class="line">       cluster.close();</span><br><span class="line">   &#125;&#125;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="集群操作"><a href="#集群操作" class="headerlink" title="集群操作"></a>集群操作</h2><p>5.0版本之前使用redis-trib.rb ruby脚本操作redis集群，5.0以上统一使用redis-cli操作。</p>
<p>redis cluster半数以下的节点陆续下线后，集群仍可正常提供服务，节点重新上线后，节点上原master变成slave，后面不发生异常的话，不会自动调转过来。</p>
<h2 id="创建redis-cluster"><a href="#创建redis-cluster" class="headerlink" title="创建redis-cluster"></a>创建redis-cluster</h2><p>哨兵模式可参考：<a href="https://github.com/AliyunContainerService" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/AliyunContainerService</a></p>
<p>多容器创建redis cluster:</p>
<p>Dockerfile:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">FROM</span> <span class="string">redis</span></span><br><span class="line"></span><br><span class="line"><span class="string">RUN</span> <span class="string">ln</span> <span class="string">-sf</span> <span class="string">/usr/share/zoneinfo/Asia/Shanghai</span> <span class="string">/etc/localtime</span></span><br><span class="line"><span class="string">RUN</span> <span class="string">echo</span> <span class="string">'Asia/Shanghai'</span> <span class="string">&gt;/etc/timezone</span></span><br><span class="line"></span><br><span class="line"><span class="string">EXPOSE</span> <span class="string">$REDIS_PORT</span></span><br><span class="line"><span class="comment"># EXPOSE $REDIS_PORT_NODE</span></span><br><span class="line"></span><br><span class="line"><span class="string">COPY</span> <span class="string">entrypoint.sh</span> <span class="string">/usr/local/bin/</span></span><br><span class="line"><span class="string">COPY</span> <span class="string">redis.conf</span> <span class="string">/usr/local/etc/</span></span><br><span class="line"></span><br><span class="line"><span class="string">RUN</span> <span class="string">chmod</span> <span class="number">777</span> <span class="string">/usr/local/etc/redis.conf</span></span><br><span class="line"><span class="string">RUN</span> <span class="string">chmod</span> <span class="string">+x</span> <span class="string">/usr/local/bin/entrypoint.sh</span></span><br><span class="line"></span><br><span class="line"><span class="string">ENTRYPOINT</span> <span class="string">["/usr/local/bin/entrypoint.sh"]</span></span><br><span class="line"><span class="string">CMD</span> <span class="string">["redis-server",</span> <span class="string">"/usr/local/etc/redis.conf"</span><span class="string">]</span></span><br></pre></td></tr></table></figure>
<p>redis.conf:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#端口</span><br><span class="line">port REDIS_PORT</span><br><span class="line">#开启集群</span><br><span class="line">cluster-enabled yes</span><br><span class="line">#配置文件</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line">#更新操作后进行日志记录</span><br><span class="line">appendonly yes</span><br><span class="line">#设置主服务的连接密码</span><br><span class="line"># masterauth</span><br><span class="line">#设置从服务的连接密码</span><br><span class="line"># requirepass</span><br></pre></td></tr></table></figure>
<p>docker-compose.yml:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">redis1:</span></span><br><span class="line"> <span class="attr">image:</span> <span class="string">redis-cluster</span></span><br><span class="line"> <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"> <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/data/redis-cluster/6381/data:/data</span></span><br><span class="line"> <span class="attr">environment:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">REDIS_PORT=6381</span></span><br><span class="line"> <span class="attr">ports:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">'6381:6381'</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">'16381:16381'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 其余5个依次可定6382</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="attr">redis6:</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure>
<p>这里，其实可以让6个容器都保持默认6379端口，但宿主机端口不能重复。</p>
<p>cluster.sh：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">para=<span class="string">""</span></span><br><span class="line">port=6380</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq 1 6`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  ipaddr=$(docker inspect redis-cluster_redis<span class="variable">$&#123;i&#125;</span>_1 |jq <span class="string">'.[0].NetworkSettings.Networks.bridge.IPAddress'</span> |sed <span class="string">'s/\"//g'</span>)</span><br><span class="line">  <span class="built_in">let</span> port=port+1</span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$ipaddr</span>:<span class="variable">$port</span></span><br><span class="line">  para=<span class="string">"<span class="variable">$para</span> <span class="variable">$ipaddr</span>:<span class="variable">$port</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">docker run --rm -it inem0o/redis-trib create --replicas 1 <span class="variable">$para</span></span><br></pre></td></tr></table></figure>
<p>entrypoint.sh：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="comment"># allow the container to be started with `--user`</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$1</span>"</span> = <span class="string">'redis-server'</span> -a <span class="string">"<span class="variable">$(id -u)</span>"</span> = <span class="string">'0'</span> ]; <span class="keyword">then</span></span><br><span class="line">    sed -i <span class="string">'s/REDIS_PORT/'</span><span class="variable">$REDIS_PORT</span><span class="string">'/g'</span> /usr/<span class="built_in">local</span>/etc/redis.conf</span><br><span class="line">    chown -R redis .</span><br><span class="line">    <span class="built_in">exec</span> gosu redis <span class="string">"<span class="variable">$0</span>"</span> <span class="string">"<span class="variable">$@</span>"</span>  <span class="comment">#gosu是sudo轻量级”替代品”</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> <span class="string">"<span class="variable">$@</span>"</span></span><br></pre></td></tr></table></figure>
<p>构建、启动：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost redis-cluster]# docker build -t redis-cluster .  </span><br><span class="line">[root@localhost redis-cluster]# docker-compose up -d</span><br><span class="line">[root@localhost redis-cluster]# docker-compose ps</span><br><span class="line">         Name                       Command               State                             Ports                           </span><br><span class="line">----------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">redis-cluster_redis1_1   /usr/local/bin/entrypoint. ...   Up      0.0.0.0:16381-&gt;16381/tcp, 6379/tcp, 0.0.0.0:6381-&gt;6381/tcp</span><br><span class="line">redis-cluster_redis2_1   /usr/local/bin/entrypoint. ...   Up      0.0.0.0:16382-&gt;16382/tcp, 6379/tcp, 0.0.0.0:6382-&gt;6382/tcp</span><br><span class="line">redis-cluster_redis3_1   /usr/local/bin/entrypoint. ...   Up      0.0.0.0:16383-&gt;16383/tcp, 6379/tcp, 0.0.0.0:6383-&gt;6383/tcp</span><br><span class="line">redis-cluster_redis4_1   /usr/local/bin/entrypoint. ...   Up      0.0.0.0:16384-&gt;16384/tcp, 6379/tcp, 0.0.0.0:6384-&gt;6384/tcp</span><br><span class="line">redis-cluster_redis5_1   /usr/local/bin/entrypoint. ...   Up      0.0.0.0:16385-&gt;16385/tcp, 6379/tcp, 0.0.0.0:6385-&gt;6385/tcp</span><br><span class="line">redis-cluster_redis6_1   /usr/local/bin/entrypoint. ...   Up      0.0.0.0:16386-&gt;16386/tcp, 6379/tcp, 0.0.0.0:6386-&gt;6386/tcp</span><br><span class="line">[root@localhost redis-cluster]# </span><br><span class="line">[root@localhost redis-cluster]# sh cluster.sh </span><br><span class="line">172.17.0.2:6381</span><br><span class="line">172.17.0.7:6382</span><br><span class="line">172.17.0.4:6383</span><br><span class="line">172.17.0.5:6384</span><br><span class="line">172.17.0.3:6385</span><br><span class="line">172.17.0.6:6386</span><br><span class="line">172.17.0.2:6381 172.17.0.7:6382 172.17.0.4:6383 172.17.0.5:6384 172.17.0.3:6385 172.17.0.6:6386</span><br><span class="line">WARNING: IPv4 forwarding is disabled. Networking will not work.</span><br><span class="line">&gt;&gt;&gt; Creating cluster</span><br><span class="line">&gt;&gt;&gt; Performing hash slots allocation on 6 nodes...</span><br><span class="line">Using 3 masters:</span><br><span class="line">172.17.0.2:6381</span><br><span class="line">172.17.0.7:6382</span><br><span class="line">172.17.0.4:6383</span><br><span class="line">Adding replica 172.17.0.5:6384 to 172.17.0.2:6381</span><br><span class="line">Adding replica 172.17.0.3:6385 to 172.17.0.7:6382</span><br><span class="line">Adding replica 172.17.0.6:6386 to 172.17.0.4:6383</span><br><span class="line">M: 0229502412d452827895d48428924ebfdef281c5 172.17.0.2:6381</span><br><span class="line">   slots:0-5460 (5461 slots) master</span><br><span class="line">M: 6e8a42258f6d8cdf77611f959665853a81e3bb87 172.17.0.7:6382</span><br><span class="line">   slots:5461-10922 (5462 slots) master</span><br><span class="line">M: af21e289c4e1426777626fb5f07c26fcb02cf795 172.17.0.4:6383</span><br><span class="line">   slots:10923-16383 (5461 slots) master</span><br><span class="line">S: 89335368454ba872d4d3ba814b3bbec116e993c6 172.17.0.5:6384</span><br><span class="line">   replicates 0229502412d452827895d48428924ebfdef281c5</span><br><span class="line">S: d1d295a8ece6ffa037ea1b721d036b91a6eef08c 172.17.0.3:6385</span><br><span class="line">   replicates 6e8a42258f6d8cdf77611f959665853a81e3bb87</span><br><span class="line">S: 6b26027dd63542d9b509ff7b0c9ba163891611a6 172.17.0.6:6386</span><br><span class="line">   replicates af21e289c4e1426777626fb5f07c26fcb02cf795</span><br><span class="line">Can I set the above configuration? (type &apos;yes&apos; to accept): yes</span><br><span class="line">&gt;&gt;&gt; Nodes configuration updated</span><br><span class="line">&gt;&gt;&gt; Assign a different config epoch to each node</span><br><span class="line">&gt;&gt;&gt; Sending CLUSTER MEET messages to join the cluster</span><br><span class="line">Waiting for the cluster to join.</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 172.17.0.2:6381)</span><br><span class="line">M: 0229502412d452827895d48428924ebfdef281c5 172.17.0.2:6381</span><br><span class="line">   slots:0-5460 (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 6b26027dd63542d9b509ff7b0c9ba163891611a6 172.17.0.6:6386@16386</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates af21e289c4e1426777626fb5f07c26fcb02cf795</span><br><span class="line">S: 89335368454ba872d4d3ba814b3bbec116e993c6 172.17.0.5:6384@16384</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 0229502412d452827895d48428924ebfdef281c5</span><br><span class="line">S: d1d295a8ece6ffa037ea1b721d036b91a6eef08c 172.17.0.3:6385@16385</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 6e8a42258f6d8cdf77611f959665853a81e3bb87</span><br><span class="line">M: af21e289c4e1426777626fb5f07c26fcb02cf795 172.17.0.4:6383@16383</span><br><span class="line">   slots:10923-16383 (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 6e8a42258f6d8cdf77611f959665853a81e3bb87 172.17.0.7:6382@16382</span><br><span class="line">   slots:5461-10922 (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check for open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br><span class="line">[root@localhost redis-cluster]#</span><br></pre></td></tr></table></figure>
<p>连接redis1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost redis-cluster]# docker run --rm -it redis redis-cli -h 172.17.0.2 -p 6381</span><br><span class="line">172.17.0.2:6381&gt; info replication</span><br><span class="line"># Replication</span><br><span class="line">role:master</span><br><span class="line">connected_slaves:1</span><br><span class="line">slave0:ip=172.17.0.5,port=6384,state=online,offset=322,lag=0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:7c24732ceeb781c3b3274395d92081c79f13364f</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:322</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:322</span><br><span class="line">172.17.0.2:6381&gt; </span><br><span class="line">172.17.0.2:6381&gt; </span><br><span class="line">172.17.0.2:6381&gt; cluster nodes</span><br><span class="line">6b26027dd63542d9b509ff7b0c9ba163891611a6 172.17.0.6:6386@16386 slave af21e289c4e1426777626fb5f07c26fcb02cf795 0 1636057597000 3 connected</span><br><span class="line">89335368454ba872d4d3ba814b3bbec116e993c6 172.17.0.5:6384@16384 slave 0229502412d452827895d48428924ebfdef281c5 0 1636057597299 1 connected</span><br><span class="line">0229502412d452827895d48428924ebfdef281c5 172.17.0.2:6381@16381 myself,master - 0 1636057597000 1 connected 0-5460</span><br><span class="line">d1d295a8ece6ffa037ea1b721d036b91a6eef08c 172.17.0.3:6385@16385 slave 6e8a42258f6d8cdf77611f959665853a81e3bb87 0 1636057598319 2 connected</span><br><span class="line">af21e289c4e1426777626fb5f07c26fcb02cf795 172.17.0.4:6383@16383 master - 0 1636057597000 3 connected 10923-16383</span><br><span class="line">6e8a42258f6d8cdf77611f959665853a81e3bb87 172.17.0.7:6382@16382 master - 0 1636057598726 2 connected 5461-10922</span><br><span class="line">172.17.0.2:6381&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2021/redis/image-20211105043729294.png" alt="image-20211105043729294" style="zoom: 80%;"></p>
<p>stop/restart redis1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost redis-cluster]# docker-compose stop redis1</span><br><span class="line">Stopping redis-cluster_redis1_1 ... done</span><br></pre></td></tr></table></figure>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2021/redis/image-20211105043827581.png" alt="image-20211105043827581" style="zoom:80%;"></p>
<p>master fail一个，对应的slave 172.17.0.5:6384变成新的master了。</p>
<p>重新上线redis1：172.17.0.5:6384，它是新master的slave了。</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2021/redis/image-20211105044630762.png" alt="image-20211105044630762" style="zoom:80%;"></p>
<hr>
<p>（待续）</p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>HJ-02</title>
    <url>/2021/sh-coding/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>记录2个HJ机试题的bash解法<br>错误归并、四舍五入</p>
</blockquote>
<a id="more"></a>
<h2 id="错误归并"><a href="#错误归并" class="headerlink" title="错误归并"></a>错误归并</h2><p>题目：开发一个简单错误记录功能小模块，能够记录出错的代码所在的文件名称和行号。</p>
<p>处理：</p>
<ol>
<li>记录最多8条错误记录，循环记录，最后只用输出最后出现的八条错误记录。对相同的错误记录只记录一条，但是<strong>错误计数增加。最后一个斜杠后面的带后缀名的部分（保留最后16位）和行号完全匹配的记录才做算是”相同“的错误记录。</strong></li>
<li>超过16个字符的文件名称，只记录文件的最后有效16个字符。</li>
<li>输入的文件可能带路径，记录文件名称不能带路径。<strong>也就是说，哪怕不同路径下的文件，如果它们的名字的后16个字符相同，也被视为相同的错误记录。</strong></li>
<li>循环记录时，只以第一次出现的顺序为准，后面重复的不会更新它的出现时间，仍以第一次为准。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">示例输入：</span><br><span class="line">D:\zwtymj\xccb\ljj\cqzlyaszjvlsjmkwoqijggmybr 645</span><br><span class="line">E:\je\rzuwnjvnuz 633</span><br><span class="line">C:\km\tgjwpb\gy\atl 637</span><br><span class="line">F:\weioj\hadd\connsh\rwyfvzsopsuiqjnr 647</span><br><span class="line">E:\ns\mfwj\wqkoki\eez 648</span><br><span class="line">D:\cfmwafhhgeyawnool 649</span><br><span class="line">E:\czt\opwip\osnll\c 637</span><br><span class="line">G:\nt\f 633</span><br><span class="line">F:\fop\ywzqaop 631</span><br><span class="line">F:\yay\jc\ywzqaop 631</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">rzuwnjvnuz 633 1</span><br><span class="line">atl 637 1</span><br><span class="line">rwyfvzsopsuiqjnr 647 1</span><br><span class="line">eez 648 1</span><br><span class="line">fmwafhhgeyawnool 649 1</span><br><span class="line">c 637 1</span><br><span class="line">f 633 1</span><br><span class="line">ywzqaop 631 2</span><br></pre></td></tr></table></figure>
<p>shell解法：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">txt=$(cat)</span><br><span class="line">fname_row_uniq_count=$(<span class="built_in">echo</span> <span class="string">"<span class="variable">$txt</span>"</span> |sed <span class="string">'s/^.*\\//'</span> |awk <span class="string">'&#123;print substr($1,length($1)-15)" "$2&#125;'</span> |sort |uniq -c)</span><br><span class="line">fname_row_sorted_latest8=$(<span class="built_in">echo</span> <span class="string">"<span class="variable">$txt</span>"</span> |sed <span class="string">'s/^.*\\//'</span> |awk <span class="string">'&#123;t=substr($1,length($1)-15)" "$2; if(a[t]!=1) &#123;a[t]=1; print t;&#125;&#125;'</span> |tail -n8)</span><br><span class="line"></span><br><span class="line">IFS=$<span class="string">'\n'</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> <span class="variable">$fname_row_sorted_latest8</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$fname_row_uniq_count</span>"</span> |grep -E <span class="string">"^\s*[0-9]+\s<span class="variable">$line</span>$"</span> |awk <span class="string">'&#123;print $2" "$3" "$1&#125;'</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$fname_row_sorted_latest8</span>"</span> |awk -v vline=<span class="string">"`echo "</span><span class="variable">$fname_row_uniq_count</span><span class="string">" |sed 's/^/echo /'`"</span> <span class="string">'BEGIN&#123;while(vline |getline) d[$2" "$3]=$1;&#125; &#123;print $0" "d[$0];&#125;'</span></span><br></pre></td></tr></table></figure>
<h2 id="四舍五入"><a href="#四舍五入" class="headerlink" title="四舍五入"></a>四舍五入</h2><p>题目：输入一个正的小数，输出四舍五入结果</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># S0:</span></span><br><span class="line"><span class="built_in">read</span> a</span><br><span class="line">b=$(<span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span>"</span> |cut -d. -f1)</span><br><span class="line">b2=$(<span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span>"</span> |cut -d. -f2)</span><br><span class="line">[ <span class="string">"<span class="variable">$&#123;b2:0:1&#125;</span>"</span> -ge 5 ] &amp;&amp; <span class="built_in">echo</span> $((b+1)) || <span class="built_in">echo</span> <span class="variable">$b</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># S1:</span></span><br><span class="line">IFS=. <span class="built_in">read</span> b b2</span><br><span class="line">[ <span class="string">"<span class="variable">$&#123;b2:0:1&#125;</span>"</span> -ge 5 ] &amp;&amp; <span class="built_in">echo</span> $((b+1)) || <span class="built_in">echo</span> <span class="variable">$b</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># S2:</span></span><br><span class="line"><span class="built_in">read</span> a</span><br><span class="line">b=<span class="variable">$&#123;a%.*&#125;</span></span><br><span class="line">b2=<span class="variable">$&#123;a#*.&#125;</span></span><br><span class="line">[ <span class="string">"<span class="variable">$&#123;b2:0:1&#125;</span>"</span> -ge 5 ] &amp;&amp; <span class="built_in">echo</span> $((b+1)) || <span class="built_in">echo</span> <span class="variable">$b</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># S4: 特别解法</span></span><br><span class="line"><span class="built_in">read</span> a</span><br><span class="line"><span class="built_in">printf</span> <span class="string">"%.0f"</span> <span class="string">"<span class="variable">$a</span>"</span>1  <span class="comment"># 4.5是特例，结果不是5，而是4；由于都是小数，一律末尾加一个1 可防止4.5=4</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>路线交点</title>
    <url>/2022/java-coding/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>小车从原点（0，0）出发，N、E、W、S分别表示向北/东/南/西走一步。<br>示例图为按<strong>NNEESWWWNES</strong>行驶后的路线，共有2个交点。</p>
<p>输入：NEWS组成的字符串<br>输出：交点的个数</p>
</blockquote>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2022/image-20220220232653933.png" alt="image-20220220232653933"></p>
<a id="more"></a>
<h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><p>不考虑方向，同向多次经过同一个点即认为是交点：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Crossing</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] main)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> Solution();</span><br><span class="line">        <span class="keyword">int</span> n = solution.getCrossingNum(<span class="string">"NWSEN"</span>);</span><br><span class="line">        System.out.println(n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCrossingNum</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>, d;</span><br><span class="line">        Map&lt;Point, Integer&gt; points = walk(s);</span><br><span class="line">        <span class="keyword">for</span> (Point p : points.keySet()) &#123;</span><br><span class="line">            d = points.get(p);</span><br><span class="line">            <span class="keyword">if</span> (d &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;Point, Integer&gt; <span class="title">walk</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Map&lt;Point, Integer&gt; points = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Point p0 = <span class="keyword">new</span> Point(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> ch : s.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (ch) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'N'</span>:</span><br><span class="line">                    p0.y += <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'E'</span>:</span><br><span class="line">                    p0.x += <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'S'</span>:</span><br><span class="line">                    p0.y -= <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'W'</span>:</span><br><span class="line">                    p0.x -= <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Point p = <span class="keyword">new</span> Point(p0.x, p0.y);</span><br><span class="line">            <span class="keyword">if</span> (points.containsKey(p)) &#123;</span><br><span class="line">                points.put(p, points.get(p) + <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                points.put(p, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> points;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Point</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Point Point = (Point) o;</span><br><span class="line">        <span class="keyword">return</span> x == Point.x &amp;&amp; y == Point.y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(x, y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"[%d,%d]"</span>, x, y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二"><a href="#二" class="headerlink" title="二"></a>二</h2><p>考虑方向，从2个以上不同方向经过同一点为交点：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.zlz.practise.cross4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Crossing</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] main)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> Solution();</span><br><span class="line">        <span class="keyword">int</span> n = solution.getCrossingNum(<span class="string">"NWSENEEWW"</span>);</span><br><span class="line">        System.out.println(<span class="string">"crossing: "</span> + n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCrossingNum</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        Map&lt;Point, Point&gt; points = walk(s);</span><br><span class="line">        <span class="keyword">for</span> (Point p : points.keySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p.isCrossing()) &#123;</span><br><span class="line">                System.out.println(<span class="string">"cross at: "</span> + p);</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;Point, Point&gt; <span class="title">walk</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Map&lt;Point, Point&gt; points = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Map&lt;Character, <span class="keyword">int</span>[]&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">'N'</span>, <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>&#125;);</span><br><span class="line">        map.put(<span class="string">'S'</span>, <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>, -<span class="number">1</span>, <span class="number">4</span>&#125;);</span><br><span class="line">        map.put(<span class="string">'E'</span>, <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>&#125;);</span><br><span class="line">        map.put(<span class="string">'W'</span>, <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>, <span class="number">0</span>, <span class="number">8</span>&#125;);</span><br><span class="line">        Point p0 = <span class="keyword">new</span> Point(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> ch : s.toCharArray()) &#123;</span><br><span class="line">            p0.x += map.get(ch)[<span class="number">0</span>];</span><br><span class="line">            p0.y += map.get(ch)[<span class="number">1</span>];</span><br><span class="line">            p0.din = map.get(ch)[<span class="number">2</span>];</span><br><span class="line"><span class="comment">//            switch (ch) &#123;</span></span><br><span class="line"><span class="comment">//                case 'N':</span></span><br><span class="line"><span class="comment">//                    p0.y += 1;</span></span><br><span class="line"><span class="comment">//                    p0.din = 1;</span></span><br><span class="line"><span class="comment">//                    break;</span></span><br><span class="line"><span class="comment">//                case 'E':</span></span><br><span class="line"><span class="comment">//                    p0.x += 1;</span></span><br><span class="line"><span class="comment">//                    p0.din = 2;</span></span><br><span class="line"><span class="comment">//                    break;</span></span><br><span class="line"><span class="comment">//                case 'S':</span></span><br><span class="line"><span class="comment">//                    p0.y -= 1;</span></span><br><span class="line"><span class="comment">//                    p0.din = 4;</span></span><br><span class="line"><span class="comment">//                    break;</span></span><br><span class="line"><span class="comment">//                case 'W':</span></span><br><span class="line"><span class="comment">//                    p0.x -= 1;</span></span><br><span class="line"><span class="comment">//                    p0.din = 8;</span></span><br><span class="line"><span class="comment">//                    break;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">            Point p = <span class="keyword">new</span> Point(p0.x, p0.y, p0.din);</span><br><span class="line">            <span class="keyword">if</span> (points.containsKey(p)) &#123;</span><br><span class="line">                points.get(p).din |= p.din;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                points.put(p, p);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> points;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">    <span class="keyword">int</span> din;  <span class="comment">//1 2 4 8 -&gt; N E S W; 3=1+2=NE; 7=NES; 15=NESW</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Point</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> din)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">        <span class="keyword">this</span>.din = din;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCrossing000</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getD() &gt;= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCrossing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] notCrossingDinSumArr = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">10</span>&#125;;  <span class="comment">//5,10 同一条直线相对行驶过的点，不认为是交点，因为不是垂直相交</span></span><br><span class="line"><span class="comment">//        int[] notCrossingDinSumArr = &#123;0, 1, 2, 4, 8&#125;;  //不考虑是否垂直相交</span></span><br><span class="line">        <span class="keyword">return</span> Arrays.binarySearch(notCrossingDinSumArr, din) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 未使用 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getD</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i = din;</span><br><span class="line"><span class="comment">//        while (i != 0) &#123;</span></span><br><span class="line"><span class="comment">//            i = i &amp; (i - 1);</span></span><br><span class="line"><span class="comment">//            count++;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">while</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((i &amp; <span class="number">1</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            i = i &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Point Point = (Point) o;</span><br><span class="line">        <span class="keyword">return</span> x == Point.x &amp;&amp; y == Point.y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(x, y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"[%d,%d,%d]"</span>, x, y, din);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>修复github pages CI</title>
    <url>/cicd/github-actions/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<blockquote>
<p>Travis CI 改版后此前配置的CI出问题了，加上有10000 <em>credits</em> (1000 linux build minutes)的限制，现改用github actions构建github pages</p>
<p>github actions的workflow文件写法，类似于gitlab的.gitlab-ci.yml，详见<a href="https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions" rel="external nofollow noopener noreferrer" target="_blank">官方文档</a></p>
</blockquote>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2021/github-actions/image-20210906012604864.png" alt="image-20210906012604864"></p>
<a id="more"></a>
<p>只划分了一个stage: <code>update gitbook docs</code>，所以上图只有一个pipline标签。其中，包含3个step:</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2021/github-actions/image-20210906020757779.png" alt="image-20210906020757779"></p>
<p>.github/workflows/ruby.yml:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Ruby</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">update-docs:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">update</span> <span class="string">gitbook</span> <span class="string">docs</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    </span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="number">1</span><span class="string">.</span> <span class="string">checkout</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="number">2</span><span class="string">.</span> <span class="string">gitbook</span> <span class="string">build</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">rm</span> <span class="string">-rf</span> <span class="string">_book</span> <span class="string">||</span> <span class="string">exit</span> <span class="number">0</span></span><br><span class="line">        <span class="string">docker</span> <span class="string">run</span> <span class="string">--rm</span> <span class="string">-v</span> <span class="string">"$(pwd):/opt/data"</span> <span class="string">lzzeng/node-gitbook-cli:alpine</span> <span class="string">sh</span> <span class="string">-c</span> <span class="string">"gitbook install &amp;&amp; gitbook build"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="number">3</span><span class="string">.</span> <span class="string">push</span> <span class="string">to</span> <span class="string">github</span> <span class="string">pages</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="attr">GIT_DEPLOY_REPO:</span> <span class="string">https://$&#123;&#123;</span> <span class="string">secrets.TOKEN</span> <span class="string">&#125;&#125;@github.com/lzzeng/docs.git</span></span><br><span class="line">        <span class="attr">GIT_DEPLOY_DIR:</span> <span class="string">_book</span></span><br><span class="line">        <span class="attr">GIT_DEPLOY_BRANCH:</span> <span class="string">gh-pages</span></span><br><span class="line">        <span class="attr">GIT_DEPLOY_USERNAME:</span> <span class="string">lzzeng</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">"$<span class="template-variable">&#123;&#123; secrets.EMAIL &#125;&#125;</span>"</span></span><br><span class="line">        <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">"$&#123;GIT_DEPLOY_USERNAME&#125;"</span></span><br><span class="line">        <span class="string">cd</span> <span class="string">_book</span></span><br><span class="line">        <span class="string">sudo</span> <span class="string">git</span> <span class="string">init</span></span><br><span class="line">        <span class="string">sudo</span> <span class="string">git</span> <span class="string">add</span> <span class="string">.</span></span><br><span class="line">        <span class="string">sudo</span> <span class="string">git</span> <span class="string">commit</span> <span class="string">-m</span> <span class="string">"update gh-pages"</span></span><br><span class="line">        <span class="string">sudo</span> <span class="string">git</span> <span class="string">push</span> <span class="string">--force</span> <span class="string">--quiet</span> <span class="string">"$&#123;GIT_DEPLOY_REPO&#125;"</span> <span class="string">master:$&#123;GIT_DEPLOY_BRANCH&#125;</span></span><br></pre></td></tr></table></figure>
<p>仓库settings：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2021/github-actions/image-20210906021036380.png" alt="image-20210906021036380"></p>
<p>发布后的效果：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2021/github-actions/image-20210906023044703.png" alt="image-20210906023044703"></p>
]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>CICD</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>Gitlab CI -- gitlab ci 配置文件一例</title>
    <url>/cicd/gitlab-cicd/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<blockquote>
<p><a href="https://docs.gitlab.com/ce/ci/" rel="external nofollow noopener noreferrer" target="_blank"><strong>GitLab CI/CD</strong></a>是GitLab内置的工具，用于项目持续集成、持续部署。GitLab CI/CD 由位于代码仓库根目录的名为<strong>.gitlab-ci.yml</strong>的文件配置。而此文件中设置的脚本由GitLab Runner执行。</p>
<p>Gitlab CI （持续集成）自动构建任务需编写配置文件 .gitlab-ci.yml</p>
</blockquote>
<a id="more"></a>
<p><a href="http://git.pro.keep.com/devops/docs" rel="external nofollow noopener noreferrer" target="_blank">本书</a> 通过GitLab CI/CD自动发布：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/cicd.assets/1561299107170.png" alt="Gitlab CI"></p>
<p>以本书的.gitlab-ci.yml为例：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">docker:stable</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">dind-v19</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">info</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">image_name=lzzeng/docs:latest</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">build</span> <span class="string">-t</span> <span class="string">$image_name</span> <span class="string">.</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">login</span> <span class="string">-u</span> <span class="string">$docker_hub_user</span> <span class="string">-p</span> <span class="string">$docker_hub_pass</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">push</span> <span class="string">$image_name</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span> <span class="comment"># this job will affect only the 'master' branch</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ansible-docker:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">ansible-alpine:2.8.0</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">dind-v19</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"GITBOOK_HOST is $GITBOOK_HOST_DEV"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"$SSH_PRIVATE_KEY_DEV"</span> <span class="string">&gt;</span> <span class="string">~/.key</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">chmod</span> <span class="number">600</span> <span class="string">~/.key</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"$ANSIBLE_CFG_CONTENT"</span> <span class="string">&gt;</span> <span class="string">~/.ansible.cfg</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ansible-playbook</span> <span class="string">-i</span> <span class="string">"$GITBOOK_HOST_DEV,"</span> <span class="string">--private-key</span> <span class="string">~/.key</span> <span class="string">-u</span> <span class="string">root</span> <span class="string">deploy/inDocker.yml</span></span><br></pre></td></tr></table></figure>
<p>其中，</p>
<ul>
<li><p>stages 段落表示有 有两个构建阶段，标识分别是build 和 deploy</p>
</li>
<li><p>build段落，stage域（或属性）的值为 build, 表示这段脚本是上述build的具体执行过程</p>
</li>
<li><p>tags域为 dind-v19， 表示本阶段构建选择tag为dind-v19的gitlab runner，这是事先已注册的一个允许构建docker镜像的执行器，且这个执行器自身也是docker容器，即 docker in docker (dind）</p>
</li>
<li><p>build的script段：docker build 构建镜像 -&gt; docker login 登录Docker Hub-&gt; docker push 推送镜像至Docker Hub</p>
</li>
<li><p>only master 表示只接受master分支更新后触发CI</p>
</li>
<li><p>ansible-docker阶段的作用是远程登录目标机器拉取镜像、创建并运行容器</p>
</li>
</ul>
]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>Gitlab</tag>
        <tag>CICD</tag>
      </tags>
  </entry>
  <entry>
    <title>Gitlab Runner</title>
    <url>/cicd/gitlab-runner/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<p>启动gitlab-runner（提供自动创建、销毁runner的服务）</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d --name gitlab-runner --restart always \</span><br><span class="line">  -v /srv/gitlab-runner/config:/etc/gitlab-runner \</span><br><span class="line">  -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">  gitlab/gitlab-runner:latest</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>注册runner</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gitlab-runner register -n \</span><br><span class="line">  --url http://gitlab.keep.com/ \</span><br><span class="line">  --registration-token your-token*** \</span><br><span class="line">  --executor docker \</span><br><span class="line">  --description <span class="string">"Docker in Docker Runner"</span> \</span><br><span class="line">  --docker-image alpine:latest \</span><br><span class="line">  --tag-list <span class="string">"dind-v19"</span></span><br></pre></td></tr></table></figure>
<p>查看注册后生成的/etc/gitlab-runner/config.toml：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="section">[[runners]]</span></span><br><span class="line">  name = "Docker in Docker Runner"</span><br><span class="line">  url = "http://gitlab.keep.com/"</span><br><span class="line">  token = "xxxxx"</span><br><span class="line">  executor = "docker"</span><br><span class="line">  <span class="section">[runners.custom_build_dir]</span></span><br><span class="line">  <span class="section">[runners.docker]</span></span><br><span class="line">    tls_verify = false</span><br><span class="line">    image = "alpine:latest"</span><br><span class="line">    privileged = false</span><br><span class="line">    disable_entrypoint_overwrite = false</span><br><span class="line">    oom_kill_disable = false</span><br><span class="line">    disable_cache = false</span><br><span class="line">    volumes = ["/cache"]</span><br><span class="line">    shm_size = 0</span><br><span class="line">  <span class="section">[runners.cache]</span></span><br><span class="line">    <span class="section">[runners.cache.s3]</span></span><br><span class="line">    <span class="section">[runners.cache.gcs]</span></span><br><span class="line">  <span class="section">[runners.custom]</span></span><br><span class="line">    run_exec = ""</span><br></pre></td></tr></table></figure>
<p>gitlab cicd日志：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Running with gitlab-runner 12.1.0 (de7731dd)</span><br><span class="line">  on Docker <span class="keyword">in</span> Docker Runner PdsMyiEk</span><br><span class="line">Using Docker executor with image docker:stable ...</span><br><span class="line">Pulling docker image docker:stable ...</span><br><span class="line">Using docker image sha256:9a38a85b1e4e7bb53b7c7cc45afff6ba7b1cdfe01b9738f36a3b4ad0cdb10b00 <span class="keyword">for</span> docker:stable ...</span><br><span class="line">Running on runner-PdsMyiEk-project-238-concurrent-0 via 521aa7f3c946...</span><br><span class="line">Fetching changes...</span><br><span class="line">Initialized empty Git repository <span class="keyword">in</span> /builds/devops/docs/.git/</span><br><span class="line">Created fresh repository.</span><br><span class="line">From http://lzzeng.keep.com/devops/docs</span><br><span class="line"></span><br><span class="line">- [new branch]      master     -&gt; origin/master</span><br><span class="line">  Checking out 78455dad as master...</span><br><span class="line"></span><br><span class="line">Skipping Git submodules setup</span><br><span class="line">$ docker info</span><br><span class="line">Client:</span><br><span class="line"> Debug Mode: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line">ERROR: Cannot connect to the Docker daemon at tcp://docker:2375. Is the docker daemon running?</span><br><span class="line">errors pretty printing info</span><br><span class="line">ERROR: Job failed: <span class="built_in">exit</span> code 1</span><br></pre></td></tr></table></figure>
<p>要支持docker in docker，改为：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="section">[[runners]]</span></span><br><span class="line">  name = "Docker in Docker Runner"</span><br><span class="line">  url = "http://lzzeng.keep.com/"</span><br><span class="line">  token = "PdsMyiEkyfbPsVZgboPd"</span><br><span class="line">  executor = "docker"</span><br><span class="line">  <span class="section">[runners.custom_build_dir]</span></span><br><span class="line">  <span class="section">[runners.docker]</span></span><br><span class="line">    tls_verify = false</span><br><span class="line">    image = "alpine:latest"</span><br><span class="line">    privileged = true</span><br><span class="line">    disable_entrypoint_overwrite = false</span><br><span class="line">    oom_kill_disable = false</span><br><span class="line">    disable_cache = false</span><br><span class="line">    volumes = ["/cache", "/var/run/docker.sock:/var/run/docker.sock", "/etc/default/docker:/etc/default/docker", "/etc/docker/daemon.json:/etc/docker/daemon.json"]</span><br><span class="line">    shm_size = 0</span><br><span class="line">  <span class="section">[runners.cache]</span></span><br><span class="line">    <span class="section">[runners.cache.s3]</span></span><br><span class="line">    <span class="section">[runners.cache.gcs]</span></span><br><span class="line">  <span class="section">[runners.custom]</span></span><br><span class="line">    run_exec = ""</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>Gitlab</tag>
        <tag>CICD</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins API 使用示例——shell篇(2/2)</title>
    <url>/cicd/how-to-use-jenkins-api-in-shell-part2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<p>环境：Jenkins V2.150.1</p>
<h3 id="获取所有job名称"><a href="#获取所有job名称" class="headerlink" title="获取所有job名称"></a>获取所有job名称</h3><p>命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取crumb</span></span><br><span class="line">crumb=$(curl -u <span class="string">"<span class="variable">$jenkins_user</span>:<span class="variable">$jenkins_password</span>"</span> <span class="variable">$jenkins_url</span>/crumbIssuer/api/xml?xpath=concat\(//crumbRequestField,%22:%22,//crumb\))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取job列表</span></span><br><span class="line">curl -sX GET <span class="string">"<span class="variable">$jenkins_url</span>/api/json?pretty=true"</span> -H <span class="string">"<span class="variable">$crumb</span>"</span> -u <span class="string">"<span class="variable">$jenkins_user</span>:<span class="variable">$jenkins_password</span>"</span> |grep <span class="string">'"url"'</span> |grep <span class="string">'/job/'</span> |sed -e <span class="string">'s@^.*job/\(.*\)/.*$@\1@'</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>示例：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">[root@lzzeng opt]#curl -sX GET 'http://188.131.xxx.xxx:8088/jenkins/api/json?pretty=true' -H Jenkins-Crumb:a1b3b82a61bf4672e6d9003de37xxxxx -u "<span class="formula">$jenkins_user:$</span>jenkins_password" |grep '"url"' |grep '/job/' |sed -e 's@^.*job/<span class="tag">\<span class="name">(</span></span>.*<span class="tag">\<span class="name">)</span></span>/.*<span class="formula">$@<span class="tag">\</span>1@'</span></span><br><span class="line"><span class="formula">test_job</span></span><br><span class="line"><span class="formula">test_job_with_parameter</span></span><br></pre></td></tr></table></figure>
<h3 id="构建job"><a href="#构建job" class="headerlink" title="构建job"></a>构建job</h3><p>命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 无参数构建</span></span><br><span class="line">curl -sX POST <span class="string">"<span class="variable">$jenkins_url</span>/job/<span class="variable">$job_name</span>/build"</span> -u <span class="string">"<span class="variable">$jenkins_user</span>:<span class="variable">$jenkins_password</span>"</span> -H <span class="string">"<span class="variable">$crumb</span>"</span></span><br><span class="line"><span class="comment"># 带参数构建</span></span><br><span class="line">curl -sX POST <span class="string">"<span class="variable">$jenkins_url</span>/job/<span class="variable">$job_name</span>/buildWithParameters"</span> -u <span class="string">"<span class="variable">$jenkins_user</span>:<span class="variable">$jenkins_password</span>"</span> -H <span class="string">"<span class="variable">$crumb</span>"</span> -d <span class="variable">$parameter_name</span>=<span class="variable">$parameter_value</span></span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">[root@lzzeng opt]# curl -sX POST http://188.131.xxx.xxx:8088/jenkins/job/test_job/build -u "<span class="formula">$jenkins_user:$</span>jenkins_password" -H Jenkins-Crumb:a1b3b82a61bf4672e6d9003de37xxxxx</span><br><span class="line">[root@lzzeng opt]# curl -sX POST http://188.131.xxx.xxx:8088/jenkins/job/test_job_with_parameter/buildWithParameters -u "<span class="formula">$jenkins_user:$</span>jenkins_password" -H Jenkins-Crumb:a1b3b82a61bf4672e6d9003de37xxxxx -d param1=/var -d param2=/srv</span><br><span class="line">[root@lzzeng opt]#</span><br></pre></td></tr></table></figure>
<p>查看Jenkins，可以看到参数传递正确：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2018/1546328035535.png" alt="1546328035535"></p>
<h3 id="禁用job"><a href="#禁用job" class="headerlink" title="禁用job"></a>禁用job</h3><p>命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -sX POST <span class="string">"<span class="variable">$jenkins_url</span>/job/<span class="variable">$job_name</span>/disable"</span> -u <span class="string">"<span class="variable">$jenkins_user</span>:<span class="variable">$jenkins_password</span>"</span> -H <span class="string">"<span class="variable">$crumb</span>"</span></span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">[root@lzzeng opt]# curl -sX POST http://188.131.xxx.xxx:8088/jenkins/job/test_job_with_parameter/disable -u "<span class="formula">$jenkins_user:$</span>jenkins_password" -H Jenkins-Crumb:a1b3b82a61bf4672e6d9003de37xxxxx</span><br><span class="line">[root@lzzeng opt]#</span><br></pre></td></tr></table></figure>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2018/1546326537132.png" alt="1546326537132"></p>
<h3 id="获取构建结果"><a href="#获取构建结果" class="headerlink" title="获取构建结果"></a>获取构建结果</h3><p>命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 最近一次构建结果</span></span><br><span class="line">curl -sX POST <span class="string">"<span class="variable">$jenkins_url</span>/job/<span class="variable">$job_name</span>/lastBuild/api/json?pretty=true"</span> -u <span class="string">"<span class="variable">$jenkins_user</span>:<span class="variable">$jenkins_password</span>"</span> -H <span class="string">"<span class="variable">$crumb</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最近一次成功的构建结果</span></span><br><span class="line">curl -sX POST <span class="string">"<span class="variable">$jenkins_url</span>/job/<span class="variable">$job_name</span>/lastSuccessfulBuild/api/json?pretty=true"</span> -u <span class="string">"<span class="variable">$jenkins_user</span>:<span class="variable">$jenkins_password</span>"</span> -H <span class="string">"<span class="variable">$crumb</span>"</span></span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">[root@lzzeng opt]# curl -sX POST http://188.131.xxx.xxx:8088/jenkins/job/test_job_with_parameter/lastBuild/api/json?pretty=true -u "<span class="formula">$jenkins_user:$</span>jenkins_password" -H Jenkins-Crumb:a1b3b82a61bf4672e6d9003de37xxxxx</span><br></pre></td></tr></table></figure>
<p>如果要获取插件的结果，可以尝试添加请求参数<code>depth=2</code>，即变成<code>api/json?pretty=true&amp;depth=2</code></p>
<hr>
<p>(End)</p>
]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>CICD</tag>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins API 使用示例——shell篇(1/2)</title>
    <url>/cicd/how-to-use-jenkins-api-in-shell/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<p>环境：Jenkins V2.150.1</p>
<h3 id="检测Job是否存在"><a href="#检测Job是否存在" class="headerlink" title="检测Job是否存在"></a>检测Job是否存在</h3><p>命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -X POST [-H <span class="string">"Content-Type:application/xml"</span>] <span class="string">"<span class="variable">$jenkins_url</span>/checkJobName?value=<span class="variable">$job_name</span>"</span> --user <span class="string">"<span class="variable">$jenkins_user</span>:<span class="variable">$jenkins_password</span>"</span></span><br></pre></td></tr></table></figure>
<p>其中，jenkins_password一般是使用jenkins_user的Jenkins API token，直接用密码也可以。</p>
<a id="more"></a>
<p>示例：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">[root@lzzeng ~]# curl -X POST -H "Content-Type:application/xml" "http://188.131.xxx.xxx:8088/jenkins/checkJobName?value=test_job" --user "<span class="formula">$jenkins_user:$</span>jenkins_password"</span><br><span class="line">&lt;!doctype html&gt;&lt;html lang="en"&gt;&lt;head&gt;&lt;title&gt;HTTP Status 403 – Forbidden&lt;/title&gt;...&lt;/head&gt;&lt;body&gt;&lt;h1&gt;HTTP Status 403 – Forbidden&lt;/h1&gt;&lt;hr class="line" /&gt;&lt;p&gt;&lt;b&gt;Type&lt;/b&gt; Status Report&lt;/p&gt;&lt;p&gt;&lt;b&gt;Message&lt;/b&gt; No valid crumb was included in the request&lt;/p&gt;&lt;p&gt;&lt;b&gt;Description&lt;/b&gt; The server understood the request but refuses to authorize it.&lt;/p&gt;&lt;hr class="line" /&gt;&lt;h3&gt;Apache Tomcat/9.0.14&lt;/h3&gt;&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>显示<code>HTTP Status 403 – Forbidden</code>，原因是Jenkins开启了<code>Prevent Cross Site Request Forgery exploits</code>，即<code>防止跨站请求伪造</code>。</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2018/1546149521653.png" alt="1546149521653"></p>
<p>取消勾选，重试：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">[root@lzzeng ~]# curl -X POST -H "Content-Type:application/xml" "http://188.131.xxx.xxx:8088/jenkins/checkJobName?value=test_job" --user "<span class="formula">$jenkins_user:$</span>jenkins_password"</span><br><span class="line">&lt;div class=error&gt;&lt;img src='/jenkins/static/141801f8/images/none.gif' height=16 width=1&gt;A job already exists with the name ‘test_job’&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>可以看出，Jenkins上已存在名称为<code>test_job</code>的job。</p>
<p>如果检测的job不存在：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">[root@lzzeng ~]# curl -X POST -H "Content-Type:application/xml" "http://188.131.xxx.xxx:8088/jenkins/checkJobName?value=test_job222" --user "<span class="formula">$jenkins_user:$</span>jenkins_password"</span><br><span class="line">&lt;div/&gt;[root@lzzeng ~]#</span><br></pre></td></tr></table></figure>
<p>输出为：<code>&lt;div/&gt;</code>。</p>
<h3 id="检测View是否存在"><a href="#检测View是否存在" class="headerlink" title="检测View是否存在"></a>检测View是否存在</h3><p>命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -X POST [-H <span class="string">"Content-Type:application/xml"</span>] <span class="string">"<span class="variable">$jenkins_url</span>/checkViewName?value=<span class="variable">$view_name</span>"</span> --user <span class="string">"<span class="variable">$jenkins_user</span>:<span class="variable">$jenkins_password</span>"</span></span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">[root@lzzeng ~]# curl -X POST -H "Content-Type:application/xml" "http://188.131.xxx.xxx:8088/jenkins/checkViewName?value=test_view" --user "<span class="formula">$jenkins_user:$</span>jenkins_password"</span><br><span class="line">&lt;div class=error&gt;&lt;img src='/jenkins/static/141801f8/images/none.gif' height=16 width=1&gt;A view already exists with the name &amp;quot;test_view&amp;quot;&lt;/div&gt;[root@lzzeng ~]#</span><br></pre></td></tr></table></figure>
<p>当view不存在时，和job不存在一样也是输出：<code>&lt;div/&gt;</code>。</p>
<p>据此，编写一段脚本：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">checkJobView</span></span>()&#123;</span><br><span class="line">    <span class="comment"># Usage: </span></span><br><span class="line">    <span class="comment"># 1. checkJobView "job/&lt;job_name&gt;"</span></span><br><span class="line">    <span class="comment"># 2. checkJobView "view/&lt;view_name&gt;"</span></span><br><span class="line"></span><br><span class="line">    para=<span class="variable">$1</span></span><br><span class="line">    prefix=<span class="variable">$&#123;para%%/*&#125;</span></span><br><span class="line">    target=<span class="variable">$&#123;para##*/&#125;</span></span><br><span class="line">    method=$([ <span class="string">"<span class="variable">$prefix</span>"</span> = <span class="string">"job"</span> ] &amp;&amp; <span class="built_in">echo</span> checkJobName || <span class="built_in">echo</span> checkViewName)</span><br><span class="line">    crumb=$(curl -s -u <span class="string">"<span class="variable">$jenkins_user</span>:<span class="variable">$jenkins_password</span>"</span> <span class="variable">$jenkins_url</span>/crumbIssuer/api/xml?xpath=concat\(//crumbRequestField,%22:%22,//crumb\))</span><br><span class="line">    resp=$(curl -sX POST <span class="string">"<span class="variable">$jenkins_url</span>/<span class="variable">$method</span>?value=<span class="variable">$target</span>"</span> -u <span class="string">"<span class="variable">$jenkins_user</span>:<span class="variable">$jenkins_password</span>"</span> -H <span class="string">"<span class="variable">$crumb</span>"</span>)</span><br><span class="line">    <span class="built_in">test</span> <span class="string">"<span class="variable">$resp</span>"</span> != <span class="string">"&lt;div/&gt;"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>作如下调用：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">jenkins_url=http://188.131.xxx.xxx:8088/jenkins</span><br><span class="line">jenkins_user=<span class="variable">$jenkins_user</span></span><br><span class="line">jenkins_password=<span class="variable">$jenkins_password</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> checkJobView <span class="variable">$@</span>; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"exists"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"not exist"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>脚本文件名为checkJobView.sh，测试结果如下：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">[root@lzzeng opt]# sh checkJobView.sh view/test_view</span><br><span class="line">exists</span><br><span class="line">[root@lzzeng opt]# sh checkJobView.sh view/test_view222</span><br><span class="line">not exist</span><br><span class="line">[root@lzzeng opt]# sh checkJobView.sh job/test_job</span><br><span class="line">exists</span><br><span class="line">[root@lzzeng opt]# sh checkJobView.sh job/test_job222</span><br><span class="line">not exist</span><br></pre></td></tr></table></figure>
<p>其中，test_view是已存在的视图，test_job是已存在的任务，所以输出表示正确。</p>
<h3 id="备份Job"><a href="#备份Job" class="headerlink" title="备份Job"></a>备份Job</h3><p>命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -s -X GET <span class="string">"<span class="variable">$url_of_job_config_xml</span>"</span> -o <span class="string">"<span class="variable">$target_xml</span>"</span> --user <span class="string">"<span class="variable">$jenkins_user</span>:<span class="variable">$jenkins_password</span>"</span></span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">[root@lzzeng opt]# curl -sX GET "http://188.131.xxx.xxx:8088/jenkins/job/test_job/config.xml" -o test_job.xml --user "<span class="formula">$jenkins_user:$</span>jenkins_password"</span><br><span class="line">[root@lzzeng opt]# ls -lrt</span><br><span class="line">...</span><br><span class="line">-rw-r--r--  1 root root  837 Dec 30 14:46 checkJobView.sh</span><br><span class="line">-rw-r--r--  1 root root 1442 Dec 30 15:06 test_job.xml</span><br><span class="line">[root@lzzeng opt]# diff /root/.jenkins/jobs/test_job/config.xml test_job.xml </span><br><span class="line">[root@lzzeng opt]#</span><br></pre></td></tr></table></figure>
<p>可以看出，备份下来的test_job.xml与.jenkins配置目录下相应的config.xml一致。</p>
<h3 id="还原Job"><a href="#还原Job" class="headerlink" title="还原Job"></a>还原Job</h3><p>命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -sX POST <span class="string">"<span class="variable">$jenkins_url</span>/createItem?name=<span class="variable">$job_name</span>"</span> --data_binary <span class="string">"@<span class="variable">$target_xml</span>"</span> -H <span class="string">"ContentType:text/xml"</span> --user <span class="string">"<span class="variable">$jenkins_user</span>:<span class="variable">$jenkins_password</span>"</span></span><br></pre></td></tr></table></figure>
<p>假设Jenkins端已经删除（或移动）了test_job这个任务，还原如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -sX POST <span class="string">"http://188.131.xxx.xxx:8088/createItem?name=test_job"</span> --data_binary <span class="string">"@test_job.xml"</span> -H <span class="string">"ContentType:text/xml"</span> --user <span class="string">"<span class="variable">$jenkins_user</span>:<span class="variable">$jenkins_password</span>"</span></span><br></pre></td></tr></table></figure>
<p>在更低一些的Jenkins版本中，比如V2.72，此命令是生效的。但对于当前所用的Jenkins V2.150.1版本，虽然已经禁用了CSRF安全防护，此命令仍失败，错误信息如下：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">Monitor/jenkins.security.csrf.CSRFAdministrativeMonitor/disable"&gt;&lt;input name="Submit" type="submit" value="Dismiss" class="submit-button primary" /&gt;&lt;/form&gt;You have not configured the CSRF issuer. This could be a security issue. For more information, please refer to &lt;a href="https://jenkins.io/redirect/csrf-protection" target="_blank"&gt;this page&lt;/a&gt;.&lt;p&gt;&lt;/p&gt;You can change the current configuration using the Security section &lt;a href="/jenkins/configureSecurity"&gt;CSRF Protection&lt;/a&gt;.&lt;/div&gt;&lt;/div&gt;&lt;p style="text-align: center; margin: 10px 0 0 0;"&gt;&lt;a onclick="document.location.href='/jenkins/manage';" href="/jenkins/manage"&gt;Manage Jenkins&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;script type="text/javascript"&gt;</span><br><span class="line">            document.getElementById("header").appendChild(document.getElementById("visible-am-container"));</span><br><span class="line">        &lt;/script&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/footer&gt;&lt;/body&gt;&lt;/html&gt;[root@lzzeng opt]#</span><br></pre></td></tr></table></figure>
<p>其中提示：<code>You have not configured the CSRF issuer</code>。其实，出于安全考虑，禁用<code>防止跨站请求伪造</code>并不值得提倡，先恢复【图-1】的默认安全设置再试一次：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">[root@lzzeng opt]# curl -sX POST "http://188.131.xxx.xxx:8088/jenkins/createItem?name=test_job" --data-binary "@test_job.xml" -H "ContentType:text/xml" --user "<span class="formula">$jenkins_user:$</span>jenkins_password"</span><br><span class="line">&lt;!doctype html&gt;&lt;html lang="en"&gt;&lt;head&gt;&lt;title&gt;HTTP Status 403 – Forbidden&lt;/title&gt;...&lt;/head&gt;&lt;body&gt;&lt;h1&gt;HTTP Status 403 – Forbidden&lt;/h1&gt;&lt;hr class="line" /&gt;&lt;p&gt;&lt;b&gt;Type&lt;/b&gt; Status Report&lt;/p&gt;&lt;p&gt;&lt;b&gt;Message&lt;/b&gt; No valid crumb was included in the request&lt;/p&gt;&lt;p&gt;&lt;b&gt;Description&lt;/b&gt; The server understood the request but refuses to authorize it.&lt;/p&gt;&lt;hr class="line" /&gt;&lt;h3&gt;Apache Tomcat/9.0.14&lt;/h3&gt;&lt;/body&gt;&lt;/html&gt;[root@lzzeng opt]#</span><br></pre></td></tr></table></figure>
<p>此时，错误信息变了，提示：<code>No valid crumb was included in the request</code>，解决如下：</p>
<p>先<strong>获取crumb </strong>：</p>
<p>命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -u <span class="string">"<span class="variable">$jenkins_user</span>:<span class="variable">$jenkins_password</span>"</span> <span class="string">"http://188.131.xxx.xxx:8088/jenkins/crumbIssuer/api/json"</span></span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -u <span class="string">"<span class="variable">$jenkins_user</span>:<span class="variable">$jenkins_password</span>"</span> <span class="string">"http://188.131.xxx.xxx:8088/jenkins/crumbIssuer/api/xml"</span></span><br></pre></td></tr></table></figure>
<p>会有类似如下的输出：</p>
<ul>
<li>json形式</li>
</ul>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">&#123;"_class":"hudson.security.csrf.DefaultCrumbIssuer","crumb":"a1b3b82a61bf4672e6d9003de37xxxxx","crumbRequestField":"Jenkins-Crumb"&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>xml形式</li>
</ul>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">&lt;defaultCrumbIssuer _class='hudson.security.csrf.DefaultCrumbIssuer'&gt;&lt;crumb&gt;a1b3b82a61bf4672e6d9003de37xxxxx&lt;/crumb&gt;&lt;crumbRequestField&gt;Jenkins-Crumb&lt;/crumbRequestField&gt;&lt;/defaultCrumbIssuer&gt;</span><br></pre></td></tr></table></figure>
<p>记下crumbRequestField字段和crumb字段的值，正确的请求需要添加一个Header：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-H &quot;crumbRequestField字段值:crumb字段值&quot;</span><br></pre></td></tr></table></figure>
<p>最终修改后的命令如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -sX POST <span class="string">"http://188.131.xxx.xxx:8088/jenkins/createItem?name=test_job"</span> --data-binary <span class="string">"@test_job.xml"</span> -H <span class="string">"Jenkins-Crumb:a1b3b82a61bf4672e6d9003de37xxxxx"</span> -H <span class="string">"Content-Type:text/xml"</span> -u <span class="string">"<span class="variable">$jenkins_user</span>:<span class="variable">$jenkins_password</span>"</span></span><br></pre></td></tr></table></figure>
<h3 id="备份View"><a href="#备份View" class="headerlink" title="备份View"></a>备份View</h3><p>命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -s -X GET <span class="string">"<span class="variable">$url_of_view_config_xml</span>"</span> -o <span class="string">"<span class="variable">$target_xml</span>"</span> [-H <span class="string">"<span class="variable">$crumbRequestField</span>:<span class="variable">$crumb</span>"</span>] -u <span class="string">"<span class="variable">$jenkins_user</span>:<span class="variable">$jenkins_password</span>"</span></span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -sX GET <span class="string">"http://188.131.xxx.xxx:8088/jenkins/view/test_view/config.xml"</span> -o test_view.xml -u <span class="string">"<span class="variable">$jenkins_user</span>:<span class="variable">$jenkins_password</span>"</span></span><br></pre></td></tr></table></figure>
<h3 id="还原View"><a href="#还原View" class="headerlink" title="还原View"></a>还原View</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -sX POST <span class="string">"<span class="variable">$jenkins_url</span>/createView?name=<span class="variable">$view_name</span>"</span> --data-binary <span class="string">"@<span class="variable">$target_xml</span>"</span> -H <span class="string">"ContentType:text/xml"</span> -H <span class="string">"<span class="variable">$crumbRequestField</span>:<span class="variable">$crumb</span>"</span> -u <span class="string">"<span class="variable">$jenkins_user</span>:<span class="variable">$jenkins_password</span>"</span></span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -sX POST <span class="string">"http://188.131.xxx.xxx:8088/jenkins/createView?name=test_view2"</span> --data-binary <span class="string">"@test_view.xml"</span> -H <span class="string">"Jenkins-Crumb:a1b3b82a61bf4672e6d9003de37xxxxx"</span> -H <span class="string">"Content-Type:text/xml"</span> --user <span class="string">"<span class="variable">$jenkins_user</span>:<span class="variable">$jenkins_password</span>"</span></span><br></pre></td></tr></table></figure>
<h3 id="将Job添加到View"><a href="#将Job添加到View" class="headerlink" title="将Job添加到View"></a>将Job添加到View</h3><p>命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -sX POST <span class="string">"<span class="variable">$jenkins_url</span>/view/<span class="variable">$view_name</span>/addJobToView?name=<span class="variable">$jobName</span>"</span> -H <span class="string">"<span class="variable">$crumbRequestField</span>:<span class="variable">$crumb</span>"</span> -u <span class="string">"<span class="variable">$jenkins_user</span>:<span class="variable">$jenkins_password</span>"</span></span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -sX POST <span class="string">"http://188.131.xxx.xxx:8088/jenkins/view/test_view2/addJobToView?name=test_job"</span> -u <span class="string">"<span class="variable">$jenkins_user</span>:<span class="variable">$jenkins_password</span>"</span> -H <span class="string">"Jenkins-Crumb:a1b3b82a61bf4672e6d9003de37xxxxx"</span></span><br></pre></td></tr></table></figure>
<h3 id="删除Job"><a href="#删除Job" class="headerlink" title="删除Job"></a>删除Job</h3><p>命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -sX POST <span class="string">"<span class="variable">$jenkins_url</span>/job/<span class="variable">$job_name</span>/doDelete"</span> -H <span class="string">"<span class="variable">$crumbRequestField</span>:<span class="variable">$crumb</span>"</span> -u <span class="string">"<span class="variable">$jenkins_user</span>:<span class="variable">$jenkins_password</span>"</span></span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -sX POST <span class="string">"http://188.131.xxx.xxx:8088/jenkins/job/test_job/doDelete"</span> -u <span class="string">"<span class="variable">$jenkins_user</span>:<span class="variable">$jenkins_password</span>"</span> -H <span class="string">"Jenkins-Crumb:a1b3b82a61bf4672e6d9003de37xxxxx"</span></span><br></pre></td></tr></table></figure>
<h3 id="删除View"><a href="#删除View" class="headerlink" title="删除View"></a>删除View</h3><p>命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -sX POST <span class="string">"<span class="variable">$jenkins_url</span>/view/<span class="variable">$view_name</span>/doDelete"</span> -H <span class="string">"<span class="variable">$crumbRequestField</span>:<span class="variable">$crumb</span>"</span> -u <span class="string">"<span class="variable">$jenkins_user</span>:<span class="variable">$jenkins_password</span>"</span></span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -sX POST <span class="string">"http://188.131.xxx.xxx:8088/jenkins/view/test_view2/doDelete"</span> -u <span class="string">"<span class="variable">$jenkins_user</span>:<span class="variable">$jenkins_password</span>"</span> -H <span class="string">"Jenkins-Crumb:a1b3b82a61bf4672e6d9003de37xxxxx"</span></span><br></pre></td></tr></table></figure>
<p>删除View的时候，不会删除其中的Job。</p>
<hr>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>以上命令，汇总如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取crumb</span></span><br><span class="line">curl -u <span class="string">"<span class="variable">$jenkins_user</span>:<span class="variable">$jenkins_password</span>"</span> <span class="string">"<span class="variable">$jenkins_url</span>/crumbIssuer/api/&#123;xml|json&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印$crumbRequestField:$crumb</span></span><br><span class="line">curl -u <span class="string">"<span class="variable">$jenkins_user</span>:<span class="variable">$jenkins_password</span>"</span> <span class="variable">$jenkins_url</span>/crumbIssuer/api/xml?xpath=concat\(//crumbRequestField,%22:%22,//crumb\)  <span class="comment"># 请求路径不能加引号，%22是双引号"的urlencode</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检测job或view</span></span><br><span class="line">curl -X POST <span class="string">"<span class="variable">$jenkins_url</span>/&#123;checkJobName|checkViewName&#125;?value=<span class="variable">$target_name</span>"</span> -H <span class="string">"<span class="variable">$crumbRequestField</span>:<span class="variable">$crumb</span>"</span> -u <span class="string">"<span class="variable">$jenkins_user</span>:<span class="variable">$jenkins_password</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份job或view</span></span><br><span class="line">curl -s -X GET <span class="string">"<span class="variable">$jenkins_url</span>/&#123;job|view&#125;/<span class="variable">$target_name</span>/config.xml"</span> -o <span class="string">"<span class="variable">$target_xml_path</span>"</span> [-H <span class="string">"<span class="variable">$crumbRequestField</span>:<span class="variable">$crumb</span>"</span>] -u <span class="string">"<span class="variable">$jenkins_user</span>:<span class="variable">$jenkins_password</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 还原job或view</span></span><br><span class="line">curl -sX POST <span class="string">"<span class="variable">$jenkins_url</span>/&#123;createItem|createView&#125;?name=<span class="variable">$target_name</span>"</span> --data-binary <span class="string">"@<span class="variable">$target_xml_path</span>"</span> -H <span class="string">"ContentType:text/xml"</span> -H <span class="string">"<span class="variable">$crumbRequestField</span>:<span class="variable">$crumb</span>"</span> -u <span class="string">"<span class="variable">$jenkins_user</span>:<span class="variable">$jenkins_password</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加job到view中</span></span><br><span class="line">curl -sX POST <span class="string">"<span class="variable">$jenkins_url</span>/view/<span class="variable">$view_name</span>/addJobToView?name=<span class="variable">$jobName</span>"</span> -H <span class="string">"<span class="variable">$crumbRequestField</span>:<span class="variable">$crumb</span>"</span> -u <span class="string">"<span class="variable">$jenkins_user</span>:<span class="variable">$jenkins_password</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除job或view</span></span><br><span class="line">curl -sX POST <span class="string">"<span class="variable">$jenkins_url</span>/&#123;job|view&#125;/<span class="variable">$target_name</span>/doDelete"</span> -H <span class="string">"<span class="variable">$crumbRequestField</span>:<span class="variable">$crumb</span>"</span> -u <span class="string">"<span class="variable">$jenkins_user</span>:<span class="variable">$jenkins_password</span>"</span></span><br></pre></td></tr></table></figure>
<hr>
<p>(End)</p>
]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>CICD</tag>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>通过Gitlab发布Gitbook</title>
    <url>/cicd/publish-gitbook/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/publish-gitbook.assets/1578983279168.png" alt="发布效果图"></p>
<a id="more"></a>
<h2 id="安装git客户端"><a href="#安装git客户端" class="headerlink" title="安装git客户端"></a>安装git客户端</h2><p>Windows版Git客户端：<a href="https://gitforwindows.org/" rel="external nofollow noopener noreferrer" target="_blank">https://gitforwindows.org/</a></p>
<h2 id="创建gitbook项目docs"><a href="#创建gitbook项目docs" class="headerlink" title="创建gitbook项目docs"></a>创建gitbook项目docs</h2><p>gitbook项目docs的目录结构：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docs                 # 仓库根目录</span><br><span class="line">├── book.json        # gitbook配置文件</span><br><span class="line">├── deploy/          # 存放部署脚本</span><br><span class="line">├── .gitlab-ci.yml   # gitlab ci配置文件</span><br><span class="line">├── Dockerfile       # docker镜像编译脚本</span><br><span class="line">├── docs/            # 文档集中存放目录</span><br><span class="line">│   ├── assets/              # 图片目录</span><br><span class="line">│   ├── cicd/                # 持续集成</span><br><span class="line">│   ├── deployment/          # 应用部署</span><br><span class="line">│   ├── task-sheduling/      # 任务调度</span><br><span class="line">│   ├── config-management/   # 配置管理</span><br><span class="line">│   └── monitoring/          # 运维监控</span><br><span class="line">├── README.md    # 书籍首页</span><br><span class="line">├── styles/      # css文件</span><br><span class="line">└── SUMMARY.md   # 书籍目录文件</span><br></pre></td></tr></table></figure>
<h2 id="克隆gitbook项目"><a href="#克隆gitbook项目" class="headerlink" title="克隆gitbook项目"></a>克隆gitbook项目</h2><p>已安装好git客户端，空白处右键如图打开git客户端：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/publish-gitbook.assets/1578986400937.png" alt="打开git客户端"></p>
<p>git clone 项目文件到本地：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/publish-gitbook.assets/15789738968739.png" alt="git clone"></p>
<h2 id="添加一个文档"><a href="#添加一个文档" class="headerlink" title="添加一个文档"></a>添加一个文档</h2><p>以下在原项目的docs/else目录下添加一个文档<code>es-maximum-shards.md</code></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/publish-gitbook.assets/1578975378145.png" alt="添加文档"></p>
<p>并修改书籍目录</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/publish-gitbook.assets/1578987800016.png" alt="修改目录"></p>
<h2 id="添加修改、提交、推送"><a href="#添加修改、提交、推送" class="headerlink" title="添加修改、提交、推送"></a>添加修改、提交、推送</h2><ul>
<li>查看、添加改动</li>
</ul>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/publish-gitbook.assets/15789754833155.png" alt="查看"></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/publish-gitbook.assets/15789756132226.png" alt="添加改动"></p>
<ul>
<li><p>提交到本地版本库、推送到远程版本库（master分支）</p>
<p>git commit 提交时，”-m”参数写一点简明的备注信息。</p>
</li>
</ul>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/publish-gitbook.assets/15789758161982.png" alt="提交"></p>
<h2 id="自动构建、发布"><a href="#自动构建、发布" class="headerlink" title="自动构建、发布"></a>自动构建、发布</h2><p>git push成功之后，在gitlab上可以查看构建进度：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/publish-gitbook.assets/1578988387980.png" alt="构建进度"></p>
]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>CICD</tag>
        <tag>Gitbook</tag>
      </tags>
  </entry>
  <entry>
    <title>Ansible使用小结</title>
    <url>/config-management/ansible-intro/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/ansible-intro.assets/1550564146145.png" alt="Ansible官网"></p>
<p>​    正如<a href="https://www.ansible.com/" rel="external nofollow noopener noreferrer" target="_blank">Ansible官网</a>的标题“Ansible is Simple IT Automation”含义，Ansible简化了IT自动化的实现，是高效运维的一个重要工具。</p>
<p>​    Ansible的设计初衷就是在若干服务器上从零开始执行所有必需的配置与操作。例如，在启动Web 服务器之前先启动数据库，或者为了实现零停机升级，将Web 服务器逐一从负载均衡上摘除并升级。Ansible通过极简的模型来控制各种操作按照所需顺序执行。其它同类工具有：Chef、Puppet 及Saltstack。</p>
<a id="more"></a>
<h4 id="Ansible的主要特点"><a href="#Ansible的主要特点" class="headerlink" title="Ansible的主要特点"></a>Ansible的主要特点</h4><ul>
<li>基于Python语言实现，由Paramiko（Python的一个可并发连接ssh主机功能库），PyYAML和Jinja2（模板化）三个关键模块实现</li>
<li>模块化设计，ansible自身是一个核心组件，调用特定的模块来完成特定任务</li>
<li>基于SSH协议工作，免客户端，有两种认证方式：密码、公钥</li>
<li>使用yaml语言编排剧本，连续任务按先后设置顺序完成</li>
<li>是一个<strong>声明式</strong>的管理工具，在编写脚本时使用的是声明式语言</li>
</ul>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">声明式语言表示“期望目标是什么状态”，如果已经是则返回"ok"，否则改变目标状态并返回"changed"。</span><br></pre></td></tr></table></figure>
<ul>
<li>具有<strong>幂等性</strong>的特点，执行一次或多次，安装出来的环境是一样的</li>
</ul>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">HTTP/1.1中对“幂等性”的定义是：一次和多次请求某一个资源对于资源本身应该具有同样的结果（网络超时等问题除外）。</span><br><span class="line">也就是说，其任意多次执行对资源本身所产生的影响均与一次执行的影响相同。</span><br></pre></td></tr></table></figure>
<h4 id="Ansible架构图"><a href="#Ansible架构图" class="headerlink" title="Ansible架构图"></a>Ansible架构图</h4><p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/ansible-intro.assets/201621695411869.png" alt="Ansible架构图"></p>
<table>
<thead>
<tr>
<th style="text-align:left">组件</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">ansible core</td>
<td>ansible自身核心模块</td>
</tr>
<tr>
<td style="text-align:left">host inventory</td>
<td>主机清单，定义可管控的主机列表</td>
</tr>
<tr>
<td style="text-align:left">connection plugins</td>
<td>连接插件，一般默认基于ssh协议连接</td>
</tr>
<tr>
<td style="text-align:left">modules</td>
<td>core modules（自带的核心模块）、custom modules（自定义模块）</td>
</tr>
<tr>
<td style="text-align:left">playbooks</td>
<td>剧本，按照所设定编排的顺序执行命令</td>
</tr>
</tbody>
</table>
<h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4><p>​    在自动化运维方面，关于Ansible适用场景，，可以从与同类工具Saltstack对比的角度来理解。</p>
<p><strong>共同点</strong>：</p>
<ul>
<li><p>Ansible和SaltStack都是的目前最流行的自动化运维工具，能满足企业IT系统的自动化运维管理。这两个工具都是用python开发的，可以部署到不同的系统环境中和具有良好的二次开发特性。</p>
</li>
<li><p>在执行的命令的时候，Ansible和SaltStack都支持Ad-hoc操作模式，也可以支持将命令写入yaml格式文件中再批量执行。</p>
</li>
<li><p>在处理返回结果方面，Ansible和SaltStack的返回结果格式都是JSON格式，比较易懂和方便解析。</p>
</li>
</ul>
<p><strong>差异</strong>：</p>
<ul>
<li><p>响应速度：SaltStack更快，在文件传输方面快一个量级，但在批量脚本执行、多机器部署方面相近</p>
<p>  SaltStack的master和minion主机是通过ZeroMQ传输数据，而Ansible是通过标准SSH进行数据传输，SaltStack的响应速度要比Ansible快很多。标准SSH连接的时候比较耗费时间，ZeroMQ传输的速度会快很多，所以单单从响应速度方面考虑SaltStack会是更好的选择。但是在一般的运维场景下Ansible的响应速度也可以满足需求。<br>  有测试数据表明，在执行命令、分发文件、读取文件方面，SaltStack的响应速度是Ansible的10倍左右。但在批量脚本执行、多机器部署方面，二者速度相当。</p>
</li>
<li><p>安全性：Ansible更安全</p>
<p>  Ansible使用标准SSH连接传输数据，不需要在远程主机上启动守护进程，并且标准SSH数据传输本身就是加密传输，这样远程主机不容易被攻击。</p>
</li>
<li><p>自身运维：Ansible更友好</p>
<p>  Ansible和远端主机之间的通过标准SSH通信，远程主机上只需要运行SSH进程就可以进行运维操作，而SSH是机房主机中一般都安装和启动的进程，所以Ansible对机房运维不会增加过多的运维成本。</p>
</li>
</ul>
<p>​    综合以上，可以认为1000台以内的服务器自动化运维，使用Ansible做配置管理、应用部署、批量脚本执行等工作无需顾虑太多。</p>
<hr>
<h3 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h3><h4 id="常用模块"><a href="#常用模块" class="headerlink" title="常用模块"></a>常用模块</h4><p>​    Ansible的常用模块主要有以下十来个：</p>
<table>
<thead>
<tr>
<th>模块名称</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>ping</td>
<td>尝试连接主机，如果测试成功会返回”pong”</td>
</tr>
<tr>
<td>command</td>
<td>在远程节点执行命令</td>
</tr>
<tr>
<td>yum</td>
<td>使用yum软件包管理工具管理软件包</td>
</tr>
<tr>
<td>shell</td>
<td>和command模块类似，执行命令，支持变量等符号</td>
</tr>
<tr>
<td>cron</td>
<td>管理定时任务</td>
</tr>
<tr>
<td>service</td>
<td>管理程序服务</td>
</tr>
<tr>
<td>file</td>
<td>设置文件属性</td>
</tr>
<tr>
<td>copy</td>
<td>复制本地文件到远程主机</td>
</tr>
<tr>
<td>script</td>
<td>传送本地的一个脚本并在远程主机上执行</td>
</tr>
<tr>
<td>setup</td>
<td>获取远程主机的参数信息</td>
</tr>
<tr>
<td>user</td>
<td>管理用户账户</td>
</tr>
<tr>
<td>group</td>
<td>添加或者删除用户组</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
</tr>
</tbody>
</table>
<h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>​    Ansible配置是以ini格式存储数据的，在Ansible中，几乎所有配置都可以通过Playbook或环境变量来重新赋值。加载配置文件的优先顺序如下：</p>
<ul>
<li><p>ANSIBLE_CONFIG：优先查找环境变量ANSIBLE_CONFIG指向的配置文件</p>
</li>
<li><p>./ansible.cfg：当前目录下的ansible.cfg配置文件</p>
</li>
<li><p>~/.ansible.cfg：当前用户home目录下的.ansible.cfg配置文件</p>
</li>
<li><p>/etc/ansible/ansible.cfg：安装ansible生成的默认配置文件</p>
<p>Ansible按顺序查找并应用最先找到的ansible配置。ansible.cfg中的配置可被playbook中的自定义配置覆盖</p>
</li>
</ul>
<p>常用的配置参数：</p>
<table>
<thead>
<tr>
<th>配置项</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>inventory</td>
<td>资源清单文件，就是一些Ansible需要连接管理的主机列表</td>
</tr>
<tr>
<td>library</td>
<td>Ansible模块的安装目录</td>
</tr>
<tr>
<td>forks</td>
<td>默认并发进程数5，可根据控制主机的性能和被管理节点的数量调整</td>
</tr>
<tr>
<td>sudo_user</td>
<td>执行命令的用户，可在playbook中重新设置</td>
</tr>
<tr>
<td>remote_port</td>
<td>SSH连接端口一般是22，如有个别特殊的，可在inventory中单独指定</td>
</tr>
<tr>
<td>host_key_checking</td>
<td>是否检查公钥，一般设置为false</td>
</tr>
<tr>
<td>timeout</td>
<td>SSH连接的超时间隔，默认20s</td>
</tr>
<tr>
<td>log_path</td>
<td>ansible日志路径</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
</tr>
</tbody>
</table>
<h4 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h4><ul>
<li>加载自己的配置文件，默认<code>/etc/ansible/ansible.cfg</code></li>
<li>查找对应的主机配置文件，找到要执行的主机或者组</li>
<li>加载自己对应的模块文件，如 command</li>
<li>通过ansible将模块或命令生成对应的临时py文件(python脚本)， 并将该文件传输至远程服务器</li>
<li>对应执行用户的家目录的<code>.ansible/tmp/XXX/XXX.PY</code>文件</li>
<li>给文件 +x 执行权限</li>
<li>执行并返回结果</li>
<li>删除临时py文件，<code>sleep 0</code>退出</li>
</ul>
<h4 id="剧本（Playbook）"><a href="#剧本（Playbook）" class="headerlink" title="剧本（Playbook）"></a>剧本（Playbook）</h4><p><strong>playbook的构成</strong>：</p>
<ul>
<li>Target section：定义将要执行 playbook 的远程主机组</li>
<li>Variable section：定义 playbook 运行时需要使用的变量</li>
<li>Task section：定义将要在远程主机上执行的任务列表</li>
<li>Handler section：定义 task 执行完成以后需要调用的任务</li>
</ul>
<p>一般所需的<strong>目录层</strong>：</p>
<ul>
<li>vars：变量层</li>
<li>tasks：任务层</li>
<li>handlers：触发条件</li>
<li>files：文件</li>
<li>template：模板</li>
</ul>
<h3 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h3><p>​    以root用户安装ansible为例，方式如下：</p>
<h4 id="1-从Github获取源码安装"><a href="#1-从Github获取源码安装" class="headerlink" title="1. 从Github获取源码安装"></a>1. 从Github获取源码安装</h4><p>​    需预先安装好Python2.5以上版本。另外，对于Ansible，Windows系统不可以做控制主机。如果控制主机没有预装Python，从<a href="https://www.python.org/download/releases/" rel="external nofollow noopener noreferrer" target="_blank">Python官网</a>选择<a href="https://www.python.org/ftp/python/2.7.15/Python-2.7.15.tgz" rel="external nofollow noopener noreferrer" target="_blank">2.7.15版本的源码包</a>，解压到控制主机执行安装即可。</p>
<p>安装过Python环境之后，更新以下模块：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装python的包管理工具pip</span></span><br><span class="line">[root@VM_0_6_centos ~]<span class="comment"># easy_install pip</span></span><br><span class="line"><span class="comment"># 通过pip安装ansible必需的若干python模块</span></span><br><span class="line">[root@VM_0_6_centos ~]<span class="comment"># pip install paramiko PyYAML Jinja2 httplib2 six</span></span><br></pre></td></tr></table></figure>
<p>下载、安装ansible</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://github.com/ansible/ansible.git --recursive</span><br><span class="line"><span class="built_in">cd</span> ./ansible</span><br><span class="line"><span class="comment"># Bash命令</span></span><br><span class="line"><span class="built_in">source</span> ./hacking/env-setup</span><br></pre></td></tr></table></figure>
<h4 id="2-Yum安装"><a href="#2-Yum安装" class="headerlink" title="2. Yum安装"></a>2. Yum安装</h4><p>Fedora 用户可直接安装Ansible，但RHEL或CentOS用户，需要 <a href="http://fedoraproject.org/wiki/EPEL" rel="external nofollow noopener noreferrer" target="_blank">配置 EPEL</a>。</p>
<p>更新EPEL源</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rpm方式安装EPEL源</span></span><br><span class="line">rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br><span class="line"><span class="comment"># 或者从阿里镜像源获取</span></span><br><span class="line">wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br></pre></td></tr></table></figure>
<p>然后更新一下缓存</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM_0_6_centos ~]<span class="comment"># yum clean all</span></span><br><span class="line">[root@VM_0_6_centos ~]<span class="comment"># yum makecache</span></span><br></pre></td></tr></table></figure>
<p>安装ansible</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM_0_6_centos ~]<span class="comment"># yum install ansible -y</span></span><br></pre></td></tr></table></figure>
<h4 id="3-其它系统安装Ansible"><a href="#3-其它系统安装Ansible" class="headerlink" title="3. 其它系统安装Ansible"></a>3. 其它系统安装Ansible</h4><p>​    其它操作系统，详见<a href="http://www.ansible.com.cn/docs/intro_installation.html" rel="external nofollow noopener noreferrer" target="_blank">Ansible安装方法</a>。</p>
<h3 id="操作示例"><a href="#操作示例" class="headerlink" title="操作示例"></a>操作示例</h3><p>​    我们主要使用ansible和ansible-playbook这两个命令。批量执行简单命令时，使用ansible；执行更复杂的批量安装部署时用ansible-playbook。以下是我在云主机上使用ansible的三个示例：</p>
<p>个人云主机主机环境如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM_0_7_centos ~]<span class="comment"># cat /etc/redhat-release                                </span></span><br><span class="line">CentOS Linux release 7.3.1611 (Core) </span><br><span class="line">[root@VM_0_7_centos ~]<span class="comment"># df -h</span></span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/vda1        50G  6.8G   40G  15% /</span><br><span class="line">devtmpfs        911M     0  911M   0% /dev</span><br><span class="line">tmpfs           920M   24K  920M   1% /dev/shm</span><br><span class="line">tmpfs           920M  436K  920M   1% /run</span><br><span class="line">tmpfs           920M     0  920M   0% /sys/fs/cgroup</span><br><span class="line">tmpfs           184M     0  184M   0% /run/user/0</span><br><span class="line">tmpfs           184M     0  184M   0% /run/user/1000</span><br></pre></td></tr></table></figure>
<h4 id="使用ansible"><a href="#使用ansible" class="headerlink" title="使用ansible"></a>使用ansible</h4><h5 id="1-执行简单命令"><a href="#1-执行简单命令" class="headerlink" title="1. 执行简单命令"></a>1. 执行简单命令</h5><p>​    安装好ansible之后，在当前目录编写一个hosts文件，定义一个主机群组vm，配置好待部署机器的主机别名、IP地址等信息，格式可以如下:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat myhosts</span><br><span class="line">[vm]</span><br><span class="line">vm01 ansible_host=192.168.xxx.xx1 <span class="comment"># ansible2.0之前的版本应该使用ansible_ssh_host</span></span><br><span class="line">vm02 ansible_host=192.168.xxx.xx2</span><br></pre></td></tr></table></figure>
<p>​    然后，通过指定<code>-i</code>参数指定自定义hosts文件执行一个简单的命令，如查询系统（redhat系列）版本：<code>cat /etc/redhat-release</code></p>
<p><strong>1) 仅查询vm01</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM_0_7_centos ~]<span class="comment"># ansible -i myhosts vm01 -m shell -a "cat /etc/redhat-release"</span></span><br><span class="line">vm01 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">CentOS Linux release 7.3.1611 (Core)</span><br></pre></td></tr></table></figure>
<p><strong>2) 查询主机群组vm中的所有主机</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM_0_7_centos ~]<span class="comment"># ansible -i myhosts vm -m shell -a "cat /etc/redhat-release"</span></span><br><span class="line">vm02 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">CentOS Linux release 7.3.1611 (Core) </span><br><span class="line"></span><br><span class="line">vm01 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">CentOS Linux release 7.3.1611 (Core)</span><br></pre></td></tr></table></figure>
<p><strong>3) 查询hosts文件中的所有主机</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM_0_7_centos ~]<span class="comment"># ansible -i myhosts all -m shell -a "cat /etc/redhat-release"</span></span><br><span class="line">vm02 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">CentOS Linux release 7.3.1611 (Core) </span><br><span class="line"></span><br><span class="line">vm01 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">CentOS Linux release 7.3.1611 (Core)</span><br></pre></td></tr></table></figure>
<p><strong>！注意：<code>command</code>模块不支持管道</strong></p>
<p>例如，企图通过<code>&quot;df -h |sed -n 2p&quot;</code>获取第一个列出的文件系统的数据时，报错如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM_0_7_centos ~]<span class="comment"># ansible -i myhosts vm01 -m command -a "df -h |sed -n 2p"</span></span><br><span class="line">vm01 | FAILED | rc=1 &gt;&gt;</span><br><span class="line">df: invalid option -- <span class="string">'n'</span></span><br><span class="line">Try <span class="string">'df --help'</span> <span class="keyword">for</span> more information.non-zero <span class="built_in">return</span> code</span><br></pre></td></tr></table></figure>
<p>此时，可以使用<strong><code>shell</code>模块</strong>替代，如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM_0_7_centos ~]<span class="comment"># ansible -i myhosts vm01 -m shell -a "df -h | sed -n 2p"</span></span><br><span class="line">vm01 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">/dev/vda1        50G  3.5G   44G   8% /</span><br></pre></td></tr></table></figure>
<h5 id="2-执行控制主机上的脚本"><a href="#2-执行控制主机上的脚本" class="headerlink" title="2. 执行控制主机上的脚本"></a>2. 执行控制主机上的脚本</h5><p>​    如果需要执行多条shell命令，而又不想编写playbook，可以将包含这些命令的shell脚本放在控制主机上，通过script模块执行。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; /root/test.sh</span><br><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">yum install httpd -y</span><br><span class="line">systemctl start httpd</span><br><span class="line">systemctl status httpd</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在vm01上安装httpd并启动</span></span><br><span class="line">[root@VM_0_7_centos ~]<span class="comment"># ansible -i myhosts vm01 -m script -a "/root/test.sh"</span></span><br><span class="line">vm01 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"rc"</span>: 0, </span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="使用ansible-playbook"><a href="#使用ansible-playbook" class="headerlink" title="使用ansible-playbook"></a>使用ansible-playbook</h4><h5 id="3-使用ansible-playbook部署一个tomcat集群"><a href="#3-使用ansible-playbook部署一个tomcat集群" class="headerlink" title="3. 使用ansible-playbook部署一个tomcat集群"></a>3. 使用ansible-playbook部署一个tomcat集群</h5><p>​    此例演示如何将一个Web应用部署到由 <code>一个NginX节点 + 两个tomcat节点</code>集群，然后模拟升级、回退过程：</p>
<p>1+2集群设定：</p>
<table>
<thead>
<tr>
<th>主机</th>
<th>应用</th>
<th>监听端口</th>
<th>版本</th>
</tr>
</thead>
<tbody>
<tr>
<td>vm_nginx</td>
<td>NginX</td>
<td>80</td>
<td>1.12</td>
</tr>
<tr>
<td>vm_tomcat_1</td>
<td>tomcat</td>
<td>8080</td>
<td>8.5.38</td>
</tr>
<tr>
<td>vm_tomcat_2</td>
<td>tomcat</td>
<td>8080</td>
<td>8.5.38</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>为了模拟升级、回退操作，准备两个Web应用：</p>
<table>
<thead>
<tr>
<th>Web应用</th>
<th>版本</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>examples.war</td>
<td>1.0</td>
<td>旧版本，回退用</td>
</tr>
<tr>
<td>examples.war</td>
<td>2.0</td>
<td>新版本，升级用</td>
</tr>
</tbody>
</table>
<p>接下来，编写playbook。</p>
<p>在不是特别清楚每个步骤该如何编写的情况下，先一条一条以文字形式罗列出来：</p>
<ol>
<li>更新所有节点的yum源</li>
<li>在NginX节点通过yum安装NginX 1.12</li>
<li>在tomcat节点通过yum安装Java 8</li>
<li>解压tomcat安装包到tomcat节点的安装目录</li>
<li>配置tomcat（添加环境变量、开机自启、开放8080端口等）</li>
<li>将examples.war v1.0发布到tomcat并启动tomcat（因初始已有examples，改为替换首页）</li>
<li>配置NginX并启动</li>
<li>停止vm_tomcat_1上的tomcat，将examples.war v2.0发布到tomcat并启动</li>
<li>等待vm_tomcat_1的tomcat启动正常</li>
<li>停止vm_tomcat_2上的tomcat，将examples.war v2.0发布到tomcat并启动</li>
<li>等待vm_tomcat_2的tomcat启动正常</li>
<li>重复步骤8~11，但改用examples.war v1.0，模拟回退过程</li>
</ol>
<hr>
<p>据此，可作以下规划。</p>
<p>角色设定：</p>
<table>
<thead>
<tr>
<th>role</th>
<th>说明</th>
<th>包含步骤</th>
</tr>
</thead>
<tbody>
<tr>
<td>tomcat</td>
<td>安装Java 8，tomcat 8，并替换examples首页</td>
<td>1，3 ~ 6</td>
</tr>
<tr>
<td>nginx</td>
<td>安装NginX 1.12</td>
<td>1，2，7</td>
</tr>
<tr>
<td>upgrade</td>
<td>升级到examples.war v2.0</td>
<td>8 ~ 11</td>
</tr>
<tr>
<td>rollback</td>
<td>回退到examples.war v1.0</td>
<td>12</td>
</tr>
</tbody>
</table>
<p>主机组划分：</p>
<table>
<thead>
<tr>
<th>group</th>
<th>hosts</th>
<th>roles</th>
</tr>
</thead>
<tbody>
<tr>
<td>lb</td>
<td>vm_nginx</td>
<td>nginx</td>
</tr>
<tr>
<td>web</td>
<td>vm_tomcat_1<br>vm_tomcat_2</td>
<td>tomcat<br>upgrade<br>rollback</td>
</tr>
</tbody>
</table>
<p>入口playbook划分：</p>
<table>
<thead>
<tr>
<th>name</th>
<th>roles</th>
</tr>
</thead>
<tbody>
<tr>
<td>start.yml</td>
<td>tomcat<br>nginx</td>
</tr>
<tr>
<td>upgrade.yml</td>
<td>upgrade</td>
</tr>
<tr>
<td>rollback.yml</td>
<td>rollback</td>
</tr>
</tbody>
</table>
<p><strong>完整的playbook目录结构如下:</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM_0_7_centos <span class="built_in">test</span>]<span class="comment"># tree ansible_tomcat_cluster/</span></span><br><span class="line">ansible_tomcat_cluster/</span><br><span class="line">|-- ansible.cfg</span><br><span class="line">|-- group_vars</span><br><span class="line">|   `-- web</span><br><span class="line">|       `-- main.yaml <span class="comment"># 对web组可见的变量（参数）</span></span><br><span class="line">|-- hosts</span><br><span class="line">`-- roles</span><br><span class="line">    |-- nginx</span><br><span class="line">    |   |-- files</span><br><span class="line">    |   |   `-- nginx.conf <span class="comment"># 用于替换/etc/nginx/nginx.conf，已作好负载均衡配置</span></span><br><span class="line">    |   `-- tasks</span><br><span class="line">    |       `-- main.yml <span class="comment"># 每个tasks下的main.yml（或main.yaml)是对应role的主流程</span></span><br><span class="line">    |-- rollback</span><br><span class="line">    |   |-- files</span><br><span class="line">    |   |   `-- examples.war <span class="comment"># 此为1.0版本，真实环境中，一般会从远程版本库获取，此处是预先准备好</span></span><br><span class="line">    |   |-- handlers</span><br><span class="line">    |   |   `-- main.yml</span><br><span class="line">    |   `-- tasks</span><br><span class="line">    |       `-- main.yml</span><br><span class="line">    |-- rollback.yml</span><br><span class="line">    |-- start.yml <span class="comment"># 执行此playbook，会对lb和web组分别执行nginx和tomcat role的主流程</span></span><br><span class="line">    |-- tomcat</span><br><span class="line">    |   |-- files</span><br><span class="line">    |   |   `-- apache-tomcat-8.5.38.tar.gz <span class="comment"># 预置的tomcat8解压安装包</span></span><br><span class="line">    |   |-- tasks</span><br><span class="line">    |   |   `-- main.yaml</span><br><span class="line">    |   |-- templates</span><br><span class="line">    |   |   `-- index.html <span class="comment"># 首页模板，用于替换examples的首页。此处演示模板的变量注入</span></span><br><span class="line">    |   `-- vars</span><br><span class="line">    |       `-- main.yaml <span class="comment"># 仅对role tomcat可见的变量（参数）</span></span><br><span class="line">    |-- upgrade</span><br><span class="line">    |   |-- files</span><br><span class="line">    |   |   `-- examples.war <span class="comment"># 此为2.0版本</span></span><br><span class="line">    |   |-- handlers</span><br><span class="line">    |   |   `-- main.yml <span class="comment"># 此处演示处理器的用法，由notify触发（见upgrade/tasks/main.yml）</span></span><br><span class="line">    |   `-- tasks</span><br><span class="line">    |       `-- main.yml</span><br><span class="line">    `-- upgrade.yml</span><br></pre></td></tr></table></figure>
<ul>
<li>inventory（即hosts文件）：</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM_0_7_centos <span class="built_in">test</span>]<span class="comment"># cat ansible_tomcat/hosts</span></span><br><span class="line">[web]</span><br><span class="line">vm_tomcat_1 ansible_host=118.24.217.91 mytitle=<span class="string">"this is vm01"</span></span><br><span class="line">vm_tomcat_2 ansible_host=188.131.133.107 mytitle=<span class="string">"this is vm02"</span></span><br><span class="line"></span><br><span class="line">[lb]</span><br><span class="line">vm_nginx ansible_host=188.131.133.107</span><br></pre></td></tr></table></figure>
<ul>
<li>role nginx的任务编排：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装NginX</span> <span class="string">"<span class="template-variable">&#123;&#123; nginx_version &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">yum:</span> <span class="string">name=&#123;&#123;</span> <span class="string">item</span> <span class="string">&#125;&#125;</span> <span class="string">state=present</span></span><br><span class="line">  <span class="attr">with_items:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">yum-utils</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">"nginx-<span class="template-variable">&#123;&#123; nginx_version &#125;&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">配置NginX</span></span><br><span class="line">  <span class="attr">copy:</span> <span class="string">src=nginx.conf</span> <span class="string">dest=/etc/nginx/</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">启动NginX</span></span><br><span class="line">  <span class="attr">service:</span> <span class="string">name=nginx</span> <span class="string">state=started</span> <span class="string">enabled=yes</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">启用防火墙</span></span><br><span class="line">  <span class="attr">service:</span> <span class="string">name=firewalld</span> <span class="string">state=started</span> <span class="string">enabled=yes</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">开启80端口（临时）</span></span><br><span class="line">  <span class="attr">shell:</span> <span class="string">firewall-cmd</span> <span class="string">--zone=public</span> <span class="string">--add-port=80/tcp</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">等待80端口启动</span></span><br><span class="line">  <span class="attr">wait_for:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">state:</span> <span class="string">started</span></span><br></pre></td></tr></table></figure>
<ul>
<li>role tomcat的任务编排：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">[root@VM_0_7_centos</span> <span class="string">test]#</span> <span class="string">cat</span> <span class="string">ansible_tomcat/roles/install/tasks/main.yaml</span> </span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装Java8</span></span><br><span class="line">  <span class="attr">yum:</span> <span class="string">name=&#123;&#123;</span> <span class="string">item</span> <span class="string">&#125;&#125;</span> <span class="string">state=present</span></span><br><span class="line">  <span class="attr">with_items:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">yum-utils</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">java-1.8.0</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">将tomcat8解压缩到安装目录下</span></span><br><span class="line">  <span class="attr">unarchive:</span></span><br><span class="line">    <span class="attr">src:</span> <span class="string">"<span class="template-variable">&#123;&#123; app_name &#125;&#125;</span>.tar.gz"</span></span><br><span class="line">    <span class="attr">dest:</span> <span class="string">"<span class="template-variable">&#123;&#123; install_path &#125;&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">注册tomcat环境变量</span></span><br><span class="line">  <span class="attr">lineinfile:</span></span><br><span class="line">    <span class="attr">dest:</span> <span class="string">/etc/profile</span></span><br><span class="line">    <span class="attr">state:</span> <span class="string">present</span></span><br><span class="line">    <span class="attr">line:</span> <span class="string">"<span class="template-variable">&#123;&#123; item &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">with_items:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"export CATALINA_HOME=/usr/local/apache-tomcat-8.5.38/"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"export PATH=$CATALINA_HOME/bin:$PATH"</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">检测tomcat安装目录是否存在</span></span><br><span class="line">  <span class="attr">stat:</span> <span class="string">path=&#123;&#123;</span> <span class="string">tomcat_home</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="comment"># 此处演示register用法，可在后面的步骤中打印&#123;&#123; check_tomcat_result &#125;&#125;以观察其值</span></span><br><span class="line">  <span class="attr">register:</span> <span class="string">check_tomcat_result</span></span><br><span class="line">  <span class="attr">failed_when:</span> <span class="string">not</span> <span class="string">check_tomcat_result.stat.exists</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">替换examples首页</span></span><br><span class="line">  <span class="attr">template:</span> <span class="string">src=index.html</span>  <span class="string">dest="&#123;&#123;</span> <span class="string">tomcat_home</span> <span class="string">&#125;&#125;/webapps/examples/index.html"</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">启动tomcat</span></span><br><span class="line">  <span class="attr">shell:</span> <span class="string">nohup</span> <span class="string">"<span class="template-variable">&#123;&#123; tomcat_home &#125;&#125;</span>/bin/startup.sh"</span> <span class="string">&amp;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">启用防火墙</span></span><br><span class="line">  <span class="attr">service:</span> <span class="string">name=firewalld</span> <span class="string">state=started</span> <span class="string">enabled=yes</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">开启8080端口（临时）</span></span><br><span class="line">  <span class="attr">shell:</span> <span class="string">firewall-cmd</span> <span class="string">--zone=public</span> <span class="string">--add-port=8080/tcp</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">等待8080端口启动</span></span><br><span class="line">  <span class="attr">wait_for:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">    <span class="attr">state:</span> <span class="string">started</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">配置tomcat开机自启动</span></span><br><span class="line">  <span class="attr">lineinfile:</span></span><br><span class="line">    <span class="attr">dest:</span> <span class="string">/etc/profile</span></span><br><span class="line">    <span class="attr">state:</span> <span class="string">present</span></span><br><span class="line">    <span class="attr">line:</span> <span class="string">"<span class="template-variable">&#123;&#123; item &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">with_items:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"<span class="template-variable">&#123;&#123; tomcat_home &#125;&#125;</span>/bin/startup.sh &amp;"</span></span><br></pre></td></tr></table></figure>
<p><strong>执行nginx和tomcat的安装部署：</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM_0_7_centos <span class="built_in">test</span>]<span class="comment"># ansible-playbook roles/start.yml</span></span><br></pre></td></tr></table></figure>
<p>结果如下图：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/ansible-intro.assets/1551012654701.png" alt="1551012654701"></p>
<p>检验环境变量是否已写入<code>/etc/profile</code>：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/ansible-intro.assets/1551012868529.png" alt="1551012868529"></p>
<p>检验tomcat开机自启动是否已写入<code>/etc/rc.local</code>：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/ansible-intro.assets/1551014113584.png" alt="1551014113584"></p>
<p>检验index.html模板是否注入成功：</p>
<p>​    预置的index.html模板：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/ansible-intro.assets/1550722583627.png" alt="1550722583627"></p>
<p>​    注入变量后，h3标签值变成了”this is vm01”（另一个节点是”this is vm02”）：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/ansible-intro.assets/1551014256905.png" alt="1551014256905"></p>
<p>检验NginX负载均衡是否生效：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/ansible-intro.assets/1551015508452.png" alt="1551015508452"></p>
<p><strong>执行逐个节点升级：</strong></p>
<p>upgrade.yml：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">web</span></span><br><span class="line">  <span class="attr">serial:</span> <span class="number">1</span> <span class="comment"># serial值为1，表示一个一个节点地执行</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">upgrade</span> <span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
<p>upgrade/tasks/main.yml：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">升级</span> <span class="string">|关闭tomcat</span></span><br><span class="line">  <span class="attr">command:</span> <span class="string">sh</span> <span class="string">"<span class="template-variable">&#123;&#123; tomcat_home &#125;&#125;</span>/bin/shutdown.sh"</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">等待8080端口关闭</span></span><br><span class="line">  <span class="attr">wait_for:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">    <span class="attr">state:</span> <span class="string">stopped</span></span><br><span class="line">  <span class="attr">notify:</span> <span class="string">clean</span> <span class="string">tomcat</span> <span class="string">cache</span> <span class="comment"># 通知handler "clean tomcat cache" 处理</span></span><br><span class="line"><span class="string">（剩余略）</span></span><br></pre></td></tr></table></figure>
<p>handlers/main.yml：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">clean</span> <span class="string">tomcat</span> <span class="string">cache</span></span><br><span class="line">  <span class="attr">file:</span> <span class="string">path="&#123;&#123;</span> <span class="string">tomcat_home</span> <span class="string">&#125;&#125;/work/Catalina"</span> <span class="string">state=absent</span></span><br><span class="line">  <span class="attr">ignore_errors:</span> <span class="literal">yes</span></span><br></pre></td></tr></table></figure>
<p>模拟应用升级的过程过程如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM_0_7_centos ansible_tomcat_cluster]<span class="comment"># ansible-playbook roles/upgrade.yml</span></span><br></pre></td></tr></table></figure>
<p>​    先对vm_tomat_1：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/ansible-intro.assets/1551016061521.png" alt="1551016061521"></p>
<p>​    再对vm_tomcat_2：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/ansible-intro.assets/1551016281860.png" alt="1551016281860"></p>
<p>升级后，从浏览器访问变成了2.0版本（两个节点的页面一致，未作区分）：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/ansible-intro.assets/1551016392519.png" alt="1551016392519"></p>
<p><strong>执行逐个节点回退：</strong></p>
<p>rollback剧本内容与upgrade相似，从略。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM_0_7_centos ansible_tomcat_cluster]<span class="comment"># ansible-playbook roles/rollback.yml</span></span><br></pre></td></tr></table></figure>
<p>回退过程类似升级过程，结果如下：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/ansible-intro.assets/1551016579264.png" alt="1551016579264"></p>
<p>回退后，从浏览器访问变成了1.0版本：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/ansible-intro.assets/1551016791550.png" alt="1551016791550"></p>
<p>一切符合预期。</p>
<p>至此，NginX <em> 1 + Tomcat </em> 2方式部署war包，然后模拟升级、回退的过程演示完毕。完整的playbook见<a href="https://github.com/zlzgithub/ansible_zlz/tree/master/tomcat_cluster" rel="external nofollow noopener noreferrer" target="_blank">gitlab仓库</a></p>
<hr>
<p><em>P.s. 以上操作不是使用密码，需事先作SSH免密认证。</em></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 控制主机生成ssh密钥对，简单点，直接ssh-keygen不带任何参数</span></span><br><span class="line">ssh-keygen</span><br><span class="line"><span class="comment"># 发送给被控主机</span></span><br><span class="line">ssh-copy-id root@localhost	<span class="comment"># 如果要在控制主机执行部署，需发送公钥给自己</span></span><br><span class="line">ssh-copy-id root@&lt;目标主机IP&gt;</span><br></pre></td></tr></table></figure>
<p><em>其它模块的用法，及高级特性，请结合实际需求，阅读官方文档《Ansible User Guide》。</em></p>
<h3 id="Ansible参考"><a href="#Ansible参考" class="headerlink" title="Ansible参考"></a>Ansible参考</h3><ol>
<li><p><a href="https://docs.ansible.com/ansible/latest/user_guide/" rel="external nofollow noopener noreferrer" target="_blank">Ansible User Guide</a></p>
</li>
<li><p><a href="http://www.ansible.com.cn/" rel="external nofollow noopener noreferrer" target="_blank">Ansible中文权威指南</a></p>
</li>
<li><p><a href="https://blog.csdn.net/a105421548/article/details/53558598" rel="external nofollow noopener noreferrer" target="_blank">Ansible和SaltStack的比较和选型</a></p>
</li>
</ol>
<hr>
<p>（End）</p>
]]></content>
      <categories>
        <category>CMDB</category>
      </categories>
      <tags>
        <tag>Ansible</tag>
        <tag>CMDB</tag>
      </tags>
  </entry>
  <entry>
    <title>配置管理</title>
    <url>/config-management/config-management/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>配置管理工具可以提高应用部署和变更的效率，还可以让这些流程变得可重用、可扩展、可预测，甚至让它们维持在期望的状态，从而让资产的可控性提高。</p>
</blockquote>
<a id="more"></a>
<p>使用配置管理工具的优势还包括：</p>
<ul>
<li>让代码遵守编码规范，提高代码可读性；</li>
<li>具有 <em>幂等性(Idempotency)</em>，也就是说，无论执行多少次重复的配置管理操作，得到的结果都是一致的；</li>
<li>分布式的设计可以方便地管理大量的远程服务器。</li>
</ul>
<p>配置管理工具主要分为 <em>拉取(pull)</em>模式和 <em>推送(push)</em>模式。拉取模式是指安装在各台服务器上的 <em>代理(agent)</em>定期从 <em>中央存储库(central repository)</em>拉取最新的配置并应用到对应的服务器上；而推送模式则由 <em>中央服务器(central server)</em>的中央服务器会触发其它受管服务器的更新。</p>
<p>下列是几款开源配置管理工具，全都具有开源许可证、使用外部配置文件、支持无人值守运行、可以通过脚本自定义运行。</p>
<h2 id="Ansible"><a href="#Ansible" class="headerlink" title="Ansible"></a>Ansible</h2><p>“Ansible 是一个极其简洁的 IT 自动化平台，可以让你的应用和系统以更简单的方式部署。不需要安装任何代理，只需要使用 SSH 的方式和简单的语言，就可以免去脚本或代码部署应用的过程。”——<a href="https://github.com/ansible/ansible" rel="external nofollow noopener noreferrer" target="_blank">GitHub Ansible 代码库</a></p>
<p>由于 Ansible 不需要代理，因此对服务器的资源消耗会很少。Ansible 默认使用的推送模式需要借助 SSH 连接，但 Ansible 也支持拉取模式。<a href="https://opensource.com/article/18/8/ansible-playbooks-you-should-try" rel="external nofollow noopener noreferrer" target="_blank">剧本</a> 可以使用最少的命令集编写，当然也可以扩展为更加精细的自动化任务，包括引入角色、变量和其它人写的模块。</p>
<blockquote>
<p><em><a href="https://docs.ansible.com/ansible/latest/index.html" rel="external nofollow noopener noreferrer" target="_blank">Ansible</a> is an IT automation tool. It can configure systems, deploy software, and orchestrate more advanced IT tasks such as continuous deployments or zero downtime rolling updates.</em></p>
<p><a href="https://docs.ansible.com/ansible/latest/index.html" rel="external nofollow noopener noreferrer" target="_blank"><strong>Ansible</strong></a> 是一个IT自动化工具。它可以配置系统，部署软件以及编排更高级的IT任务，例如持续部署或零停机滚动更新。</p>
</blockquote>
<p><img src="https://www.ansible.com/hubfs/Images/blog-social/Ansible-Blog-Network-Pool-Gradient-Header.png" alt="img"></p>
<h2 id="Puppet"><a href="#Puppet" class="headerlink" title="Puppet"></a>Puppet</h2><p>“Puppet 是一个可以在 Linux、Unix 和 Windows 系统上运行的自动化管理引擎，它可以根据集中的规范来执行诸如添加用户、安装软件包、更新服务器配置等等管理任务。”——<a href="https://github.com/puppetlabs/puppet" rel="external nofollow noopener noreferrer" target="_blank">GitHub Puppet 代码库</a></p>
<ul>
<li><a href="https://puppet.com/" rel="external nofollow noopener noreferrer" target="_blank">官网</a></li>
<li><a href="https://puppet.com/docs" rel="external nofollow noopener noreferrer" target="_blank">文档</a></li>
<li><a href="https://puppet.com/community" rel="external nofollow noopener noreferrer" target="_blank">社区</a></li>
</ul>
<p>Puppet 作为一款面向运维工程师和系统管理员的工具，在更多情况下是作为配置管理工具来使用。它通过客户端-服务端的模式工作，使用代理从主服务器获取配置指令。</p>
<p>Puppet 使用 <em>声明式语言(declarative language)</em>或 Ruby 来描述系统配置。它包含了不同的模块，并使用 <em>清单文件(manifest files)</em>记录期望达到的目标状态。Puppet 默认使用推送模式，但也支持拉取模式。</p>
<h2 id="Salt"><a href="#Salt" class="headerlink" title="Salt"></a>Salt</h2><p>“为大规模基础结构或应用程序实现自动化管理的软件。”——<a href="https://github.com/saltstack/salt" rel="external nofollow noopener noreferrer" target="_blank">GitHub Salt 代码库</a></p>
<ul>
<li><a href="https://www.saltstack.com/" rel="external nofollow noopener noreferrer" target="_blank">官网</a></li>
<li><a href="https://docs.saltstack.com/en/latest/contents.html" rel="external nofollow noopener noreferrer" target="_blank">文档</a></li>
<li><a href="https://www.saltstack.com/resources/community/" rel="external nofollow noopener noreferrer" target="_blank">社区</a></li>
</ul>
<p>Salt 的专长就是快速收集数据，即使是上万台服务器也能够轻松完成任务。它使用 Python 模块来管理配置信息和执行特定的操作，这些模块可以让 Salt 实现所有远程操作和状态管理。但配置 Salt 模块对技术水平有一定的要求。</p>
<p>Salt 使用客户端-服务端的结构（Salt minions 是客户端，而 Salt master 是服务端），并以 Salt 状态文件记录需要达到的目标状态。</p>
]]></content>
      <categories>
        <category>CMDB</category>
      </categories>
      <tags>
        <tag>CMDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Git命令备忘</title>
    <url>/config-management/git-memo/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h3 id="创建远程仓库"><a href="#创建远程仓库" class="headerlink" title="创建远程仓库"></a>创建远程仓库</h3><h4 id="init-remote"><a href="#init-remote" class="headerlink" title="init, remote"></a>init, remote</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以github为例，先在github上新建远程仓库git_repo</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建本地仓库</span></span><br><span class="line">mkdir git_repo</span><br><span class="line"><span class="built_in">cd</span> git_repo</span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># github上创建的新仓库是默认的远程版本库名称是origin，默认分支master</span></span><br><span class="line"><span class="comment"># 添加远程版本库设置</span></span><br><span class="line"><span class="comment"># git remote add origin https://github.com/&lt;github_user&gt;/git_repo.git</span></span><br><span class="line">git remote add origin git@github.com:&lt;github_user&gt;/git_repo.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看远程版本库设置</span></span><br><span class="line">git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程版本库设置(origin用户)</span></span><br><span class="line">git remote remove origin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可尝试直接编辑.git里的相应文件来修改设置</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/1546331161329.png" alt="1546331161329"></p>
<h4 id="add-commit-push"><a href="#add-commit-push" class="headerlink" title="add, commit, push"></a>add, commit, push</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加文件</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">git status</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"..."</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改文件</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">git add .</span><br><span class="line">git status	<span class="comment"># 查看状态</span></span><br><span class="line">git commit -m <span class="string">"..."</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除文件</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">git add -A</span><br><span class="line">git commit -m <span class="string">"..."</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 继续修改</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="comment"># add &amp; commit</span></span><br><span class="line">git commit -a -m <span class="string">"..."</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># push</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
<h3 id="基于远程仓库修改"><a href="#基于远程仓库修改" class="headerlink" title="基于远程仓库修改"></a>基于远程仓库修改</h3><h4 id="pull、clone"><a href="#pull、clone" class="headerlink" title="pull、clone"></a>pull、clone</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 与远端同步</span></span><br><span class="line"><span class="built_in">cd</span> git_repo</span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不使用本地git_repo</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/username/git_repo.git</span><br><span class="line"><span class="built_in">cd</span> git_repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 ...</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">git commit -a -m <span class="string">"..."</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure>
<h3 id="新建、切换分支"><a href="#新建、切换分支" class="headerlink" title="新建、切换分支"></a>新建、切换分支</h3><h4 id="checkout"><a href="#checkout" class="headerlink" title="checkout"></a>checkout</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> git_repo</span><br><span class="line"><span class="comment"># 基于默认分支master，新建名为test的分支，并切换至test分支</span></span><br><span class="line">git checkout -b <span class="built_in">test</span></span><br><span class="line">git push -u origin <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 已经存在test分支时，不加"-b"切换</span></span><br><span class="line">git checkout <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<h3 id="修改历史提交"><a href="#修改历史提交" class="headerlink" title="修改历史提交"></a>修改历史提交</h3><h4 id="revert"><a href="#revert" class="headerlink" title="revert"></a>revert</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> git_repo</span><br><span class="line">git pull</span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 撤销上次提交，会产生一次新的提交，与上上次内容的相同</span></span><br><span class="line">git revert HEAD</span><br></pre></td></tr></table></figure>
<h4 id="reset"><a href="#reset" class="headerlink" title="reset"></a>reset</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重置到上上次提交</span></span><br><span class="line">git reset --hard HEAD^</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置到指定commit</span></span><br><span class="line">git reset --hard &lt;commit_id&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置后，滞后于远程版本库，需强制push</span></span><br><span class="line">git push origin master -f</span><br></pre></td></tr></table></figure>
<h4 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 改变基线</span></span><br><span class="line">git rebase -i &lt;commit_id&gt;</span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">git add .</span><br><span class="line">git commit --amend</span><br><span class="line">git rebase --<span class="built_in">continue</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">git push origin master -f</span><br></pre></td></tr></table></figure>
<p>rebase前：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/1546334928965.png" alt="1546334928965"></p>
<p>rebase到5c9af：</p>
<p>执行git rebase -i &lt;commit_id&gt;后，会自动打开一个文件，pick表示选取某些提交，edit表示选取并编辑某些提交：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/1546335631435.png" alt="1546335631435"></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/1546335712261.png" alt="1546335712261"></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/1546335005491.png" alt="1546335005491"></p>
<p>因上面修改了2行为edit，edit第二次：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/1546335118983.png" alt="1546335118983"></p>
<hr>
<p>(End)</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git多账号配置</title>
    <url>/config-management/multi-git-account-configure/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<p>假设有2个github账号，mygithub（default）和mygithub2，要在同一个git客户端下使用，可按以下配置。</p>
<h3 id="生成SSH-Key"><a href="#生成SSH-Key" class="headerlink" title="生成SSH Key"></a>生成SSH Key</h3><p><code>mygithub</code>的ssh key已按默认生成，对应id_rsa。再生成<code>mygithub2</code>账号的ssh key，假设取名为mygithub2：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br><span class="line"><span class="comment"># ssh-keygen -t rsa -b 4096 -C &lt;email&gt; -f mygithub2</span></span><br><span class="line">ssh-keygen -f mygithub2</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>生成ssh密钥对之后，登录github，将公钥记录到mygithub2账户中。</p>
<h3 id="添加多账号配置文件"><a href="#添加多账号配置文件" class="headerlink" title="添加多账号配置文件"></a>添加多账号配置文件</h3><p>创建文件<code>~/.ssh/config</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br><span class="line">cat &lt;&lt;EOF &gt; config</span><br><span class="line"><span class="comment"># default</span></span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">User mygithub</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line"><span class="comment"># mygithub2</span></span><br><span class="line">Host mygithub2</span><br><span class="line">HostName github.com</span><br><span class="line">User mygithub2</span><br><span class="line">IdentityFile ~/.ssh/mygithub2</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<p>注意Host、HostName的差异。如果有其它代码托管平台的账号，如<code>gitlab、gitee</code>，重新按以上步骤追加，填写相应的HostName、User和ssh key文件，并以不同的Host值区分。</p>
<h3 id="使用多账号"><a href="#使用多账号" class="headerlink" title="使用多账号"></a>使用多账号</h3><p>使用时，对于默认账号<code>mygithub</code>，用法不变：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认账号mygithub用法不变</span></span><br><span class="line">git <span class="built_in">clone</span> git@github.com:mygithub/helloWorld.git</span><br></pre></td></tr></table></figure>
<p>对于<code>mygithub2</code>，@github.com变成@mygithub2，因<code>mygithub2</code>对应的Host是mygithub2。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@mygithub2:mygithub2/helloWorld.git</span><br></pre></td></tr></table></figure>
<p>如下图，<code>lzzeng</code>是我使用的第二github账号：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/1550116067833.png" alt="1550116067833"></p>
<p>如果事先已clone下来，可修改远程仓库地址为 @mygithub2格式：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> helloWorld</span><br><span class="line">git remote rm origin</span><br><span class="line">git remote add origin git@mygithub2:mygithub2/helloWorld.git</span><br></pre></td></tr></table></figure>
<p>此外，因全局默认用户是<code>mygithub</code>，如果想切换到<code>mygithub2</code>用户的话：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> helloWorld</span><br><span class="line">git config --<span class="built_in">local</span> user.name mygithub2</span><br><span class="line">git config --<span class="built_in">local</span> user.email &lt;email&gt;</span><br></pre></td></tr></table></figure>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>根据上述内容，可以完成git多账号配置并使用。另外，网上资料有提到<code>ssh-agent</code>和<code>ssh-add</code>，ssh-agent是一个密钥管理器，运行ssh-agent以后，使用ssh-add将私钥交给ssh-agent保管。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh-agent bash	<span class="comment"># 启用ssh-agent shell</span></span><br><span class="line">ssh-add -l	<span class="comment"># 显示ssh-agent中的密钥</span></span><br><span class="line">ssh-add -D	<span class="comment"># 删除所有缓存的密钥</span></span><br><span class="line">ssh-add  ~/.ssh/id_rsa	<span class="comment"># 把私钥添加到ssh-agent中</span></span><br><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub root@vm2	<span class="comment"># 将公钥发送给root@vm2，之后可免密登录root@vm2</span></span><br></pre></td></tr></table></figure>
<hr>
<p>(End)</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>音乐播放器一枚</title>
    <url>/demo/vue-music/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<blockquote>
<p>用Vue.js实现的，无需后端，歌曲信息、歌词存放在本地（使用jsonp方式解析），歌曲文件为在线免费链接。</p>
<p><a href="https://lzzeng.github.io/music/">demo地址</a></p>
</blockquote>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2021/image-20210906005802683.png" alt="image-20210906005802683" style="zoom:50%;"></p>
<a id="more"></a>
<p>播放列表及歌曲列表：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2021/image-20210906010018041.png" alt="image-20210906010018041"></p>
]]></content>
      <categories>
        <category>demo</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>awk命令</title>
    <url>/linux/awk/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk <span class="string">'&#123;c[$1]++;&#125;END&#123;for(k in c)&#123;print k": "c[k];&#125;&#125;'</span> /var/<span class="built_in">log</span>/nginx/myalert_access.log</span><br><span class="line">113.118.106.137: 17</span><br><span class="line">113.116.28.35: 4171</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="统计IP访问次数"><a href="#统计IP访问次数" class="headerlink" title="统计IP访问次数"></a>统计IP访问次数</h2><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p>myalert_access日志格式如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">116.7.8.112 - - [14/Jun/2020:18:08:06 +0000] <span class="string">"GET / HTTP/1.1"</span> 302 0 <span class="string">"-"</span> <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36"</span> <span class="string">"-"</span></span><br></pre></td></tr></table></figure>
<p>统计：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk <span class="string">'&#123;c[$1]++;&#125;END&#123;for(k in c)&#123;print k": "c[k];&#125;&#125;'</span> /var/<span class="built_in">log</span>/nginx/myalert_access.log</span><br><span class="line">113.118.106.137: 17</span><br><span class="line">113.116.28.35: 4171</span><br><span class="line">112.97.49.195: 20</span><br><span class="line">116.7.8.112: 440</span><br></pre></td></tr></table></figure>
<h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><p>日志：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Nov 25 13:33:03 VM_0_13_centos sshd[9327]: Invalid user ftp_user from 1.213.195.154 port 37113</span><br></pre></td></tr></table></figure></p>
<p>统计：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM_0_13_centos ~]<span class="comment"># awk '&#123;a[$1]+=1;&#125;END&#123;for(i in a)&#123;print a[i]" "i;&#125;&#125;' /var/log/secure</span></span><br><span class="line">1532 Sep</span><br><span class="line">12542 Nov</span><br><span class="line">3895 Oct</span><br><span class="line">107725 Aug</span><br></pre></td></tr></table></figure></p>
<h2 id="关联查询"><a href="#关联查询" class="headerlink" title="关联查询"></a>关联查询</h2><p>从 <code>ll</code> 命令的结果筛选出Documents  Downloads Pictures的行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@kafka-1 ~]<span class="comment"># ll</span></span><br><span class="line">total 4</span><br><span class="line">-rw-------. 1 root root 2744 Feb 15  2020 anaconda-ks.cfg</span><br><span class="line">drwxr-xr-x. 2 root root    6 Feb 15  2020 Desktop</span><br><span class="line">drwxr-xr-x. 2 root root    6 Feb 15  2020 Documents</span><br><span class="line">drwxr-xr-x. 2 root root    6 Feb 15  2020 Downloads</span><br><span class="line">drwxr-xr-x. 2 root root    6 Feb 15  2020 Music</span><br><span class="line">drwxr-xr-x. 2 root root    6 Feb 15  2020 Pictures</span><br><span class="line">drwxr-xr-x. 2 root root    6 Feb 15  2020 Public</span><br><span class="line">drwxr-xr-x. 2 root root    6 Feb 15  2020 Templates</span><br><span class="line">drwxr-xr-x. 2 root root    6 Feb 15  2020 Videos</span><br><span class="line"></span><br><span class="line">[root@kafka-1 ~]<span class="comment"># echo Documents Downloads Pictures |tr ' ' '\n' |awk -v vline="`ll |sed 's/^/echo /'`" 'BEGIN&#123;while(vline |getline) txt[$NF]=$0;&#125; &#123;print txt[$0];&#125;'</span></span><br><span class="line">drwxr-xr-x. 2 root root 6 Feb 15 2020 Documents</span><br><span class="line">drwxr-xr-x. 2 root root 6 Feb 15 2020 Downloads</span><br><span class="line">drwxr-xr-x. 2 root root 6 Feb 15 2020 Pictures</span><br></pre></td></tr></table></figure>
<p>从文件 <code>score</code> 中查找a c e的记录：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost code]<span class="comment"># cat score</span></span><br><span class="line">a 90</span><br><span class="line">b 99</span><br><span class="line">c 95</span><br><span class="line">d 88</span><br><span class="line">e 80</span><br><span class="line">f 89</span><br><span class="line">g 94</span><br><span class="line">[root@localhost code]<span class="comment"># echo a c e |tr ' ' '\n' |awk 'BEGIN&#123;while(getline &lt; "./score") txt[$1]=$0 &#125; &#123;print txt[$1];&#125;'</span></span><br><span class="line">a 90</span><br><span class="line">c 95</span><br><span class="line">e 80</span><br></pre></td></tr></table></figure>
<h2 id="列出已挂载的磁盘"><a href="#列出已挂载的磁盘" class="headerlink" title="列出已挂载的磁盘"></a>列出已挂载的磁盘</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@kafka-1 ~]<span class="comment"># lsblk</span></span><br><span class="line">NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda      8:0    0   20G  0 disk </span><br><span class="line">├─sda1   8:1    0  300M  0 part /boot</span><br><span class="line">├─sda2   8:2    0    2G  0 part [SWAP]</span><br><span class="line">└─sda3   8:3    0 17.7G  0 part /</span><br><span class="line">sr0     11:0    1 1024M  0 rom  </span><br><span class="line">[root@kafka-1 ~]<span class="comment"># </span></span><br><span class="line">[root@kafka-1 ~]<span class="comment"># lsblk |awk '&#123;if($6=="disk") d=$1; if(substr($7,1,1)=="/") print d;&#125;' |sort -u</span></span><br><span class="line">sda</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>bash编程 —— getopt用法</title>
    <url>/linux/getopt/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>getopt的用法</p>
</blockquote>
<a id="more"></a>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">filepath=$(<span class="built_in">cd</span> `dirname <span class="variable">$0</span>`; <span class="built_in">pwd</span>)</span><br><span class="line"></span><br><span class="line">show_usage=<span class="string">"args: [-s , -e , -n , -c][--sdate=, --edate=, --numprocs=, --cfile=]"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ -z <span class="variable">$@</span> ]];<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$show_usage</span></span><br><span class="line">  <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">GETOPT_ARGS=`getopt -o s:e:n::c: -al sdate:,edate:,numprocs::,cfile: -- <span class="string">"<span class="variable">$@</span>"</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment">#echo "$GETOPT_ARGS"</span></span><br><span class="line"><span class="built_in">eval</span> <span class="built_in">set</span> -- <span class="string">"<span class="variable">$GETOPT_ARGS</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> [ -n <span class="string">"<span class="variable">$1</span>"</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">    -s|--sdate) sdate=<span class="variable">$2</span>; <span class="built_in">shift</span> 2;;</span><br><span class="line">    -e|--edate) edate=<span class="variable">$2</span>; <span class="built_in">shift</span> 2;;</span><br><span class="line">    -n|--numprocs) numprocs=<span class="variable">$2</span>; <span class="built_in">shift</span> 2;;</span><br><span class="line">    -c|--cfile) cfile=<span class="variable">$2</span>; <span class="built_in">shift</span> 2;;</span><br><span class="line">    --) <span class="built_in">break</span> ;;</span><br><span class="line">    *) <span class="built_in">echo</span> <span class="variable">$1</span>,<span class="variable">$2</span>,<span class="variable">$show_usage</span>; <span class="built_in">break</span> ;;</span><br><span class="line">  <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$sdate</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$edate</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$numprocs</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$cfile</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>grep命令</title>
    <url>/linux/grep/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="提取匹配到的字符"><a href="#提取匹配到的字符" class="headerlink" title="提取匹配到的字符"></a>提取匹配到的字符</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM_0_13_centos demo]<span class="comment"># cat phone.txt</span></span><br><span class="line">987-123-4567</span><br><span class="line">123 456 7890</span><br><span class="line">(123) 456-7890</span><br><span class="line">[root@VM_0_13_centos demo]<span class="comment"># grep -o '\-[0-9]\&#123;3\&#125;' phone.txt</span></span><br><span class="line">-123</span><br><span class="line">-456</span><br><span class="line">-789</span><br><span class="line">[root@VM_0_13_centos demo]<span class="comment"># grep -no '\-[0-9]\&#123;3\&#125;' phone.txt</span></span><br><span class="line">1:-123</span><br><span class="line">1:-456</span><br><span class="line">3:-789</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="help"><a href="#help" class="headerlink" title="help"></a>help</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/etc/nginx <span class="comment"># grep -h</span></span><br><span class="line">BusyBox v1.30.1 (2019-10-26 11:23:07 UTC) multi-call binary.</span><br><span class="line"></span><br><span class="line">Usage: grep [-HhnlLoqvsriwFE] [-m N] [-A/B/C N] PATTERN/-e PATTERN.../-f FILE [FILE]...</span><br><span class="line"></span><br><span class="line">Search <span class="keyword">for</span> PATTERN <span class="keyword">in</span> FILEs (or stdin)</span><br><span class="line"></span><br><span class="line">	-H	Add <span class="string">'filename:'</span> prefix</span><br><span class="line">	-h	Do not add <span class="string">'filename:'</span> prefix</span><br><span class="line">	-n	Add <span class="string">'line_no:'</span> prefix</span><br><span class="line">	-l	Show only names of files that match</span><br><span class="line">	-L	Show only names of files that don<span class="string">'t match</span></span><br><span class="line"><span class="string">	-c	Show only count of matching lines</span></span><br><span class="line"><span class="string">	-o	Show only the matching part of line</span></span><br><span class="line"><span class="string">	-q	Quiet. Return 0 if PATTERN is found, 1 otherwise</span></span><br><span class="line"><span class="string">	-v	Select non-matching lines</span></span><br><span class="line"><span class="string">	-s	Suppress open and read errors</span></span><br><span class="line"><span class="string">	-r	Recurse</span></span><br><span class="line"><span class="string">	-i	Ignore case</span></span><br><span class="line"><span class="string">	-w	Match whole words only</span></span><br><span class="line"><span class="string">	-x	Match whole lines only</span></span><br><span class="line"><span class="string">	-F	PATTERN is a literal (not regexp)</span></span><br><span class="line"><span class="string">	-E	PATTERN is an extended regexp</span></span><br><span class="line"><span class="string">	-m N	Match up to N times per file</span></span><br><span class="line"><span class="string">	-A N	Print N lines of trailing context</span></span><br><span class="line"><span class="string">	-B N	Print N lines of leading context</span></span><br><span class="line"><span class="string">	-C N	Same as '</span>-A N -B N<span class="string">'</span></span><br><span class="line"><span class="string">	-e PTRN	Pattern to match</span></span><br><span class="line"><span class="string">	-f FILE	Read pattern from file</span></span><br></pre></td></tr></table></figure>
<h2 id="若干常用参数"><a href="#若干常用参数" class="headerlink" title="若干常用参数"></a>若干常用参数</h2><p>grep -F <your pattern> file</your></p>
<p>-F 可禁止pattern转义，使按原样匹配</p>
<p>-i 可忽略大小写，可以与 -F 一起用</p>
<p>-n 附带打印行号</p>
<p>-c 仅计数</p>
<p>-x 完整匹配模式（整行匹配）</p>
<p>-v 反向匹配（排除）</p>
<p>-r 递归查找当前目录及子目录下的文件</p>
<p>-o, –only-matching. Print only the matched (non-empty) parts of a matching line, with each such part on a separate output line.</p>
<p>-q 静默模式</p>
<p>  -q时虽然没有输出内容，但有返回状态值，可作为测试条件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/etc/nginx # grep -Fq &apos;30/Sep/2020:18:50:03&apos; /var/log/nginx/myalert_access.log          # 输出为空</span><br><span class="line">/etc/nginx # grep -Fq &apos;30/Ssep/2020:18:50:03&apos; /var/log/nginx/myalert_access.log         # 输出也为空</span><br><span class="line">/etc/nginx # grep -Fq &apos;30/Sep/2020:18:50:03&apos; /var/log/nginx/myalert_access.log; echo $?</span><br><span class="line">0</span><br><span class="line">/etc/nginx # grep -Fq &apos;30/Ssep/2020:18:50:03&apos; /var/log/nginx/myalert_access.log; echo $?</span><br><span class="line">1</span><br><span class="line">/etc/nginx # if grep -Fq &apos;30/Sep/2020:18:50:03&apos; /var/log/nginx/myalert_access.log; then echo Y; else echo N; fi</span><br><span class="line">Y</span><br><span class="line">/etc/nginx # if grep -Fq &apos;30/Ssep/2020:18:50:03&apos; /var/log/nginx/myalert_access.log; then echo N; else echo N; fi</span><br><span class="line">N</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux basic 01 —— 读书笔记</title>
    <url>/linux/linux-basic/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>《鸟哥的私房菜》在线书籍 <a href="http://linux.vbird.org/linux_basic" rel="external nofollow noopener noreferrer" target="_blank">http://linux.vbird.org/linux_basic</a> 的笔记</p>
</blockquote>
<p>磁盘的第一个扇区主要记录了两个重要信息，分别是：</p>
<ul>
<li>主要启动记录区(Master Boot Record, MBR)：可以安装开机管理程序的地方，有446 bytes</li>
<li>分区表(partition table)：记录整颗硬盘分区的状态，有64 bytes</li>
</ul>
<a id="more"></a>
<h2 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h2><p>在分区表所在的64 bytes容量中，总共分为四组记录区，每组记录区记录了该区段的起始到结束磁柱的号码。</p>
<p>P(primary)+E(extended)最多叧能有四个，其中E最多叧能有一个。</p>
<p>题：假如我的PC有两颗SATA硬盘，我想在第事颗硬盘分割出6个可用的分割槽(可以被格式化)， 那每个分割槽在Linux系统下的装置文件名为何？分割类型各为何？至少写出两种不同的分割方案。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PPP+E方案:</span><br><span class="line">/dev/sdb1, /dev/sdb2, /dev/sdb3, /dev/sdb5, /dev/sdb6, /dev/sdb7这六个，至于/dev/sdb4这个延伸分割本身仅是提供来给逡辑分割槽建立乀用。</span><br><span class="line"></span><br><span class="line">P+E方案:</span><br><span class="line">/dev/sdb1, /dev/sdb5, /dev/sdb6, /dev/sdb7, /dev/sdb8, /dev/sdb9</span><br></pre></td></tr></table></figure>
<p>简单地说，整个开机流程到操作系统之前的动作应该是这样：</p>
<ul>
<li>BIOS：开机自动执行的韧体，会识别第一个可开机的装置；</li>
<li>MBR：第一个可开机装置的第一个分区内的主要启动记录区块，内含开机管理程序；</li>
<li>开机管理程序(boot loader)：一个可读取核心文件来执行的软件；</li>
<li>核心档案（文件）：开始操作系统的功能…</li>
</ul>
<p>Linux内的所有资料都是以档案的形态来呈现的，所以啰，整个Linux系统最重要的地方就是在于目录树架构</p>
<p>无论如何，底下还是说明一下基本硬碟分割的模式吧！</p>
<p>最简单的分割方法：<br>这个在上面第二节已经谈过了，就是仅分割出根目录与记忆体置换空间( / &amp; swap )即可。然后再预留一些剩余的磁碟以供后续的练习之用。不过，这当然是不保险的分割方法(所以鸟哥常常说这是『懒人分割法』)！因为如果任何一个小细节坏掉(例如坏轨的产生)，你的根目录将可能整个的损毁～挽救方面较困难！</p>
<p>稍微麻烦一点的方式：<br>较麻烦一点的分割方式就是先分析这部主机的未来用途，然后根据用途去分析需要较大容量的目录，以及读写较为频繁的目录，将这些重要的目录分别独立出来而不与根目录放在一起，那当这些读写较频繁的磁碟分割槽有问题时，至少不会影响到根目录的系统资料，那挽救方面就比较容易啊！在预设的CentOS环境中，底下的目录是比较符合容量大且(或)读写频繁的目录：<br>/boot<br>/<br>/home<br>/var<br>Swap</p>
<p>由二BIOS捉到的磁盘容量丌对，但是至少在整颗磁盘前面的扂区他还读得到啊！ 因此，你叧要将这个磁盘最前面的容量分割出一个小分割槽，幵将这个分割槽不系统启劢文件的放置目录摆在一起， 那就是 /boot 这个目录！就能够解决了！很简单吧！ 其实，重点是：『将启劢扂区所在分割槽规范在小二1024个磁柱以内～』 即可！那怎举做到呢？很简单，在进行安装的时候，规划出三个分区，分别是：<br>/boot<br>/<br>swap</p>
<p>那个/boot只要给100MB左右即可，而且/boot要放在整块硬盘的最前面。在Linux里面，任何一个文件都具有User,Group,Others三种身份的个别权限：</p>
<p>drwxr-xr– 1 test1 testgroup 5238 Jun 19 10:25 groups/</p>
<p>第一个字元代表这个档案是『目录、档案或连结档等等』：</p>
<ul>
<li>当为[ d ]则是目录，例如上表档名为『.config』的那一行；</li>
<li>当为[ - ]则是档案，例如上表档名为『initial-setup-ks.cfg』那一行；</li>
<li>若是[ l ]则表示为连结档(link file)；</li>
<li>若是[ b ]则表示为装置档里面的可供储存的周边设备(可随机存取装置)；</li>
<li>若是[ c ]则表示为装置档里面的序列埠设备，例如键盘、滑鼠(一次性读取装置)。</li>
</ul>
<p>接下来的字元中，以三个为一组，且均为『rwx』的三个参数的组合。<br>u: user 即 owner<br>g: group<br>o: others  !! 不是owner</p>
<p>目录的x代表的是使用者能否进入该目录成为工作目录的用途！</p>
<p>除了基本r, w, x权限外，在Linux传统的Ext2/Ext3/Ext4档案系统下，我们还可以设定其他的系统隐藏属性，这部份可使用chattr来设定，而以lsattr 来查看，最重要的属性就是可以设定其不可修改的特性！让连档案的拥有者都不能进行修改！这个属性可是相当重要的，尤其是在安全机制上面(security)！</p>
<p>CentOS 7.x 下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM_0_13_centos linux-learning]<span class="comment"># ls -ld /bin; ls -ld /sbin; ls -ld /lib; ls -ld /lib64; ls -ld /var/lock; ls -ld /var/run;</span></span><br><span class="line">lrwxrwxrwx. 1 root root 7 Mar  7  2019 /bin -&gt; usr/bin</span><br><span class="line">lrwxrwxrwx. 1 root root 8 Mar  7  2019 /sbin -&gt; usr/sbin</span><br><span class="line">lrwxrwxrwx. 1 root root 7 Mar  7  2019 /lib -&gt; usr/lib</span><br><span class="line">lrwxrwxrwx. 1 root root 9 Mar  7  2019 /lib64 -&gt; usr/lib64</span><br><span class="line">lrwxrwxrwx. 1 root root 11 Mar  7  2019 /var/lock -&gt; ../run/lock</span><br><span class="line">lrwxrwxrwx. 1 root root 6 Mar  7  2019 /var/run -&gt; ../run</span><br></pre></td></tr></table></figure>
<p>目录规范：<a href="http://linux.vbird.org/linux_basic/0210filepermission.php" rel="external nofollow noopener noreferrer" target="_blank">http://linux.vbird.org/linux_basic/0210filepermission.php</a></p>
<p><strong>/proc</strong>目录：这个目录本身是一个『虚拟档案系统(virtual filesystem)』喔！他放置的资料都是在记忆体当中，例如系统核心、行程资讯(process)、周边装置的状态及网路状态等等。因为这个目录下的资料都是在记忆体当中，所以本身不占任何硬碟空间啊！比较重要的档案例如：/proc/cpuinfo, /proc/dma, /proc/interrupts, /proc/ioports, /proc/net/*等等。</p>
<h2 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h2><h3 id="uname"><a href="#uname" class="headerlink" title="uname"></a>uname</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM_0_13_centos linux-learning]<span class="comment"># uname -a</span></span><br><span class="line">Linux VM_0_13_centos 3.10.0-957.el7.x86_64 <span class="comment">#1 SMP Thu Nov 8 23:39:32 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux</span></span><br><span class="line">[root@VM_0_13_centos linux-learning]<span class="comment"># uname -s</span></span><br><span class="line">Linux</span><br><span class="line">[root@VM_0_13_centos linux-learning]<span class="comment"># uname -n</span></span><br><span class="line">VM_0_13_centos</span><br><span class="line">[root@VM_0_13_centos linux-learning]<span class="comment"># uname -r</span></span><br><span class="line">3.10.0-957.el7.x86_64</span><br><span class="line">[root@VM_0_13_centos linux-learning]<span class="comment"># uname -m</span></span><br><span class="line">x86_64</span><br><span class="line">[root@VM_0_13_centos linux-learning]<span class="comment"># uname -p</span></span><br><span class="line">x86_64</span><br><span class="line">[root@VM_0_13_centos linux-learning]<span class="comment"># uname -i</span></span><br><span class="line">x86_64</span><br><span class="line">[root@VM_0_13_centos linux-learning]<span class="comment"># uname -o</span></span><br><span class="line">GNU/Linux</span><br><span class="line"></span><br><span class="line">[root@VM_0_13_centos linux-learning]<span class="comment"># cat /etc/issue</span></span><br><span class="line">\S</span><br><span class="line">Kernel \r on an \m</span><br><span class="line"></span><br><span class="line">[root@VM_0_13_centos linux-learning]<span class="comment"># cat /etc/redhat-release </span></span><br><span class="line">CentOS Linux release 7.6.1810 (Core)</span><br><span class="line"></span><br><span class="line">[root@VM_0_13_centos linux-learning]<span class="comment"># cat /etc/centos-release</span></span><br><span class="line">CentOS Linux release 7.6.1810 (Core)</span><br></pre></td></tr></table></figure>
<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="lsblk"><a href="#lsblk" class="headerlink" title="lsblk"></a>lsblk</h3><blockquote>
<p>list block devices</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM_0_13_centos linux-learning]<span class="comment"># lsblk</span></span><br><span class="line">NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sr0     11:0    1  4.4M  0 rom  </span><br><span class="line">vda    253:0    0   50G  0 disk </span><br><span class="line">└─vda1 253:1    0   50G  0 part /</span><br></pre></td></tr></table></figure>
<h3 id="vmstat"><a href="#vmstat" class="headerlink" title="vmstat"></a>vmstat</h3><blockquote>
<p>vmstat reports information about processes, memory, paging, block IO, traps, disks and cpu activity.</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM_0_13_centos linux-learning]<span class="comment"># vmstat</span></span><br><span class="line">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</span><br><span class="line"> r  b   swpd   free   buff  cache   si   so    bi    bo   <span class="keyword">in</span>   cs us sy id wa st</span><br><span class="line"> 1  0      0 159888 137604 869576    0    0    11    18    0    0  5  3 92  0  0</span><br></pre></td></tr></table></figure>
<h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><p>ls -Al  与 ls -al 的区别，不包含 . 和 ..</p>
<p>ls -n       # 不需要l</p>
<p>-n ：列出UID与GID而非使用者与群组的名称</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost sh]<span class="comment"># ls -n</span></span><br><span class="line">total 4</span><br><span class="line">-rw-r--r--. 1 0 0 309 Nov  1 10:33 fixed-ts.sh</span><br><span class="line"></span><br><span class="line">[root@VM_0_13_centos linux-learning]<span class="comment"># ls -lS a    # 按大小降序</span></span><br><span class="line">total 8</span><br><span class="line">-rw-r--r-- 1 root root 4 Oct  4 01:54 b1</span><br><span class="line">-rw-r--r-- 1 root root 3 Oct  4 01:53 b2</span><br><span class="line">-rw-rwxr-x 1 root root 0 Oct  4 01:02 b</span><br><span class="line">[root@VM_0_13_centos linux-learning]<span class="comment"># ls -lt a    # 按时间降序 新-&gt;旧</span></span><br><span class="line">total 8</span><br><span class="line">-rw-r--r-- 1 root root 4 Oct  4 01:54 b1</span><br><span class="line">-rw-r--r-- 1 root root 3 Oct  4 01:53 b2</span><br><span class="line">-rw-rwxr-x 1 root root 0 Oct  4 01:02 b</span><br><span class="line">[root@VM_0_13_centos linux-learning]<span class="comment"># ls -l a     # 按名称升序</span></span><br><span class="line">total 8</span><br><span class="line">-rw-rwxr-x 1 root root 0 Oct  4 01:02 b</span><br><span class="line">-rw-r--r-- 1 root root 4 Oct  4 01:54 b1</span><br><span class="line">-rw-r--r-- 1 root root 3 Oct  4 01:53 b2</span><br><span class="line"></span><br><span class="line">[root@VM_0_13_centos linux-learning]<span class="comment"># ls -Rl a    # R 子目录也ls</span></span><br><span class="line">a:</span><br><span class="line">total 8</span><br><span class="line">-rw-rwxr-x 1 root root 0 Oct  4 01:02 b</span><br><span class="line">-rw-r--r-- 1 root root 4 Oct  4 01:54 b1</span><br><span class="line">-rw-r--r-- 1 root root 3 Oct  4 01:53 b2</span><br><span class="line"></span><br><span class="line"><span class="comment"># -F ：根据档案、目录等资讯，给予附加资料结构，例如：</span></span><br><span class="line"><span class="comment">#       *:代表可执行档； /:代表目录； =:代表socket 档案； |:代表FIFO 档案；</span></span><br><span class="line">[root@VM_0_13_centos linux-learning]<span class="comment"># ls -FR .</span></span><br><span class="line">.:</span><br><span class="line">a/  c</span><br><span class="line"></span><br><span class="line">./a:</span><br><span class="line">b*  b1  b2</span><br><span class="line"></span><br><span class="line"><span class="comment"># -f ：直接列出结果，而不进行排序(ls 预设会以档名排序！)</span></span><br><span class="line">[root@VM_0_13_centos linux-learning]<span class="comment"># ls -f a/</span></span><br><span class="line">b1  .  ..  b  b2</span><br><span class="line">[root@VM_0_13_centos linux-learning]<span class="comment"># ls a/</span></span><br><span class="line">b  b1  b2</span><br></pre></td></tr></table></figure>
<h3 id="cat-与-tac"><a href="#cat-与-tac" class="headerlink" title="cat 与 tac"></a>cat 与 tac</h3><p>tac 可实现按行逆序输出</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM_0_13_centos linux-learning]<span class="comment"># seq 3 |tac</span></span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">1</span><br><span class="line">[root@VM_0_13_centos linux-learning]<span class="comment"># seq 3 |cat</span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">[root@VM_0_13_centos linux-learning]<span class="comment"># seq 3</span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure>
<h3 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h3><p>即使我们复制一个档案时，复制所有的属性，但也没有办法复制ctime 这个属性的。ctime 可以记录这个档案最近的状态(status) 被改变的时间</p>
<h3 id="umask"><a href="#umask" class="headerlink" title="umask"></a>umask</h3><p>如果umask为022，则：<br>建立文件时：(-rw-rw-rw-) - (—–w–w-) ==&gt; -rw-r–r–                # 即644<br>建立目录时：(drwxrwxrwx) - (d—-w–w-) ==&gt; drwxr-xr-x        # 即755</p>
<p>在预设的情况中， root的umask会拿掉比较多的属性，root的umask预设是022 ，这是基于安全的考量啦～至于一般身份使用者，通常他们的umask为002 ，亦即保留同群组的写入权力！</p>
<h3 id="其它文件管理命令"><a href="#其它文件管理命令" class="headerlink" title="其它文件管理命令"></a>其它文件管理命令</h3><p>ref: <a href="http://linux.vbird.org/linux_basic/0220filemanager.php#dir_path" rel="external nofollow noopener noreferrer" target="_blank">http://linux.vbird.org/linux_basic/0220filemanager.php#dir_path</a></p>
<h3 id="文件特殊权限：-SUID-SGID-SBIT"><a href="#文件特殊权限：-SUID-SGID-SBIT" class="headerlink" title="文件特殊权限： SUID, SGID, SBIT"></a>文件特殊权限： SUID, SGID, SBIT</h3><p>…</p>
<h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><h3 id="列出所有监听的端口"><a href="#列出所有监听的端口" class="headerlink" title="列出所有监听的端口"></a>列出所有监听的端口</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">netstat -tnlp |awk <span class="string">'&#123;print $4&#125;'</span> |awk -F: <span class="string">'&#123;if($NF~/^[0-9]*$/) print $NF&#125;'</span> |sort |uniq 2&gt;/dev/null</span><br></pre></td></tr></table></figure>
<h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><p>ref: <a href="https://www.linuxprobe.com/chapter-08.html#83_Firewalld" rel="external nofollow noopener noreferrer" target="_blank">https://www.linuxprobe.com/chapter-08.html#83_Firewalld</a></p>
<p>对指定IP开放指定端口</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">firewall-cmd --permanent --add-rich-rule=<span class="string">"rule family="</span>ipv4<span class="string">" source address="</span>192.168.142.166<span class="string">" port protocol="</span>tcp<span class="string">" port="</span>6379<span class="string">" accept"</span></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>
<p>添加、删除2201</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=2201/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --remove-port=2201/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>
<p><code>--zone=public</code>：拒绝流入的流量，除非与流出的流量相关；而如果流量与ssh、dhcpv6-client服务相关，则允许流量。</p>
<p>指定网段192.168.10.0/24 INPUT，拒绝其它网段INPUT:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">iptables -I INPUT -s 192.168.10.0/24 -p tcp --dport 22 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p tcp --dport 22 -j REJECT</span><br></pre></td></tr></table></figure>
<p>允许规则要放在拒绝规则前面，否则被拒绝。</p>
<p>把INPUT规则链的默认策略设置为拒绝：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">iptables -P INPUT DROP</span><br><span class="line"><span class="comment"># iptables -L</span></span><br></pre></td></tr></table></figure>
<p>规则链的默认策略拒绝动作只能是DROP，而不能是REJECT。</p>
<p>DROP直接将流量丢弃而且不响应；REJECT则会在拒绝流量后回复一条信息，从而让流量发送方清晰地看到数据被拒绝的响应信息。</p>
<p>向INPUT链中添加允许ICMP流量进入的策略规则:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">iptables -I INPUT -p icmp -j ACCEPT</span><br></pre></td></tr></table></figure>
<h2 id="网络存储"><a href="#网络存储" class="headerlink" title="网络存储"></a>网络存储</h2><h3 id="NFS"><a href="#NFS" class="headerlink" title="NFS"></a>NFS</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum install nfs-utils -y</span></span><br><span class="line"></span><br><span class="line">服务端：</span><br><span class="line">/nfs 172.17.0.13(rw,no_root_squash,async)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">客户端：</span><br><span class="line">mount -t nfs   root@172.17.0.13:/nfs   /mnt</span><br></pre></td></tr></table></figure>
<h2 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim 操作：</span></span><br><span class="line">:g/^<span class="comment">#/d     # 删除所有#开头的行</span></span><br><span class="line">:g/^$/d     <span class="comment"># 删除所有空行</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>bash编程 —— 读写配置</title>
    <url>/linux/read-write-ini/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>shell读写配置</p>
</blockquote>
<a id="more"></a>
<h2 id="读取配置"><a href="#读取配置" class="headerlink" title="读取配置"></a>读取配置</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment">######################</span></span><br><span class="line"><span class="comment"># 读取ini配置文件，字典法</span></span><br><span class="line"><span class="comment">######################</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">declare</span> -A d</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">read_ini</span></span>() &#123;</span><br><span class="line">    ini_file=<span class="variable">$1</span></span><br><span class="line">    <span class="keyword">if</span> [ -f <span class="string">"<span class="variable">$&#123;ini_file&#125;</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">while</span> <span class="built_in">read</span> line; <span class="keyword">do</span></span><br><span class="line"><span class="comment">#        if [ -z $(echo "$line" | sed "s/^[^#]*\[\w+\].*$//") ]; then</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">echo</span> <span class="string">"<span class="variable">$line</span>"</span> |grep -xq <span class="string">'^\s*\[[a-zA-Z0-9_\-]\+\].*$'</span>; <span class="keyword">then</span></span><br><span class="line"><span class="comment">#          sec=$(echo "$line" | sed "s/^[^#]*\[\(.\+\)\].*$/\1/")</span></span><br><span class="line">          sec=$(<span class="built_in">echo</span> <span class="string">"<span class="variable">$line</span>"</span> | sed <span class="string">"s/^\s*\[\([a-zA-Z0-9_\-]\+\)\].*$/\1/"</span>)</span><br><span class="line">          flag=1</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> [ 1 -eq <span class="variable">$flag</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="string">"<span class="variable">$line</span>"</span> |grep -xq <span class="string">'^\s*\w\+\s*=\s*.*$'</span>; <span class="keyword">then</span></span><br><span class="line"><span class="comment">#          item=$(echo "$line" |sed "s/^\s*\([a-zA-Z0-9_\-]\+\)\s*=.*$/\1/")</span></span><br><span class="line">          item=$(<span class="built_in">echo</span> <span class="string">"<span class="variable">$line</span>"</span> |sed <span class="string">"s/^\s*\(\S\+\)\s*=.*$/\1/"</span>)</span><br><span class="line">          value=$(<span class="built_in">echo</span> <span class="string">"<span class="variable">$line</span>"</span> |sed <span class="string">"s/^.*=\s*\(.\+\)\s*$/\1/"</span>)</span><br><span class="line">          key=<span class="string">"<span class="variable">$sec</span>/<span class="variable">$item</span>"</span></span><br><span class="line">          d[<span class="variable">$key</span>]=<span class="variable">$value</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">      <span class="keyword">done</span> &lt;<span class="string">"<span class="variable">$&#123;ini_file&#125;</span>"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">read_ini a.ini</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;d[students/name]&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;d[students/name2]&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"End."</span></span><br></pre></td></tr></table></figure>
<h2 id="写入配置"><a href="#写入配置" class="headerlink" title="写入配置"></a>写入配置</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment">######################</span></span><br><span class="line"><span class="comment"># 修改ini配置文件，不存在section或item时</span></span><br><span class="line"><span class="comment"># ，追加item 或 增加 section和item</span></span><br><span class="line"><span class="comment">######################</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">write_ini</span></span>() &#123;</span><br><span class="line">  <span class="comment"># usage: write_ini &lt;ini_file&gt; &lt;section&gt; &lt;item&gt; &lt;value&gt;</span></span><br><span class="line">  ini_file=<span class="variable">$1</span></span><br><span class="line">  section=<span class="variable">$2</span></span><br><span class="line">  item=<span class="variable">$3</span></span><br><span class="line">  value=<span class="variable">$4</span></span><br><span class="line">  flag=0</span><br><span class="line">  is_found=0</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> [ -f <span class="string">"<span class="variable">$&#123;ini_file&#125;</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">read</span> line; <span class="keyword">do</span></span><br><span class="line">      <span class="comment">#      if [ -z $(echo "$line" | sed "s/^[^#]*\[$&#123;section&#125;\].*$//") ]; then</span></span><br><span class="line">      <span class="keyword">if</span> <span class="built_in">echo</span> <span class="string">"<span class="variable">$line</span>"</span> | grep -xq <span class="string">"^\s*\[<span class="variable">$&#123;section&#125;</span>\].*$"</span>; <span class="keyword">then</span></span><br><span class="line">        flag=1</span><br><span class="line">      <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">#      if [ 1 -eq $flag ] &amp;&amp; [ -z $(echo "$line" | sed "s/^[^#]*$&#123;item&#125;.*$//") ]; then</span></span><br><span class="line">      <span class="keyword">if</span> [ 1 -eq <span class="variable">$flag</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="string">"<span class="variable">$line</span>"</span> | grep -xq <span class="string">"^\s*<span class="variable">$&#123;item&#125;</span>\s*=\s*.*$"</span>; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$line</span>"</span> | sed <span class="string">"s/=.*$/=<span class="variable">$&#123;value&#125;</span>/"</span></span><br><span class="line">        flag=0</span><br><span class="line">        is_found=1</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$line</span>"</span></span><br><span class="line">      <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span> &lt;<span class="string">"<span class="variable">$&#123;ini_file&#125;</span>"</span>   <span class="comment"># 从文件读取行，循环内的变量退出循环后仍有效；似乎~如果从管道读取则不然。</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$flag</span>,<span class="variable">$is_found</span> <span class="comment"># 附上while循环中的变量值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">write</span></span>() &#123;</span><br><span class="line">  <span class="comment"># usage: write &lt;ini_file&gt; &lt;section&gt; &lt;item&gt; &lt;value&gt;</span></span><br><span class="line">  ini_file=<span class="variable">$1</span></span><br><span class="line">  section=<span class="variable">$2</span></span><br><span class="line">  item=<span class="variable">$3</span></span><br><span class="line">  value=<span class="variable">$4</span></span><br><span class="line">  out=$(write_ini <span class="variable">$@</span>)               <span class="comment"># 被$()方式调用，与直接write_ini，变量作用域不同; 因在子进程中运行？</span></span><br><span class="line">  ret=$(<span class="built_in">echo</span> <span class="string">"<span class="variable">$out</span>"</span> | tail -n 1)</span><br><span class="line">  res=$(<span class="built_in">echo</span> <span class="string">"<span class="variable">$out</span>"</span> | head -n -1)</span><br><span class="line"><span class="comment">#  echo $flag,$is_found             # write_ini中flag是1，此处是0！</span></span><br><span class="line">  flag=$(<span class="built_in">echo</span> <span class="string">"<span class="variable">$ret</span>"</span> | cut -d, -f1)</span><br><span class="line">  is_found=$(<span class="built_in">echo</span> <span class="string">"<span class="variable">$ret</span>"</span> | cut -d, -f2)</span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$flag</span> -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$res</span>"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">""</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"[<span class="variable">$&#123;section&#125;</span>]"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;item&#125;</span>=<span class="variable">$&#123;value&#125;</span>"</span></span><br><span class="line">  <span class="keyword">elif</span> [ <span class="variable">$is_found</span> -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$res</span>"</span> | sed <span class="string">"/\[<span class="variable">$&#123;section&#125;</span>\]/a\\<span class="variable">$&#123;item&#125;</span>=<span class="variable">$&#123;value&#125;</span>"</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">write a.ini students name2 lucy2</span><br><span class="line">write a.ini students3 name3 lucy3</span><br></pre></td></tr></table></figure>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># !/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##################</span></span><br><span class="line"><span class="comment"># 读取、修改ini, item不存在时不会新建</span></span><br><span class="line"><span class="comment">##################</span></span><br><span class="line"></span><br><span class="line">INIFILE=<span class="variable">$1</span></span><br><span class="line">SECTION=<span class="variable">$2</span></span><br><span class="line">ITEM=<span class="variable">$3</span></span><br><span class="line">NEWVAL=<span class="variable">$4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">ReadINIfile</span></span>() &#123;</span><br><span class="line"><span class="comment">#  ReadINI=$(awk -F= '/\['$SECTION'\]/&#123;a=1&#125;a==1&amp;&amp;$1~/'$ITEM'/&#123;print $2;exit&#125;' $INIFILE)</span></span><br><span class="line">  ReadINI=$(awk -F <span class="string">'='</span> -v it=<span class="string">"<span class="variable">$ITEM</span>"</span> <span class="string">'/\['</span><span class="variable">$SECTION</span><span class="string">'\]/&#123;a=1&#125;a==1&amp;&amp;$1==it&#123;print $2;exit&#125;'</span> <span class="variable">$INIFILE</span>)</span><br><span class="line"><span class="comment">#  ReadINI=$(awk -F '=' -v it="$ITEM" '/\['$SECTION'\]/&#123;a=1&#125;&#123;if(a==1&amp;&amp;$1==it)&#123;print $2;exit&#125;&#125;' $INIFILE)</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$ReadINI</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">WriteINIfile</span></span>() &#123;</span><br><span class="line">  sed -i <span class="string">"/^\[<span class="variable">$SECTION</span>\]/,/^\[/ &#123;/^\[<span class="variable">$SECTION</span>\]/b;/^\[/b;s/^<span class="variable">$ITEM</span>*=.*/<span class="variable">$ITEM</span>=<span class="variable">$NEWVAL</span>/g;&#125;"</span> <span class="variable">$INIFILE</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$4</span>"</span> = <span class="string">""</span> ]; <span class="keyword">then</span></span><br><span class="line">  ReadINIfile <span class="variable">$1</span> <span class="variable">$2</span> <span class="variable">$3</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  WriteINIfile <span class="variable">$1</span> <span class="variable">$2</span> <span class="variable">$3</span> <span class="variable">$4</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>sed命令</title>
    <url>/linux/sed/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="替换中文"><a href="#替换中文" class="headerlink" title="替换中文"></a>替换中文</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed <span class="string">'s/[^ -z]/*/g'</span></span><br></pre></td></tr></table></figure>
<h2 id="按行逆序输出"><a href="#按行逆序输出" class="headerlink" title="按行逆序输出"></a>按行逆序输出</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed -e <span class="string">'1!G; h; $!d'</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>示例：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM_0_13_centos ~]<span class="comment"># seq 4 |sed -e '1!G; h; $!d'</span></span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更简单的命令  tac</span></span><br><span class="line">[root@VM_0_13_centos linux-learning]<span class="comment"># seq 3 |tac</span></span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<p><code>1!G;h;$!d</code> 可拆解为三个命令:</p>
<ul>
<li>1!G —— 只有第一行不执行G命令，将hold space中的内容append回到pattern space</li>
<li>h —— 第一行都执行h命令，将pattern space中的内容拷贝到hold space中</li>
<li>$!d —— 除了最后一行不执行d命令，其它行都执行d命令，删除当前行</li>
</ul>
<p><em>摘自:  <a href="https://blog.csdn.net/weixin_38149264/article/details/78074300" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/weixin_38149264/article/details/78074300</a></em></p>
<h2 id="对符合条件的行操作"><a href="#对符合条件的行操作" class="headerlink" title="对符合条件的行操作"></a>对符合条件的行操作</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM_0_13_centos opt]<span class="comment"># find /opt -type f -name "*.tgz"</span></span><br><span class="line">/opt/note/K8s/yaml/elk/elk2020/e/helm/elasticsearch-7.6.0.tgz</span><br><span class="line">[root@VM_0_13_centos opt]<span class="comment"># find /opt -type f -name "*.tgz" | sed -n -e '/^\/opt\/note\//&#123;s?/opt/note/?Note:?; p&#125;;'		# 暂未找到替代/的方法</span></span><br><span class="line">Note:K8s/yaml/elk/elk2020/e/helm/elasticsearch-7.6.0.tgz</span><br></pre></td></tr></table></figure>
<h2 id="变量含sed分割符"><a href="#变量含sed分割符" class="headerlink" title="变量含sed分割符"></a>变量含sed分割符</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###################</span></span><br><span class="line"><span class="comment"># sed替换目标字符为变量内容时，如果</span></span><br><span class="line"><span class="comment"># 变量内容中含有sed分隔符，需要处理</span></span><br><span class="line"><span class="comment">###################</span></span><br><span class="line"></span><br><span class="line">s=<span class="string">"The remote SSH server rejected X11 forwarding request."</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">assert</span></span>()&#123;</span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">"<span class="variable">$1</span>"</span> = <span class="string">"<span class="variable">$2</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"ok"</span></span><br><span class="line">    <span class="built_in">return</span> 0</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"[<span class="variable">$1</span>] is not equal to [<span class="variable">$2</span>]"</span></span><br><span class="line">    <span class="built_in">return</span> 1</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">w=<span class="string">"accepted"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$s</span>"</span> |sed <span class="string">"s/rejected/<span class="variable">$w</span>/g"</span></span><br><span class="line"></span><br><span class="line">w=<span class="string">"@ccepted"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$s</span>"</span> |sed <span class="string">"s/rejected/<span class="variable">$w</span>/g"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#w="accept/ed"</span></span><br><span class="line"><span class="comment">#echo "$s" |sed "s/rejected/$w/g"    # sed: -e expression #1, char 20: unknown option to `s'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"--------------1"</span></span><br><span class="line">w0=<span class="string">"a#cc/ept/ed"</span></span><br><span class="line">w=$(<span class="built_in">echo</span> <span class="string">"<span class="variable">$w0</span>"</span> |sed <span class="string">'s#/#\\/#g'</span>)     <span class="comment"># 替换为变量的内容时，需先对变量处理，将其中包含的sed分隔符替换成\开头的</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$w</span>"</span></span><br><span class="line">assert <span class="string">"`echo "</span><span class="variable">$s</span><span class="string">" |sed "</span>s/rejected/<span class="variable">$w</span>/g<span class="string">"`"</span>  <span class="string">"The remote SSH server <span class="variable">$w0</span> X11 forwarding request."</span></span><br><span class="line"><span class="built_in">echo</span> $?</span><br></pre></td></tr></table></figure>
<h2 id="手机号匹配"><a href="#手机号匹配" class="headerlink" title="手机号匹配"></a>手机号匹配</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###################</span></span><br><span class="line"><span class="comment"># sed 匹配手机号示例</span></span><br><span class="line"><span class="comment">###################</span></span><br><span class="line"></span><br><span class="line">phone=<span class="string">"my phone is 86+15612348888. his phone is 13912348889. haha!"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&gt;&gt;: <span class="variable">$phone</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$phone</span>"</span> |sed <span class="string">'s/1(3[0-9]|5[1689]|8[6789])[0-9]&#123;8&#125;/xxx/'</span>          <span class="comment"># err</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$phone</span>"</span> |sed <span class="string">'s/\(^\|[^0-9]\)\([0-9]\&#123;3,4\&#125;-\)\?1\(3[0-9]\|5[1689]\|8[6789]\)[0-9]\&#123;8\&#125;/\1***/g'</span></span><br><span class="line"><span class="comment"># 分三段提取 \2\3\4</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$phone</span>"</span> |sed <span class="string">'s/\(^\|[^0-9]\)\([0-9]\&#123;2,4\&#125;[+-]\?\)\?\(13[0-9]\|15[1689]\|18[6789]\)\([0-9]\&#123;8\&#125;\)/\1[\2\3\4]/g'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$phone</span>"</span> |sed <span class="string">'s/\(^\|[^0-9]\)\([0-9]\&#123;2,4\&#125;[+-]\?\)\?\(13[0-9]\|15[1689]\|18[6789]\)\([0-9]\&#123;8\&#125;\)/\1***/g'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$phone</span>"</span> |sed <span class="string">'s/\([0-9]\&#123;2,4\&#125;[+-]\?\)\?\(13[0-9]\|15[1689]\|18[6789]\)\([0-9]\&#123;8\&#125;\)/***/g'</span></span><br></pre></td></tr></table></figure>
<h2 id="提取IP"><a href="#提取IP" class="headerlink" title="提取IP"></a>提取IP</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#######################</span></span><br><span class="line"><span class="comment"># 用途：提取ip各段数字</span></span><br><span class="line"><span class="comment">#######################</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法1</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"method 1: "</span></span><br><span class="line">str=<span class="string">"192.168.31.65"</span></span><br><span class="line">OLD_IFS=<span class="string">"<span class="variable">$IFS</span>"</span> <span class="comment">#保存旧的分隔符</span></span><br><span class="line">IFS=<span class="string">"."</span></span><br><span class="line">array=(<span class="variable">$str</span>)</span><br><span class="line">IFS=<span class="string">"<span class="variable">$OLD_IFS</span>"</span> <span class="comment"># 将IFS恢复成原来的</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">"<span class="variable">$&#123;!array[@]&#125;</span>"</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$i</span>=&gt;<span class="variable">$&#123;array[i]&#125;</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$&#123;array[@]&#125;</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">"<span class="variable">$i</span> "</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法2</span></span><br><span class="line">str=<span class="string">"192.168.31.66"</span></span><br><span class="line">s2=$(<span class="built_in">echo</span> <span class="string">"<span class="variable">$str</span>"</span> |sed <span class="string">'s/\./ /g'</span>)</span><br><span class="line">arr2=(<span class="variable">$s2</span>)</span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">"method 2: "</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;arr2[@]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法2-2</span></span><br><span class="line">str=<span class="string">"192.168.31.67"</span></span><br><span class="line">arr3=($(<span class="built_in">echo</span> <span class="string">"<span class="variable">$str</span>"</span> |sed <span class="string">'s/\./ /g'</span>))</span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">"method 3: "</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;arr3[@]&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell basic 01</title>
    <url>/linux/shell-basic-01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><table>
<thead>
<tr>
<th>参数处理</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>$#</td>
<td>传递到脚本的参数个数</td>
</tr>
<tr>
<td>$*</td>
<td>以一个单字符串显示所有向脚本传递的参数。 如”$*”用「”」括起来的情况、以”$1 $2 … $n”的形式输出所有参数。</td>
</tr>
<tr>
<td>$$</td>
<td>脚本运行的当前进程ID号</td>
</tr>
<tr>
<td>$!</td>
<td>后台运行的最后一个进程的ID号</td>
</tr>
<tr>
<td>$@</td>
<td>与$*相同，但是使用时加引号，并在引号中返回每个参数。 如”$@”用「”」括起来的情况、以”$1” “$2” … “$n” 的形式输出所有参数。</td>
</tr>
<tr>
<td>$-</td>
<td>显示Shell使用的当前选项，与set命令功能相同。</td>
</tr>
<tr>
<td>$?</td>
<td>显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">-a file exists.</span><br><span class="line">-b file exists and is a block special file.</span><br><span class="line">-c file exists and is a character special file.</span><br><span class="line">-d file exists and is a directory.</span><br><span class="line">-e file exists (just the same as -a).</span><br><span class="line">-f file exists and is a regular file.</span><br><span class="line">-g file exists and has its setgid(2) bit <span class="built_in">set</span>.</span><br><span class="line">-G file exists and has the same group ID as this process.</span><br><span class="line">-k file exists and has its sticky bit <span class="built_in">set</span>.</span><br><span class="line">-L file exists and is a symbolic link.</span><br><span class="line">-n string length is not zero.</span><br><span class="line">-o Named option is <span class="built_in">set</span> on.</span><br><span class="line">-O file exists and is owned by the user ID of this process.</span><br><span class="line">-p file exists and is a first <span class="keyword">in</span>, first out (FIFO) special file or named pipe.</span><br><span class="line">-r file exists and is readable by the current process.</span><br><span class="line">-s file exists and has a size greater than zero.</span><br><span class="line">-S file exists and is a socket.</span><br><span class="line">-t file descriptor number fildes is open and associated with a terminal device.</span><br><span class="line">-u file exists and has its setuid(2) bit <span class="built_in">set</span>.</span><br><span class="line">-w file exists and is writable by the current process.</span><br><span class="line">-x file exists and is executable by the current process.</span><br><span class="line">-z string length is zero.</span><br></pre></td></tr></table></figure>
<h2 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">a=abc123abc123</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;a:-2:12&#125;</span> abc123abc123</span><br><span class="line"><span class="variable">$&#123;a:-2:6&#125;</span> abc123abc123</span><br><span class="line"><span class="variable">$&#123;a:0-2:12&#125;</span> 23</span><br><span class="line"><span class="variable">$&#123;a:0-2&#125;</span> 23</span><br><span class="line"><span class="variable">$&#123;a:0-2:&#125;</span></span><br><span class="line"><span class="variable">$&#123;a::-2&#125;</span> abc123abc1</span><br><span class="line"><span class="variable">$&#123;a:0:-2&#125;</span> abc123abc1</span><br><span class="line"><span class="variable">$&#123;a::0-2&#125;</span> abc123abc1</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;a#a&#125;</span> bc123abc123</span><br><span class="line"><span class="variable">$&#123;a##a&#125;</span> bc123abc123</span><br><span class="line"><span class="variable">$&#123;a#*a&#125;</span> bc123abc123</span><br><span class="line"><span class="variable">$&#123;a##*a&#125;</span> bc123</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;a%3&#125;</span> abc123abc12</span><br><span class="line"><span class="variable">$&#123;a%%3&#125;</span> abc123abc12</span><br><span class="line"><span class="variable">$&#123;a%3*&#125;</span> abc123abc12</span><br><span class="line"><span class="variable">$&#123;a%%3*&#125;</span> abc12</span><br></pre></td></tr></table></figure>
<h2 id="选项参数"><a href="#选项参数" class="headerlink" title="选项参数"></a>选项参数</h2><p>getopts 和 getopt 的用法</p>
<p>ref: </p>
<ul>
<li><a href="https://www.cnblogs.com/FrankTan/archive/2010/03/01/1634516.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/FrankTan/archive/2010/03/01/1634516.html</a></li>
<li><a href="https://www.cnblogs.com/tommyjiang/p/10629848.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/tommyjiang/p/10629848.html</a></li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -al </span></span><br><span class="line">GETOPT_ARGS=`getopt -o s:e:n::c: -al sdate:,edate:,numprocs::,cfile: -- <span class="string">"<span class="variable">$@</span>"</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment">#echo "$GETOPT_ARGS"</span></span><br><span class="line"><span class="built_in">eval</span> <span class="built_in">set</span> -- <span class="string">"<span class="variable">$GETOPT_ARGS</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> [ -n <span class="string">"<span class="variable">$1</span>"</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">        -s|--sdate) sdate=<span class="variable">$2</span>; <span class="built_in">shift</span> 2;;</span><br><span class="line">        -e|--edate) edate=<span class="variable">$2</span>; <span class="built_in">shift</span> 2;;</span><br><span class="line">        -n|--numprocs) numprocs=<span class="variable">$2</span>; <span class="built_in">shift</span> 2;;</span><br><span class="line">        -c|--cfile) cfile=<span class="variable">$2</span>; <span class="built_in">shift</span> 2;;</span><br><span class="line">        --) <span class="built_in">break</span> ;;</span><br><span class="line">        *) <span class="built_in">echo</span> <span class="variable">$1</span>,<span class="variable">$2</span>,<span class="variable">$show_usage</span>; <span class="built_in">break</span> ;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<h2 id="shell-求差集-并集-交集"><a href="#shell-求差集-并集-交集" class="headerlink" title="shell 求差集 并集 交集"></a>shell 求差集 并集 交集</h2><p>ref: <a href="https://blog.csdn.net/nwpulei/article/details/38556595" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/nwpulei/article/details/38556595</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM_0_13_centos shell-basic]<span class="comment"># cat a</span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">5</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">[root@VM_0_13_centos shell-basic]<span class="comment"># cat b</span></span><br><span class="line">4</span><br><span class="line">6</span><br><span class="line">5</span><br><span class="line">8</span><br><span class="line">[root@VM_0_13_centos shell-basic]<span class="comment"># ua=$(cat a |sort |uniq)      # a 不重复集</span></span><br><span class="line">[root@VM_0_13_centos shell-basic]<span class="comment"># echo $ua</span></span><br><span class="line">1 2 3 4 5</span><br><span class="line">[root@VM_0_13_centos shell-basic]<span class="comment"># ub=$(cat b |sort |uniq)      # b 不重复集</span></span><br><span class="line">[root@VM_0_13_centos shell-basic]<span class="comment"># echo $ub</span></span><br><span class="line">4 5 6 8</span><br><span class="line">[root@VM_0_13_centos shell-basic]<span class="comment"># uaub=$(echo -e "$ua\n$ub" |sort |uniq -u)      # a和b的差集</span></span><br><span class="line">[root@VM_0_13_centos shell-basic]<span class="comment"># echo $uaub</span></span><br><span class="line">1 2 3 6 8</span><br><span class="line"></span><br><span class="line">[root@VM_0_13_centos shell-basic]<span class="comment"># uab=$(echo -e "$ua\n$ub\n$ub" |sort |uniq -u)  # b相对a的补集</span></span><br><span class="line">[root@VM_0_13_centos shell-basic]<span class="comment"># echo $uab</span></span><br><span class="line">1 2 3</span><br><span class="line">[root@VM_0_13_centos shell-basic]<span class="comment"># uba=$(echo -e "$ua\n$ua\n$ub" |sort |uniq -u)  # a相对b的补集</span></span><br><span class="line">[root@VM_0_13_centos shell-basic]<span class="comment"># echo $uba</span></span><br><span class="line">6 8</span><br><span class="line"></span><br><span class="line">[root@VM_0_13_centos shell-basic]<span class="comment"># cat a b |sort |uniq                             # 并集</span></span><br><span class="line">[root@VM_0_13_centos shell-basic]<span class="comment"># a_b=$(echo -e "$ua\n$ub" |sort |uniq)           # 并集2</span></span><br><span class="line">[root@VM_0_13_centos shell-basic]<span class="comment"># echo $a_b</span></span><br><span class="line">1 2 3 4 5 6 8</span><br><span class="line">[root@VM_0_13_centos shell-basic]<span class="comment"># ab=$(echo -e "$ua\n$ub" |sort |uniq -d)        # 交集</span></span><br><span class="line">[root@VM_0_13_centos shell-basic]<span class="comment"># echo $ab</span></span><br><span class="line">4 5</span><br></pre></td></tr></table></figure>
<h2 id="固定时间间隔"><a href="#固定时间间隔" class="headerlink" title="固定时间间隔"></a>固定时间间隔</h2><p>每5s执行一次命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  sleep 5</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"`date '+%S'`: doing ..."</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>此写法很简单，但可能会产生累积误差。</p>
<p>改成如下可自动校正，使每个周期的实际执行时刻和预期执行时刻的偏差保持在0.5s以内（但sleep间隔不宜过小，0.1到1之间，0.5左右即可，越小CPU负载越高）：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tperiod=5</span><br><span class="line"><span class="built_in">let</span> tnext=`date <span class="string">'+%s'</span>`+tperiod</span><br><span class="line"><span class="built_in">let</span> tend=`date <span class="string">'+%s'</span>`+tperiod*1000  <span class="comment"># 可设定截止时刻，如果无限循环，可去掉tend相关的行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  tnow=`date <span class="string">'+%s'</span>`</span><br><span class="line">  sleep 0.5</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$tnow</span> -gt <span class="variable">$tend</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"end."</span></span><br><span class="line">    <span class="built_in">break</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$tnow</span> -le <span class="variable">$tnext</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">continue</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">let</span> tnext+=tperiod</span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"`date '+%S'`: doing ..."</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell basic 02</title>
    <url>/linux/shell-basic-02/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls /opt/abc &gt;/dev/null 2&gt;&amp;1  # /dev/null位桶, 2&gt;&amp; 须连着</span><br><span class="line">ls /opt/abc &amp;&gt;/dev/null  # &amp;&gt; 须连着</span><br><span class="line">echo &quot;error: ...&quot; 2&gt;/var/log/err.log</span><br><span class="line">ls /opt/abc &gt;./a.log 2&gt;&amp;1</span><br><span class="line">ls /opt/abc 1&gt;./a.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># *扩展</span><br><span class="line">[root@localhost t]# ls</span><br><span class="line">1000-2.txt  1000.txt  xaa  xab  xac  xad</span><br><span class="line"></span><br><span class="line">[root@localhost t]# ls *</span><br><span class="line">1000-2.txt  1000.txt  xaa  xab  xac  xad</span><br><span class="line">[root@localhost t]# echo *</span><br><span class="line">1000-2.txt 1000.txt xaa xab xac xad</span><br><span class="line">[root@localhost t]# echo &quot;*&quot;</span><br><span class="line">*</span><br><span class="line"></span><br><span class="line">[root@localhost t]# echo x*</span><br><span class="line">xaa xab xac xad</span><br><span class="line">[root@localhost t]# echo [[:digit:]]*</span><br><span class="line">1000-2.txt 1000.txt</span><br><span class="line">[root@localhost t]# echo [0-9]*</span><br><span class="line">1000-2.txt 1000.txt</span><br><span class="line">[root@localhost t]# echo [!x]*</span><br><span class="line">1000-2.txt 1000.txt</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 路径扩展</span><br><span class="line">[root@localhost zlz]# echo /opt/www/*/*.log</span><br><span class="line">/opt/www/logs/access.log /opt/www/logs/error.log</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 波浪线扩展为家目录</span><br><span class="line">[root@localhost zlz]# echo ~</span><br><span class="line">/root</span><br><span class="line">[root@localhost t]# echo ~zeng</span><br><span class="line">/home/zeng</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 算术扩展 $</span><br><span class="line">[root@localhost zlz]# echo $((2+2))</span><br><span class="line">4</span><br><span class="line"></span><br><span class="line"># 参数扩展</span><br><span class="line">[root@localhost zlz]# echo $USER</span><br><span class="line">root</span><br><span class="line"></span><br><span class="line"># 命令替换</span><br><span class="line">[root@localhost zlz]# ls -l $(which cat)</span><br><span class="line">-rwxr-xr-x. 1 root root 54048 Nov 19  2015 /usr/bin/cat</span><br><span class="line"></span><br><span class="line"># 反引号命令替换</span><br><span class="line">[root@localhost zlz]# ls -l `which cat`</span><br><span class="line">-rwxr-xr-x. 1 root root 54048 Nov 19  2015 /usr/bin/cat</span><br></pre></td></tr></table></figure>
<p>以上算术扩展、参数扩展、命令替换都视作$表达式，相当于变量，非单引号包围可被解析，否则不解析：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost zlz]# echo &apos;$(which cat)&apos;</span><br><span class="line">$(which cat)</span><br><span class="line">[root@localhost zlz]# echo &apos;`which cat`&apos;</span><br><span class="line">`which cat`</span><br><span class="line">[root@localhost zlz]# echo &apos;$USER&apos;</span><br><span class="line">$USER</span><br><span class="line">[root@localhost zlz]# echo &apos;$((2+2))&apos;</span><br><span class="line">$((2+2))</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># &#123;&#125;扩展</span><br><span class="line">[root@kafka-1 ~]# echo &#123;a..c&#125;&#123;0..2&#125; |xargs -n 3</span><br><span class="line">a0 a1 a2</span><br><span class="line">b0 b1 b2</span><br><span class="line">c0 c1 c2</span><br><span class="line"></span><br><span class="line">[root@localhost zlz]# echo a&#123;A&#123;1,2&#125;,B&#123;3,4&#125;&#125;b</span><br><span class="line">aA1b aA2b aB3b aB4b</span><br></pre></td></tr></table></figure>
<h2 id="特殊权限"><a href="#特殊权限" class="headerlink" title="特殊权限"></a>特殊权限</h2><p><strong>setuid</strong></p>
<p>应用于可执行文件，会将有效用户ID（effective user ID）从真实用户（实际执行程序的用户）ID更改为程序属主的有效用户ID。</p>
<p><strong>setgid</strong></p>
<p>会将有效组ID（effective group ID）从真实用户的真实组ID（real group ID）更改为文件属主的有效组ID。</p>
<p><strong>sticky</strong></p>
<p>用于将可执行文件标记为“不可交换”。Linux会忽略文件上设置的粘滞位，如果对目录设置了粘滞位，则能够阻止用户删除或者重命名其中的文件，除非用户是该目录的属主，或者是文件的属主，又或者是超级用户。粘滞位常用来控制对共享目录（如/tmp）的访问。</p>
<h2 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h2><p>cp不加选项参数复制时，访问时间、修改时间都会变，加上 <code>-p</code> 或 <code>--preserve</code> 可保持，但change时间（状态改变时间）是按最新的。状态改变时间通过chmod命令更改文件属性时也会更新。文件通过sed或vi修改保存，3个时间都更新为最新时间，通过echo追加内容时modify时间和change时间会更新为最新时间。</p>
<p>Linux中文件没有创建时间的概念。</p>
<h2 id="su-amp-sudo"><a href="#su-amp-sudo" class="headerlink" title="su &amp; sudo"></a>su &amp; sudo</h2><p>sudo不需要启动新的shell，也不需要加载其他用户的环境。这意味着sudo不需要引用命令。</p>
<p>sudo不需要输入root密码，如果通过visudo或直接编辑/etc/sudoers文件配置免密sudo，那么可以免密执行，否则输入sudo提权密码。而 <code>su -</code> 或 <code>su</code> 是真正切换到root用户环境，需要输入root密码。</p>
<p>sudo命令的-i选项可用于启动一个交互式的超级用户Shell会话（和 <code>su -</code> 差不多）。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">su -c <span class="string">'ls -l /root /*'</span></span><br><span class="line">sudo ls -l /root /*</span><br></pre></td></tr></table></figure>
<h2 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h2><p>常用于显示短文本，也可以配合split用来连接多个文件。</p>
<p>split分割文件：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost t]<span class="comment"># seq 1000 &gt; 1000.txt</span></span><br><span class="line">[root@localhost t]<span class="comment"># ll 1000.txt</span></span><br><span class="line">-rw-r--r--. 1 root root 3893 Oct 31 06:44 1000.txt</span><br><span class="line">[root@localhost t]<span class="comment"># split -b 1KB 1000.txt</span></span><br><span class="line">[root@localhost t]<span class="comment"># ll</span></span><br><span class="line">total 20</span><br><span class="line">-rw-r--r--. 1 root root 3893 Oct 31 06:44 1000.txt</span><br><span class="line">-rw-r--r--. 1 root root 1000 Oct 31 06:45 xaa</span><br><span class="line">-rw-r--r--. 1 root root 1000 Oct 31 06:45 xab</span><br><span class="line">-rw-r--r--. 1 root root 1000 Oct 31 06:45 xac</span><br><span class="line">-rw-r--r--. 1 root root  893 Oct 31 06:45 xad</span><br><span class="line">[root@localhost t]<span class="comment"># </span></span><br><span class="line">[root@localhost t]<span class="comment"># getconf PAGESIZE</span></span><br><span class="line">4096</span><br><span class="line">[root@localhost t]<span class="comment"># ls -sl</span></span><br><span class="line">total 20</span><br><span class="line">4 -rw-r--r--. 1 root root 3893 Oct 31 06:44 1000.txt</span><br><span class="line">4 -rw-r--r--. 1 root root 1000 Oct 31 06:45 xaa</span><br><span class="line">4 -rw-r--r--. 1 root root 1000 Oct 31 06:45 xab</span><br><span class="line">4 -rw-r--r--. 1 root root 1000 Oct 31 06:45 xac</span><br><span class="line">4 -rw-r--r--. 1 root root  893 Oct 31 06:45 xad</span><br></pre></td></tr></table></figure>
<p>顺便记一下，ls -l 第一行total表示总的占用空间（单位：KB）。一个block占4KB，一个文件至少占一个block。</p>
<p>cat连接文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost t]# cat xa* &gt; 1000-2.txt</span><br><span class="line">[root@localhost t]# ll</span><br><span class="line">total 24</span><br><span class="line">-rw-r--r--. 1 root root 3893 Oct 31 06:56 1000-2.txt</span><br><span class="line">-rw-r--r--. 1 root root 3893 Oct 31 06:44 1000.txt</span><br><span class="line">-rw-r--r--. 1 root root 1000 Oct 31 06:45 xaa</span><br><span class="line">-rw-r--r--. 1 root root 1000 Oct 31 06:45 xab</span><br><span class="line">-rw-r--r--. 1 root root 1000 Oct 31 06:45 xac</span><br><span class="line">-rw-r--r--. 1 root root  893 Oct 31 06:45 xad</span><br><span class="line">[root@localhost t]# </span><br><span class="line">[root@localhost t]# diff 1000.txt 1000-2.txt </span><br><span class="line">[root@localhost t]#</span><br></pre></td></tr></table></figure>
<p>在控制台不带参数cat，通过ctrl-D发送EOF结束输入：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost zlz]<span class="comment"># cat &gt; test_cat.log</span></span><br><span class="line">this is line1        </span><br><span class="line">line2</span><br><span class="line">[root@localhost zlz]<span class="comment"># cat test_cat.log </span></span><br><span class="line">this is line1</span><br><span class="line">line2</span><br></pre></td></tr></table></figure>
<h2 id="tee"><a href="#tee" class="headerlink" title="tee"></a>tee</h2><p>tee，管道T形转接头。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost t]<span class="comment"># ls</span></span><br><span class="line">1000-2.txt  1000.txt  1.txt  xaa  xab  xac  xad</span><br><span class="line">[root@localhost t]<span class="comment"># ls |tee 1.txt |grep xa</span></span><br><span class="line">xaa</span><br><span class="line">xab</span><br><span class="line">xac</span><br><span class="line">xad</span><br><span class="line">[root@localhost t]<span class="comment"># cat 1.txt</span></span><br><span class="line">1000-2.txt</span><br><span class="line">1000.txt</span><br><span class="line">1.txt</span><br><span class="line">xaa</span><br><span class="line">xab</span><br><span class="line">xac</span><br><span class="line">xad</span><br></pre></td></tr></table></figure>
<h2 id="共享目录"><a href="#共享目录" class="headerlink" title="共享目录"></a>共享目录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[zeng@localhost opt]$ groups</span><br><span class="line">zeng</span><br><span class="line">[zeng@localhost opt]$ umask</span><br><span class="line">0002</span><br><span class="line">[zeng@localhost opt]$ sudo groupadd share</span><br><span class="line">[zeng@localhost opt]$ sudo usermod -a -G share zeng</span><br><span class="line">[zeng@localhost opt]$ groups zeng</span><br><span class="line">zeng : zeng share</span><br><span class="line"></span><br><span class="line"># 添加其他用户到share组</span><br><span class="line">$ sudo useradd -m -c &quot;John Doo&quot; -s /bin/bash -G share john</span><br><span class="line"></span><br><span class="line">[zeng@localhost opt]$ sudo mkdir /opt/share</span><br><span class="line">[zeng@localhost opt]$ ls -ld share</span><br><span class="line">drwxr-xr-x. 2 root root 6 Oct 31 09:49 share</span><br><span class="line"></span><br><span class="line">[zeng@localhost opt]$ sudo chown :share share</span><br><span class="line">[zeng@localhost opt]$ ls -ld share</span><br><span class="line">drwxr-xr-x. 2 root share 6 Oct 31 09:49 share</span><br><span class="line"></span><br><span class="line">[zeng@localhost opt]$ sudo chmod g+sw share  # 或者chmod 2775</span><br><span class="line">[zeng@localhost opt]$ ls -ld share</span><br><span class="line">drwxrwsr-x. 2 root share 6 Oct 31 09:49 share</span><br><span class="line"></span><br><span class="line">[zeng@localhost opt]$ </span><br><span class="line">[zeng@localhost opt]$ vi share/f01</span><br><span class="line">[zeng@localhost opt]$ mkdir share/d01</span><br><span class="line"></span><br><span class="line"># ！！centos下实测提示无权限，但上述步骤应该是正确的</span><br></pre></td></tr></table></figure>
<h2 id="bash提示符"><a href="#bash提示符" class="headerlink" title="bash提示符"></a>bash提示符</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PS1=<span class="string">"[\u@\h \W]\\$ "</span></span><br><span class="line">[ <span class="string">"<span class="variable">$PS1</span>"</span> = <span class="string">"\\s-\\v\\\$ "</span> ] &amp;&amp; PS1=<span class="string">"[\u@\h \W]\\$ "</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 说明：</span></span><br><span class="line">\u：用户名</span><br><span class="line">\h：短主机名</span><br><span class="line">\W：当前目录</span><br><span class="line">\s：Shell名称</span><br><span class="line">\v：Shell版本号</span><br></pre></td></tr></table></figure>
<h2 id="vi-amp-vim"><a href="#vi-amp-vim" class="headerlink" title="vi &amp; vim"></a>vi &amp; vim</h2><table>
<thead>
<tr>
<th style="text-align:left">操作</th>
<th>按键</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">当前字符前/后继续输入</td>
<td>i/a</td>
</tr>
<tr>
<td style="text-align:left">当前行首/尾输入</td>
<td>I/A</td>
</tr>
<tr>
<td style="text-align:left">删除当前字符</td>
<td>x</td>
</tr>
<tr>
<td style="text-align:left">粘贴到当前行上/下一行</td>
<td>P/p</td>
</tr>
<tr>
<td style="text-align:left">合并行</td>
<td>J</td>
</tr>
<tr>
<td style="text-align:left">后/前一个单词、后/前一个字符、下/上一行</td>
<td>w/b、l/h、j/k</td>
</tr>
<tr>
<td style="text-align:left">前/后一个文件（的缓冲区）</td>
<td>:bn/:bp</td>
</tr>
<tr>
<td style="text-align:left">列出缓冲区文件</td>
<td>:buffers</td>
</tr>
<tr>
<td style="text-align:left">切换到指定缓冲区n</td>
<td>:buffer n</td>
</tr>
<tr>
<td style="text-align:left">删除以下10行（含当前行）</td>
<td>:10dd，:d9+</td>
</tr>
<tr>
<td style="text-align:left">删除以上10行（含当前行）</td>
<td>:d9-</td>
</tr>
<tr>
<td style="text-align:left">删除以下所有行</td>
<td>:dG</td>
</tr>
<tr>
<td style="text-align:left">显示/关闭行号</td>
<td>:set nu!</td>
</tr>
<tr>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<h2 id="read命令"><a href="#read命令" class="headerlink" title="read命令"></a>read命令</h2><h3 id="接参"><a href="#接参" class="headerlink" title="接参"></a>接参</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@kafka-1 ~]<span class="comment"># ll</span></span><br><span class="line">total 4</span><br><span class="line">-rw-------. 1 root root 2744 Feb 15  2020 anaconda-ks.cfg</span><br><span class="line">drwxr-xr-x. 2 root root    6 Feb 15  2020 Desktop</span><br><span class="line">drwxr-xr-x. 2 root root    6 Feb 15  2020 Documents</span><br><span class="line">drwxr-xr-x. 2 root root    6 Feb 15  2020 Downloads</span><br><span class="line">drwxr-xr-x. 2 root root    6 Feb 15  2020 Music</span><br><span class="line">drwxr-xr-x. 2 root root    6 Feb 15  2020 Pictures</span><br><span class="line">drwxr-xr-x. 2 root root    6 Feb 15  2020 Public</span><br><span class="line">drwxr-xr-x. 2 root root    6 Feb 15  2020 Templates</span><br><span class="line">drwxr-xr-x. 2 root root    6 Feb 15  2020 Videos</span><br><span class="line">[root@kafka-1 ~]<span class="comment"># </span></span><br><span class="line">[root@kafka-1 ~]<span class="comment"># ll |while read fa ft fu fg fz m d y fn; do echo "$fn: $fz"; done |tail -n +2</span></span><br><span class="line">anaconda-ks.cfg: 2744</span><br><span class="line">Desktop: 6</span><br><span class="line">Documents: 6</span><br><span class="line">Downloads: 6</span><br><span class="line">Music: 6</span><br><span class="line">Pictures: 6</span><br><span class="line">Public: 6</span><br><span class="line">Templates: 6</span><br><span class="line">Videos: 6</span><br></pre></td></tr></table></figure>
<h3 id="输入密码"><a href="#输入密码" class="headerlink" title="输入密码"></a>输入密码</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@kafka-1 ~]<span class="comment"># read -sp "password: " a</span></span><br><span class="line">password: [root@kafka-1 ~]<span class="comment"># echo $a</span></span><br><span class="line">abc123</span><br></pre></td></tr></table></figure>
<h3 id="指定IFS"><a href="#指定IFS" class="headerlink" title="指定IFS"></a>指定IFS</h3><p>本命令执行期间新IFS有效：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@kafka-1 ~]<span class="comment"># IFS=. read a b c</span></span><br><span class="line">a.b.c</span><br><span class="line">[root@kafka-1 ~]<span class="comment"># echo $a</span></span><br><span class="line">a</span><br><span class="line">[root@kafka-1 ~]<span class="comment"># echo $b</span></span><br><span class="line">b</span><br><span class="line">[root@kafka-1 ~]<span class="comment"># echo $c</span></span><br><span class="line">c</span><br><span class="line"></span><br><span class="line"><span class="comment"># 继续执行</span></span><br><span class="line">[root@kafka-1 ~]<span class="comment"># read a b c</span></span><br><span class="line">a.b.c</span><br><span class="line">[root@kafka-1 ~]<span class="comment"># echo $a</span></span><br><span class="line">a.b.c</span><br><span class="line">[root@kafka-1 ~]<span class="comment"># echo $b</span></span><br><span class="line"></span><br><span class="line">[root@kafka-1 ~]<span class="comment"># echo $c</span></span><br></pre></td></tr></table></figure>
<p>本shell内新IFS有效（注意分号）：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@kafka-1 ~]<span class="comment"># IFS=.; read a b c</span></span><br><span class="line">a.b.c</span><br><span class="line">[root@kafka-1 ~]<span class="comment"># echo $c</span></span><br><span class="line">c</span><br><span class="line">[root@kafka-1 ~]<span class="comment"># read a b c</span></span><br><span class="line">x.y.z</span><br><span class="line">[root@kafka-1 ~]<span class="comment"># echo $c</span></span><br></pre></td></tr></table></figure>
<p>但是 <code>while read</code> 或 <code>for in</code> 循环中需加分号：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@kafka-1 ~]<span class="comment"># IFS=. while read a b c; do echo "$a,$b,$c"; done</span></span><br><span class="line">-bash: syntax error near unexpected token `<span class="keyword">do</span><span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[root@kafka-1 ~]# IFS=. for i in a.b.c; do echo "$i ..."; done</span></span><br><span class="line"><span class="string">-bash: syntax error near unexpected token `do'</span></span><br><span class="line">[root@kafka-1 ~]<span class="comment"># IFS=.; for i in a.b.c; do echo "$i ..."; done</span></span><br><span class="line">a.b.c ...</span><br><span class="line"></span><br><span class="line">[root@kafka-1 ~]<span class="comment"># IFS=$'\n' for i in `ll`; do echo "$i"; done</span></span><br><span class="line">-bash: syntax error near unexpected token `<span class="keyword">do</span><span class="string">'</span></span><br><span class="line"><span class="string">[root@kafka-1 ~]# IFS=$'</span>\n<span class="string">'; for i in `ll`; do echo "$i"; done</span></span><br><span class="line"><span class="string">total 4</span></span><br><span class="line"><span class="string">-rw-------. 1 root root 2744 Feb 15  2020 anaconda-ks.cfg</span></span><br><span class="line"><span class="string">drwxr-xr-x. 2 root root    6 Feb 15  2020 Desktop</span></span><br><span class="line"><span class="string">drwxr-xr-x. 2 root root    6 Feb 15  2020 Documents</span></span><br><span class="line"><span class="string">drwxr-xr-x. 2 root root    6 Feb 15  2020 Downloads</span></span><br><span class="line"><span class="string">drwxr-xr-x. 2 root root    6 Feb 15  2020 Music</span></span><br><span class="line"><span class="string">drwxr-xr-x. 2 root root    6 Feb 15  2020 Pictures</span></span><br><span class="line"><span class="string">drwxr-xr-x. 2 root root    6 Feb 15  2020 Public</span></span><br><span class="line"><span class="string">drwxr-xr-x. 2 root root    6 Feb 15  2020 Templates</span></span><br><span class="line"><span class="string">drwxr-xr-x. 2 root root    6 Feb 15  2020 Videos</span></span><br></pre></td></tr></table></figure>
<h2 id="软件包管理"><a href="#软件包管理" class="headerlink" title="软件包管理"></a>软件包管理</h2><p>打包工具：</p>
<table>
<thead>
<tr>
<th>Linux发行版</th>
<th>低层工具</th>
<th>高层工具</th>
</tr>
</thead>
<tbody>
<tr>
<td>redhat</td>
<td>rpm</td>
<td>yum</td>
</tr>
<tr>
<td>debian</td>
<td>dpkg</td>
<td>apt-get</td>
</tr>
</tbody>
</table>
<p>命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出软件包</span></span><br><span class="line">rpm -qa</span><br><span class="line">dpkg -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 软件包是否已安装</span></span><br><span class="line">rpm -q vim  <span class="comment"># redhat</span></span><br><span class="line">dpkg -s vim  <span class="comment"># debian</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 反查软件包</span></span><br><span class="line">rpm -qf /usr/bin/vim</span><br><span class="line">dpkg -S /usr/bin/vim</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>清理ELK的旧索引</title>
    <url>/log-analysis/clean_elk_indices/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<p>安装elasticsearch-curator</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip install elasticsearch-curator</span><br><span class="line"></span><br><span class="line">如果报错<span class="string">"ERROR: Cannot uninstall 'PyYAML'. It is a distutils installed ..."</span></span><br><span class="line"></span><br><span class="line">pip install pip==8.0.3</span><br><span class="line">pip uninstall pyyaml</span><br><span class="line">pip install elasticsearch-curator</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>配置示例：<br><em>~/.curator/curator.yml</em></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">client:</span></span><br><span class="line">  <span class="attr">hosts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">10.1</span><span class="number">.7</span><span class="number">.211</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9200</span></span><br><span class="line">  <span class="attr">url_prefix:</span></span><br><span class="line">  <span class="attr">use_ssl:</span> <span class="literal">False</span></span><br><span class="line">  <span class="attr">certificate:</span></span><br><span class="line">  <span class="attr">client_cert:</span></span><br><span class="line">  <span class="attr">client_key:</span></span><br><span class="line">  <span class="attr">aws_key:</span></span><br><span class="line">  <span class="attr">aws_secret_key:</span></span><br><span class="line">  <span class="attr">aws_region:</span></span><br><span class="line">  <span class="attr">ssl_no_validate:</span> <span class="literal">False</span></span><br><span class="line">  <span class="attr">http_auth:</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">100</span></span><br><span class="line">  <span class="attr">master_only:</span> <span class="literal">False</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">loglevel:</span> <span class="string">INFO</span></span><br><span class="line">  <span class="attr">logfile:</span></span><br><span class="line">  <span class="attr">logformat:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">blacklist:</span> <span class="string">[‘elasticsearch’]</span></span><br></pre></td></tr></table></figure>
<p>action文件配置：<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">actions:</span></span><br><span class="line">  <span class="attr">1:</span></span><br><span class="line">    <span class="attr">action:</span> <span class="string">delete_indices</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">&gt;-</span></span><br><span class="line">      <span class="string">Delete</span> <span class="string">indices</span> <span class="string">older</span> <span class="string">than</span> <span class="number">10</span> <span class="string">days</span> <span class="string">(based</span> <span class="string">on</span> <span class="string">index</span> <span class="string">name).</span></span><br><span class="line">    <span class="attr">options:</span></span><br><span class="line">      <span class="attr">ignore_empty_list:</span> <span class="literal">True</span></span><br><span class="line">      <span class="attr">timeout_override:</span></span><br><span class="line">      <span class="attr">continue_if_exception:</span> <span class="literal">False</span></span><br><span class="line">      <span class="attr">disable_action:</span> <span class="literal">False</span></span><br><span class="line">    <span class="attr">filters:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">filtertype:</span> <span class="string">pattern</span></span><br><span class="line">      <span class="attr">kind:</span> <span class="string">prefix</span></span><br><span class="line">      <span class="attr">value:</span> <span class="string">'[a-z]'</span> <span class="comment">#匹配小写字母开头的index</span></span><br><span class="line">      <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">filtertype:</span> <span class="string">age</span></span><br><span class="line">      <span class="attr">source:</span> <span class="string">name</span></span><br><span class="line">      <span class="attr">direction:</span> <span class="string">older</span></span><br><span class="line">      <span class="attr">timestring:</span> <span class="string">'%Y.%m.%d'</span></span><br><span class="line">      <span class="attr">unit:</span> <span class="string">days</span></span><br><span class="line">      <span class="attr">unit_count:</span> <span class="number">10</span></span><br><span class="line">      <span class="attr">exclude:</span></span><br></pre></td></tr></table></figure></p>
<p>只按时间匹配：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">actions:</span></span><br><span class="line">  <span class="attr">1:</span></span><br><span class="line">    <span class="attr">action:</span> <span class="string">delete_indices</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">&gt;-</span></span><br><span class="line">      <span class="string">Delete</span> <span class="string">indices</span> <span class="string">older</span> <span class="string">than</span> <span class="number">8</span> <span class="string">days</span> <span class="string">(based</span> <span class="string">on</span> <span class="string">index</span> <span class="string">name).</span></span><br><span class="line">    <span class="attr">options:</span></span><br><span class="line">      <span class="attr">ignore_empty_list:</span> <span class="literal">True</span></span><br><span class="line">      <span class="attr">timeout_override:</span></span><br><span class="line">      <span class="attr">continue_if_exception:</span> <span class="literal">False</span></span><br><span class="line">      <span class="attr">disable_action:</span> <span class="literal">False</span></span><br><span class="line">    <span class="attr">filters:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">filtertype:</span> <span class="string">age</span></span><br><span class="line">      <span class="attr">source:</span> <span class="string">name</span></span><br><span class="line">      <span class="attr">direction:</span> <span class="string">older</span></span><br><span class="line">      <span class="attr">timestring:</span> <span class="string">'%Y.%m.%d'</span></span><br><span class="line">      <span class="attr">unit:</span> <span class="string">days</span></span><br><span class="line">      <span class="attr">unit_count:</span> <span class="number">8</span></span><br><span class="line">      <span class="attr">exclude:</span></span><br></pre></td></tr></table></figure>
<p>执行清理：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命令用法</span></span><br><span class="line">curator &lt;action file&gt; [--config &lt;config file&gt;] [--dry-run]</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@<span class="built_in">test</span>-vm150 opt]<span class="comment"># curator ac.yml</span></span><br><span class="line">2019-08-19 12:02:22,174 INFO      Preparing Action ID: 1, <span class="string">"delete_indices"</span></span><br><span class="line">2019-08-19 12:02:22,191 INFO      GET http://10.1.7.211:9200/ [status:200 request:0.011s]</span><br><span class="line">2019-08-19 12:02:22,191 INFO      Trying Action ID: 1, <span class="string">"delete_indices"</span>: Delete indices older than 30 days (based on index name).</span><br><span class="line">...</span><br><span class="line">2019-08-19 12:02:22,762 INFO      Deleting 7 selected indices: [u<span class="string">'keepcorests-log-2019.08.08'</span>, u<span class="string">'keepcorests-log-2019.08.09'</span>, u<span class="string">'keepweb.mdmadapter-log-2019.08.09'</span>, u<span class="string">'fms-log-2019.08.08'</span>, u<span class="string">'fms-log-2019.08.09'</span>, u<span class="string">'keep_onecardsolution-log-2019.08.08'</span>, u<span class="string">'keep_onecardsolution-log-2019.08.09'</span>]</span><br><span class="line">2019-08-19 12:02:22,762 INFO      ---deleting index keepcorests-log-2019.08.08</span><br><span class="line">2019-08-19 12:02:22,763 INFO      ---deleting index keepcorests-log-2019.08.09</span><br><span class="line">2019-08-19 12:02:22,763 INFO      ---deleting index keepweb.mdmadapter-log-2019.08.09</span><br><span class="line">2019-08-19 12:02:22,763 INFO      ---deleting index fms-log-2019.08.08</span><br><span class="line">2019-08-19 12:02:22,763 INFO      ---deleting index fms-log-2019.08.09</span><br><span class="line">2019-08-19 12:02:22,763 INFO      ---deleting index keep_onecardsolution-log-2019.08.08</span><br><span class="line">2019-08-19 12:02:22,763 INFO      ---deleting index keep_onecardsolution-log-2019.08.09</span><br><span class="line">2019-08-19 12:02:23,049 INFO      DELETE http://10.1.7.211:9200/fms-log-2019.08.08,fms-log-2019.08.09,keep_onecardsolution-log-2019.08.08,keep_onecardsolution-log-2019.08.09,keepcorests-log-2019.08.08,keepcorests-log-2019.08.09,keepweb.mdmadapter-log-2019.08.09?master_timeout=100s [status:200 request:0.286s]</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>ELK</tag>
      </tags>
  </entry>
  <entry>
    <title>ELK若干问题记录</title>
    <url>/log-analysis/elk-problems/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>记录使用ELK遇到的几个问题</p>
</blockquote>
<a id="more"></a>
<h2 id="输出日志多耗尽磁盘空闲空间"><a href="#输出日志多耗尽磁盘空闲空间" class="headerlink" title="输出日志多耗尽磁盘空闲空间"></a>输出日志多耗尽磁盘空闲空间</h2><p>/usr/share/elasticsearch/config/log4j2.properties  置logLevel: off</p>
<h2 id="ES默认分片数1000不够的问题"><a href="#ES默认分片数1000不够的问题" class="headerlink" title="ES默认分片数1000不够的问题"></a>ES默认分片数1000不够的问题</h2><p>索引es报如下错误：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"error"</span> : &#123;</span><br><span class="line">    <span class="attr">"root_cause"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"type"</span> : <span class="string">"validation_exception"</span>,</span><br><span class="line">        <span class="attr">"reason"</span> : <span class="string">"Validation Failed: 1: this action would add [2] total shards, but this cluster currently has [1000]/[1000] maximum shards open;"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"type"</span> : <span class="string">"validation_exception"</span>,</span><br><span class="line">    <span class="attr">"reason"</span> : <span class="string">"Validation Failed: 1: this action would add [2] total shards, but this cluster currently has [1000]/[1000] maximum shards open;"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"status"</span> : <span class="number">400</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>解决：设置最大分片数3000</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">PUT /_cluster/settings</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"transient"</span>: &#123;</span><br><span class="line">    <span class="string">"cluster"</span>: &#123;</span><br><span class="line">      <span class="string">"max_shards_per_node"</span>:3000</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="docker-compose限制ELK的CPU、内存"><a href="#docker-compose限制ELK的CPU、内存" class="headerlink" title="docker-compose限制ELK的CPU、内存"></a>docker-compose限制ELK的CPU、内存</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.7'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">elasticsearch:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">...</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">	<span class="attr">resources:</span></span><br><span class="line">	  <span class="attr">limits:</span></span><br><span class="line">		<span class="attr">cpus:</span> <span class="string">'0.50'</span></span><br><span class="line">		<span class="attr">memory:</span> <span class="string">4096M</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure>
<p>启动命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker-compose --compatibility up -d</span><br></pre></td></tr></table></figure>
<h2 id="elasticsearch、kibana-通过NginX作Basic-Auth认证"><a href="#elasticsearch、kibana-通过NginX作Basic-Auth认证" class="headerlink" title="elasticsearch、kibana 通过NginX作Basic Auth认证"></a>elasticsearch、kibana 通过NginX作Basic Auth认证</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">upstream kb443 &#123;</span><br><span class="line">    server 127.0.0.1:5601;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstream es443 &#123;</span><br><span class="line">    server 127.0.0.1:9200;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    ssl_certificate /etc/letsencrypt/live/keep.com/fullchain.pem;</span><br><span class="line">    ssl_certificate_key /etc/letsencrypt/live/keep.com/privkey.pem;</span><br><span class="line">    server_name es.keep.com;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">      auth_basic "secret";</span><br><span class="line">      auth_basic_user_file /etc/nginx/nginx_passwd.kibana;</span><br><span class="line">      proxy_pass http://es443;</span><br><span class="line">      proxy_redirect off;</span><br><span class="line">      proxy_buffering off;</span><br><span class="line">      proxy_http_version 1.1;</span><br><span class="line">      proxy_set_header Connection "Keep-Alive";</span><br><span class="line">      proxy_set_header Proxy-Connection "Keep-Alive";</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    ssl_certificate /etc/letsencrypt/live/keep.com/fullchain.pem;</span><br><span class="line">    ssl_certificate_key /etc/letsencrypt/live/keep.com/privkey.pem;</span><br><span class="line">    server_name kibana.keep.com;</span><br><span class="line"></span><br><span class="line">    root html;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line">    access_log /var/log/nginx/kibana-443.access.log main;</span><br><span class="line">    error_log /var/log/nginx/kibana-443.error.log ;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        auth_basic "secret";</span><br><span class="line">        auth_basic_user_file /etc/nginx/nginx_passwd.kibana;</span><br><span class="line">        proxy_pass              http://kb443;</span><br><span class="line">        proxy_redirect          off;</span><br><span class="line">        proxy_set_header    Host        $host;</span><br><span class="line">        proxy_set_header    X-Real-IP   $remote_addr;</span><br><span class="line">        proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_redirect http://$host http://$host:$server_port;</span><br><span class="line">        add_header Strict-Transport-Security "max-age=31536000";</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page  500 502 503 504 /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>更新用户名/密码：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum install httpd-tools -y</span></span><br><span class="line">htpasswd -c -b /etc/nginx/nginx_passwd.kibana <span class="variable">$username</span> <span class="variable">$password</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>ELK</tag>
      </tags>
  </entry>
  <entry>
    <title>ES分组权限管理的账号设置</title>
    <url>/log-analysis/es-account-manage/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<blockquote>
<p>基于X-Pack权限控制版ES，给不同项目组、用户分配不同的权限</p>
</blockquote>
<a id="more"></a>
<h2 id="创建角色"><a href="#创建角色" class="headerlink" title="创建角色"></a>创建角色</h2><p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/es-account-manage.assets/1579570458650.png" alt="1579570458650"></p>
<h3 id="设置角色的ES权限"><a href="#设置角色的ES权限" class="headerlink" title="设置角色的ES权限"></a>设置角色的ES权限</h3><p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/es-account-manage.assets/1579570909750.png" alt="1579570909750"></p>
<h3 id="设置角色的Kibana权限"><a href="#设置角色的Kibana权限" class="headerlink" title="设置角色的Kibana权限"></a>设置角色的Kibana权限</h3><p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/es-account-manage.assets/1579570803128.png" alt="1579570803128"></p>
<h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/es-account-manage.assets/1579570327982.png" alt="1579570327982"></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/es-account-manage.assets/1579571404585.png" alt="1579571404585"></p>
<h3 id="新用户登录"><a href="#新用户登录" class="headerlink" title="新用户登录"></a>新用户登录</h3><p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/es-account-manage.assets/1579571546419.png" alt="1579571546419"></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/es-account-manage.assets/1579571702942.png" alt="1579571702942"></p>
<h3 id="测试ES索引权限"><a href="#测试ES索引权限" class="headerlink" title="测试ES索引权限"></a>测试ES索引权限</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -XPUT -u es:password <span class="string">"http://es.keep.com/es-test/_doc/1?pretty"</span> -H <span class="string">'Content-Type: application/json'</span> -d <span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  "name": "John"</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"error"</span> : &#123;</span><br><span class="line">    <span class="attr">"root_cause"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"type"</span> : <span class="string">"security_exception"</span>,</span><br><span class="line">        <span class="attr">"reason"</span> : <span class="string">"action [indices:admin/create] is unauthorized for user [es]"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"type"</span> : <span class="string">"security_exception"</span>,</span><br><span class="line">    <span class="attr">"reason"</span> : <span class="string">"action [indices:admin/create] is unauthorized for user [es]</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  "</span>status<span class="string">" : 403</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
<p>权限不够，不能创建该索引。</p>
<p>使用elastic账号查看已创建的role_es具体有哪些权限：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -XGET -u elastic:xxxxxx <span class="string">"http://es.keep.com/_xpack/security/role/role_es"</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"role_es"</span>: &#123;</span><br><span class="line">    <span class="string">"cluster"</span>: [],</span><br><span class="line">    <span class="string">"indices"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"names"</span>: [</span><br><span class="line">          <span class="string">"es.*"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"privileges"</span>: [</span><br><span class="line">          <span class="string">"all"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"field_security"</span>: &#123;</span><br><span class="line">          <span class="string">"grant"</span>: [</span><br><span class="line">            <span class="string">"*"</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="string">"except"</span>: []</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"allow_restricted_indices"</span>: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"applications"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"application"</span>: <span class="string">"kibana-.kibana"</span>,</span><br><span class="line">        <span class="string">"privileges"</span>: [</span><br><span class="line">          <span class="string">"feature_discover.all"</span>,</span><br><span class="line">          <span class="string">"feature_visualize.all"</span>,</span><br><span class="line">          <span class="string">"feature_dashboard.all"</span>,</span><br><span class="line">          <span class="string">"feature_dev_tools.all"</span>,</span><br><span class="line">          <span class="string">"feature_indexPatterns.all"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"resources"</span>: [</span><br><span class="line">          <span class="string">"space:default"</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"run_as"</span>: [],</span><br><span class="line">    <span class="string">"metadata"</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">"transient_metadata"</span>: &#123;</span><br><span class="line">      <span class="string">"enabled"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于给role_es角色分配的ES索引权限是仅名称以<code>es.</code>开头，故无权创建<code>es-test</code>。改为创建<code>es.test</code>再试则成功：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span> : <span class="string">"es.test"</span>,</span><br><span class="line">  <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">  <span class="attr">"_id"</span> : <span class="string">"1"</span>,</span><br><span class="line">  <span class="attr">"_version"</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"result"</span> : <span class="string">"created"</span>,</span><br><span class="line">  <span class="attr">"_shards"</span> : &#123;</span><br><span class="line">    <span class="attr">"total"</span> : <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"_seq_no"</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"_primary_term"</span> : <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/es-account-manage.assets/1579574124809.png" alt="1579574124809"></p>
<h2 id="账号规划"><a href="#账号规划" class="headerlink" title="账号规划"></a>账号规划</h2><p>根据以上，初步设置了以下账号：</p>
<table>
<thead>
<tr>
<th>角色</th>
<th>现有账号</th>
<th>ES索引权限</th>
<th>Kibana工作区权限</th>
</tr>
</thead>
<tbody>
<tr>
<td>role_es</td>
<td><strong>es</strong></td>
<td>es.*</td>
<td>发现  feature_discover.all<br>可视化  feature_visualize.all<br>仪表板  feature_dashboard.all<br>开发工具  feature_dev_tools.all<br>索引模式  eature_indexPatterns.all</td>
</tr>
<tr>
<td>role_k8s</td>
<td><strong>k8s</strong></td>
<td>k8s*</td>
<td>同上</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>ELK</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch（启用用户权限控制）镜像构建过程</title>
    <url>/log-analysis/es-xpack/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="自动构建-amp-推送ES镜像"><a href="#自动构建-amp-推送ES镜像" class="headerlink" title="自动构建&amp;推送ES镜像"></a>自动构建&amp;推送ES镜像</h2><p>环境变量：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> Harbor_AddRess=x.x.x.x</span><br><span class="line"><span class="built_in">export</span> Harbor_User=xxx</span><br><span class="line"><span class="built_in">export</span> Harbor_Pwd=xxxxxx</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>构建新镜像：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0</span></span><br><span class="line">mypath=$(<span class="built_in">cd</span> `dirname <span class="variable">$0</span>`; <span class="built_in">pwd</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$mypath</span></span><br><span class="line"></span><br><span class="line">version=<span class="variable">$1</span></span><br><span class="line">version=<span class="variable">$&#123;version:=7.5.1&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"version: <span class="variable">$version</span>"</span></span><br><span class="line"></span><br><span class="line">mkdir <span class="variable">$version</span></span><br><span class="line">es_path=<span class="variable">$mypath</span>/<span class="variable">$version</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$es_path</span></span><br><span class="line"></span><br><span class="line">mkdir -p <span class="variable">$es_path</span>/&#123;src,build,install&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$es_path</span>/src</span><br><span class="line">wget https://github.com/elastic/elasticsearch/archive/v<span class="variable">$&#123;version&#125;</span>.tar.gz</span><br><span class="line">tar -xf v<span class="variable">$&#123;version&#125;</span>.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$es_path</span>/install</span><br><span class="line">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-<span class="variable">$&#123;version&#125;</span>-linux-x86_64.tar.gz</span><br><span class="line">tar -xf elasticsearch-<span class="variable">$&#123;version&#125;</span>-linux-x86_64.tar.gz</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$es_path</span>/build</span><br><span class="line"></span><br><span class="line"><span class="comment"># lib module</span></span><br><span class="line">ln -s <span class="variable">$es_path</span>/install/elasticsearch-<span class="variable">$&#123;version&#125;</span>/lib .</span><br><span class="line">ln -s <span class="variable">$es_path</span>/install/elasticsearch-<span class="variable">$&#123;version&#125;</span>/modules .</span><br><span class="line"></span><br><span class="line"><span class="comment"># License.java</span></span><br><span class="line">find <span class="variable">$es_path</span>/src -name <span class="string">"License.java"</span> | xargs -r -I &#123;&#125; cp &#123;&#125; .</span><br><span class="line">sed -i <span class="string">'s#this.type = type;#this.type = "platinum";#g'</span> License.java</span><br><span class="line">sed -i <span class="string">'s#validate();#// validate();#g'</span> License.java</span><br><span class="line"></span><br><span class="line"><span class="comment"># compile License.java</span></span><br><span class="line">javac -cp <span class="string">"`ls lib/elasticsearch-<span class="variable">$&#123;version&#125;</span>.jar`:`ls lib/elasticsearch-x-content-<span class="variable">$&#123;version&#125;</span>.jar`:`ls lib/lucene-core-*.jar`:`ls modules/x-pack-core/x-pack-core-<span class="variable">$&#123;version&#125;</span>.jar`"</span> License.java</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"=========================== License.java: in `pwd`/"</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$es_path</span>/build</span><br><span class="line">mkdir src &amp;&amp; <span class="built_in">cd</span> src</span><br><span class="line"></span><br><span class="line">find <span class="variable">$es_path</span>/install -name <span class="string">"x-pack-core-<span class="variable">$&#123;version&#125;</span>.jar"</span> | xargs -r -I &#123;&#125; cp &#123;&#125; .</span><br><span class="line">jar xvf x-pack-core-<span class="variable">$&#123;version&#125;</span>.jar</span><br><span class="line">rm -f x-pack-core-<span class="variable">$&#123;version&#125;</span>.jar</span><br><span class="line">cp -f ../License*.class org/elasticsearch/license/</span><br><span class="line">jar cvf x-pack-core-<span class="variable">$&#123;version&#125;</span>.jar .</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4</span></span><br><span class="line">cat &lt;&lt;EOF &gt; Dockerfile</span><br><span class="line">FROM  elasticsearch:<span class="variable">$&#123;version&#125;</span></span><br><span class="line"></span><br><span class="line">COPY  ./x-pack-core-<span class="variable">$&#123;version&#125;</span>.jar  /usr/share/elasticsearch/modules/x-pack-core/</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"docker build elasticsearch by running:"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"docker build -t elasticsearch:<span class="variable">$&#123;version&#125;</span> ."</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"under current directory"</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"End"</span></span><br></pre></td></tr></table></figure>
<p><em>脚本未自动运行docker build及docker push</em></p>
<h2 id="升级ELK"><a href="#升级ELK" class="headerlink" title="升级ELK"></a>升级ELK</h2><ol>
<li>ES镜像改用新构建的elasticsearch:7.5.1</li>
</ol>
<ol start="2">
<li><p>设置Kibana中文:</p>
<p>修改Kibana配置文件kibana.yml</p>
</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.name:</span> <span class="string">kibana</span></span><br><span class="line"><span class="attr">server.host:</span> <span class="string">"0"</span></span><br><span class="line"><span class="attr">elasticsearch.hosts:</span> <span class="string">[</span> <span class="string">"http://elasticsearch:9200"</span> <span class="string">]</span></span><br><span class="line"><span class="attr">xpack.monitoring.ui.container.elasticsearch.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">elasticsearch.username:</span> <span class="string">xxx</span></span><br><span class="line"><span class="attr">elasticsearch.password:</span> <span class="string">xxxxxx</span></span><br><span class="line"><span class="attr">elasticsearch.requestTimeout:</span> <span class="number">90000</span></span><br><span class="line"><span class="attr">i18n.locale:</span> <span class="string">"zh-CN"</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>ELK</tag>
      </tags>
  </entry>
  <entry>
    <title>ELK部署至K8s并启用AD认证</title>
    <url>/log-analysis/k8s-elk-auth-kibana-via-ad/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>单节点、多节点示例<br>使用基于NFS的动态PV<br>启用Windows AD域账号认证</p>
</blockquote>
<a id="more"></a>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>镜像准备</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker push lzzeng/es-xpack:7.5.1	 <span class="comment"># xpack组件破解版</span></span><br></pre></td></tr></table></figure>
<h3 id="单节点"><a href="#单节点" class="headerlink" title="单节点"></a>单节点</h3><p><a href="https://github.com/lzzeng/lzzeng.github.io/tree/src/hexo/extra-files/elk-single-node/" rel="external nofollow noopener noreferrer" target="_blank">K8s ELK single-node</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sh run-es.sh; sh run-kb.sh; sh run-logstash.sh</span></span><br></pre></td></tr></table></figure>
<h3 id="多节点"><a href="#多节点" class="headerlink" title="多节点"></a>多节点</h3><p><a href="https://github.com/lzzeng/lzzeng.github.io/tree/src/hexo/extra-files/elk-cluster/" rel="external nofollow noopener noreferrer" target="_blank">K8s ELK cluster</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sh run-es.sh; sh run-kb.sh; sh run-logstash.sh</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="AD域账号认证"><a href="#AD域账号认证" class="headerlink" title="AD域账号认证"></a>AD域账号认证</h2><p>es配置字典 es-cm2.yml:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">es-config</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">elk</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">elasticsearch</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="comment"># 如果要初始绑定role_mapping.yml:</span></span><br><span class="line">  <span class="comment"># role_mapping.yml: |-</span></span><br><span class="line">  <span class="comment">#   kibana_user:</span></span><br><span class="line">  <span class="comment">#     - "CN=elk_user,OU=系统帐号,DC=keep,DC=com"</span></span><br><span class="line">  <span class="comment">#     - "CN=堡垒机,CN=Users,DC=keep,DC=com"</span></span><br><span class="line">  <span class="comment">#   superuser:</span></span><br><span class="line">  <span class="comment">#     - "CN=elk_admin,OU=系统帐号,DC=keep,DC=com"</span></span><br><span class="line">  <span class="attr">elasticsearch.yml:</span> <span class="string">|-</span></span><br><span class="line">    <span class="attr">cluster.name:</span> <span class="string">"docker-cluster"</span></span><br><span class="line">    <span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">    <span class="attr">discovery.zen.minimum_master_nodes:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">discovery.type:</span> <span class="string">single-node</span></span><br><span class="line">    <span class="attr">xpack.security.authc.realms.active_directory:</span></span><br><span class="line">      <span class="attr">my_ad:</span></span><br><span class="line">        <span class="attr">order:</span> <span class="number">0</span></span><br><span class="line">        <span class="attr">domain_name:</span> <span class="string">keep.com</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">ldap://192.168.100.20:389,</span> <span class="string">ldap://192.168.100.29:389</span></span><br><span class="line">        <span class="attr">bind_dn:</span> <span class="string">xxx@keep.com</span></span><br><span class="line">        <span class="attr">bind_password:</span> <span class="string">******</span></span><br><span class="line">        <span class="attr">load_balance:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">"round_robin"</span></span><br><span class="line">        <span class="attr">user_search:</span></span><br><span class="line">          <span class="attr">base_dn:</span> <span class="string">"dc=keep,dc=com"</span></span><br><span class="line">          <span class="attr">filter:</span> <span class="string">"(&amp;(objectClass=user)(sAMAccountName=&#123;0&#125;))"</span></span><br><span class="line">        <span class="attr">group_search:</span></span><br><span class="line">          <span class="attr">base_dn:</span> <span class="string">"dc=keep,dc=com"</span></span><br><span class="line">        <span class="comment"># 如果要初始绑定role_mapping.yml:</span></span><br><span class="line">        <span class="comment">#files:</span></span><br><span class="line">        <span class="comment">#  role_mapping: "/usr/share/elasticsearch/config/role_mapping.yml"</span></span><br><span class="line">        <span class="comment">#unmapped_groups_as_roles: true</span></span><br></pre></td></tr></table></figure>
<p>另有如下命令添加bind_dn的密码：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">bin/elasticsearch-keystore add xpack.security.authc.realms.active_directory.my_ad.secure_bind_password</span><br></pre></td></tr></table></figure>
<p>集群正常启动后，以管理账号在Kibana的开发工具界面调用ES的API作【用户-角色】后绑定的方法示例：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/k8s-elk-auth-kibana-via-ad.assets/1582290036274.png" alt="1582290036274"></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># GET /_security/role_mapping/admins</span></span><br><span class="line"><span class="comment"># DELETE /_security/role_mapping/admins</span></span><br><span class="line"><span class="comment"># GET /_security/role_mapping/basic_users</span></span><br><span class="line"><span class="comment"># DELETE /_security/role_mapping/basic_users</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对管理员的绑定</span></span><br><span class="line">PUT /_security/role_mapping/admins</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"roles"</span> : [ <span class="string">"kibana_user"</span>, ... ],    <span class="comment"># 需要分配的角色</span></span><br><span class="line">  <span class="string">"rules"</span> : &#123; <span class="string">"field"</span> : &#123;</span><br><span class="line">    <span class="string">"groups"</span> : <span class="string">"CN=elk_admin,OU=系统帐号,DC=keep,DC=com"</span></span><br><span class="line">  &#125; &#125;,</span><br><span class="line">  <span class="string">"enabled"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对普通用户的绑定</span></span><br><span class="line">PUT  /_security/role_mapping/basic_users</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"enabled"</span> : <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"roles"</span> : [ <span class="string">"kibana_user"</span> ],</span><br><span class="line">    <span class="string">"rules"</span> : &#123;</span><br><span class="line">      <span class="string">"any"</span> : [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"field"</span> : &#123;</span><br><span class="line">            <span class="string">"groups"</span> : <span class="string">"CN=elk_user,OU=系统帐号,DC=keep,DC=com"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"field"</span> : &#123;</span><br><span class="line">            <span class="string">"dn"</span> : <span class="string">"CN=堡垒机,CN=Users,DC=keep,DC=com"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"metadata"</span> : &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/k8s-elk-auth-kibana-via-ad.assets/1582290767486.png" alt="1582290767486"></p>
<h2 id="Logstash配置"><a href="#Logstash配置" class="headerlink" title="Logstash配置"></a>Logstash配置</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">log-config</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">elk</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">logstash.yml:</span> <span class="string">|-</span></span><br><span class="line">    <span class="attr">http.host:</span> <span class="string">"0.0.0.0"</span></span><br><span class="line">    <span class="attr">path.config:</span> <span class="string">/usr/share/logstash/pipeline</span></span><br><span class="line">    <span class="attr">xpack.monitoring.enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">log-pipeline</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">elk</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">tcp-input.conf:</span> <span class="string">|-</span></span><br><span class="line">    <span class="string">input</span> <span class="string">&#123;</span></span><br><span class="line">      <span class="string">tcp</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">port</span> <span class="string">=&gt;</span> <span class="number">514</span></span><br><span class="line">        <span class="string">type</span> <span class="string">=&gt;</span> <span class="string">syslog</span></span><br><span class="line">      <span class="string">&#125;</span></span><br><span class="line">      <span class="string">beats</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">port</span> <span class="string">=&gt;</span> <span class="number">5044</span></span><br><span class="line">        <span class="string">type</span> <span class="string">=&gt;</span> <span class="string">beatlog</span></span><br><span class="line">      <span class="string">&#125;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">  <span class="comment"># kafka-input.conf: |-</span></span><br><span class="line">  <span class="comment">#   input &#123;</span></span><br><span class="line">  <span class="comment">#     kafka &#123;</span></span><br><span class="line">  <span class="comment">#       bootstrap_servers =&gt; "bootstrap.kafka.svc.cluster.local:9092"</span></span><br><span class="line">  <span class="comment">#       topics =&gt; ["fail2ban", "rsyslog", "dummy", "docker", "k8s", "twitter"]</span></span><br><span class="line">  <span class="comment">#       group_id =&gt; "logstash_elastic"</span></span><br><span class="line">  <span class="comment">#       client_id =&gt; "logstash"</span></span><br><span class="line">  <span class="comment">#       consumer_threads =&gt; 1</span></span><br><span class="line">  <span class="comment">#       auto_offset_reset =&gt; "earliest"</span></span><br><span class="line">  <span class="comment">#       codec =&gt; plain &#123; format =&gt; "%&#123;message&#125;" &#125;</span></span><br><span class="line">  <span class="comment">#       decorate_events =&gt; true</span></span><br><span class="line">  <span class="comment">#     &#125;</span></span><br><span class="line">  <span class="comment">#   &#125;</span></span><br><span class="line">  <span class="attr">elasticsearch-output.conf:</span> <span class="string">|-</span></span><br><span class="line">    <span class="string">output</span> <span class="string">&#123;</span></span><br><span class="line">      <span class="string">elasticsearch</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">index</span> <span class="string">=&gt;</span> <span class="string">"logstash-<span class="template-variable">%&#123;+YYYY.MM.dd&#125;</span>"</span></span><br><span class="line">        <span class="comment"># hosts =&gt; "elasticsearch:9200"</span></span><br><span class="line">        <span class="string">hosts</span> <span class="string">=&gt;</span> <span class="string">["http://es-cluster-0.elasticsearch-headless.elk:9200",</span> <span class="string">"http://es-cluster-1.elasticsearch-headless.elk:9200"</span><span class="string">,</span> <span class="string">"http://es-cluster-2.elasticsearch-headless.elk:9200"</span><span class="string">]</span></span><br><span class="line">        <span class="string">user</span> <span class="string">=&gt;</span> <span class="string">"elastic"</span></span><br><span class="line">        <span class="string">password</span> <span class="string">=&gt;</span> <span class="string">"******"</span></span><br><span class="line">      <span class="string">&#125;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
<p>以NodePort方式暴露logstash服务，</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">The Service <span class="string">"logstash"</span> is invalid: spec.clusterIP: Invalid value: <span class="string">"None"</span>: may not be <span class="built_in">set</span> to <span class="string">'None'</span> <span class="keyword">for</span> NodePort services</span><br></pre></td></tr></table></figure>
<p>此方式 clusterIP不能为None。</p>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="Elasticsearch-cluster-host地址"><a href="#Elasticsearch-cluster-host地址" class="headerlink" title="Elasticsearch cluster host地址"></a>Elasticsearch cluster host地址</h3><p>ES的service描述文件如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">elasticsearch</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">elk</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">elasticsearch</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">elasticsearch</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">9200</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">es-http</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">32200</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">elasticsearch-headless</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">elk</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">elasticsearch</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">9200</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">elasticsearch</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="string">None</span></span><br></pre></td></tr></table></figure>
<p>在集群内部，从kibana访问es：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sh-4.2$ curl http://es-cluster-1.elasticsearch.elk:9200 -u elastic:******</span><br><span class="line">curl: (6) Could not resolve host: es-cluster-1.elasticsearch.elk; Unknown error</span><br><span class="line"></span><br><span class="line"><span class="comment"># 负载节点每次都变化</span></span><br><span class="line">sh-4.2$ curl http://elasticsearch:9200 -u elastic:******</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"es-cluster-0"</span>,</span><br><span class="line">  <span class="string">"cluster_name"</span> : <span class="string">"es-cluster"</span>,</span><br><span class="line">  <span class="string">"cluster_uuid"</span> : <span class="string">"VP2AdLR9RzqPVz3tnmSdEw"</span>,</span><br><span class="line">  <span class="string">"version"</span> : &#123;</span><br><span class="line">    <span class="string">"number"</span> : <span class="string">"7.5.1"</span>,</span><br><span class="line">    <span class="string">"build_flavor"</span> : <span class="string">"default"</span>,</span><br><span class="line">    <span class="string">"build_type"</span> : <span class="string">"docker"</span>,</span><br><span class="line">    <span class="string">"build_hash"</span> : <span class="string">"3ae9ac9a93c95bd0cdc054951cf95d88e1e18d96"</span>,</span><br><span class="line">    <span class="string">"build_date"</span> : <span class="string">"2019-12-16T22:57:37.835892Z"</span>,</span><br><span class="line">    <span class="string">"build_snapshot"</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"lucene_version"</span> : <span class="string">"8.3.0"</span>,</span><br><span class="line">    <span class="string">"minimum_wire_compatibility_version"</span> : <span class="string">"6.8.0"</span>,</span><br><span class="line">    <span class="string">"minimum_index_compatibility_version"</span> : <span class="string">"6.0.0-beta1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"tagline"</span> : <span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 负载节点每次都变化</span></span><br><span class="line">sh-4.2$ curl http://elasticsearch.elk:9200 -u elastic:******</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"es-cluster-2"</span>,</span><br><span class="line">  <span class="string">"cluster_name"</span> : <span class="string">"es-cluster"</span>,</span><br><span class="line">  <span class="string">"cluster_uuid"</span> : <span class="string">"VP2AdLR9RzqPVz3tnmSdEw"</span>,</span><br><span class="line">  <span class="string">"version"</span> : &#123;</span><br><span class="line">    <span class="string">"number"</span> : <span class="string">"7.5.1"</span>,</span><br><span class="line">    <span class="string">"build_flavor"</span> : <span class="string">"default"</span>,</span><br><span class="line">    <span class="string">"build_type"</span> : <span class="string">"docker"</span>,</span><br><span class="line">    <span class="string">"build_hash"</span> : <span class="string">"3ae9ac9a93c95bd0cdc054951cf95d88e1e18d96"</span>,</span><br><span class="line">    <span class="string">"build_date"</span> : <span class="string">"2019-12-16T22:57:37.835892Z"</span>,</span><br><span class="line">    <span class="string">"build_snapshot"</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"lucene_version"</span> : <span class="string">"8.3.0"</span>,</span><br><span class="line">    <span class="string">"minimum_wire_compatibility_version"</span> : <span class="string">"6.8.0"</span>,</span><br><span class="line">    <span class="string">"minimum_index_compatibility_version"</span> : <span class="string">"6.0.0-beta1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"tagline"</span> : <span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 负载节点不常变化</span></span><br><span class="line">sh-4.2$ curl http://elasticsearch-headless.elk:9200 -u elastic:******</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"es-cluster-0"</span>,</span><br><span class="line">  <span class="string">"cluster_name"</span> : <span class="string">"es-cluster"</span>,</span><br><span class="line">  <span class="string">"cluster_uuid"</span> : <span class="string">"VP2AdLR9RzqPVz3tnmSdEw"</span>,</span><br><span class="line">  <span class="string">"version"</span> : &#123;</span><br><span class="line">    <span class="string">"number"</span> : <span class="string">"7.5.1"</span>,</span><br><span class="line">    <span class="string">"build_flavor"</span> : <span class="string">"default"</span>,</span><br><span class="line">    <span class="string">"build_type"</span> : <span class="string">"docker"</span>,</span><br><span class="line">    <span class="string">"build_hash"</span> : <span class="string">"3ae9ac9a93c95bd0cdc054951cf95d88e1e18d96"</span>,</span><br><span class="line">    <span class="string">"build_date"</span> : <span class="string">"2019-12-16T22:57:37.835892Z"</span>,</span><br><span class="line">    <span class="string">"build_snapshot"</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"lucene_version"</span> : <span class="string">"8.3.0"</span>,</span><br><span class="line">    <span class="string">"minimum_wire_compatibility_version"</span> : <span class="string">"6.8.0"</span>,</span><br><span class="line">    <span class="string">"minimum_index_compatibility_version"</span> : <span class="string">"6.0.0-beta1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"tagline"</span> : <span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定节点</span></span><br><span class="line">sh-4.2$ curl http://es-cluster-0.elasticsearch-headless.elk:9200 -u elastic:******</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"es-cluster-0"</span>,</span><br><span class="line">  <span class="string">"cluster_name"</span> : <span class="string">"es-cluster"</span>,</span><br><span class="line">  <span class="string">"cluster_uuid"</span> : <span class="string">"VP2AdLR9RzqPVz3tnmSdEw"</span>,</span><br><span class="line">  <span class="string">"version"</span> : &#123;</span><br><span class="line">    <span class="string">"number"</span> : <span class="string">"7.5.1"</span>,</span><br><span class="line">    <span class="string">"build_flavor"</span> : <span class="string">"default"</span>,</span><br><span class="line">    <span class="string">"build_type"</span> : <span class="string">"docker"</span>,</span><br><span class="line">    <span class="string">"build_hash"</span> : <span class="string">"3ae9ac9a93c95bd0cdc054951cf95d88e1e18d96"</span>,</span><br><span class="line">    <span class="string">"build_date"</span> : <span class="string">"2019-12-16T22:57:37.835892Z"</span>,</span><br><span class="line">    <span class="string">"build_snapshot"</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"lucene_version"</span> : <span class="string">"8.3.0"</span>,</span><br><span class="line">    <span class="string">"minimum_wire_compatibility_version"</span> : <span class="string">"6.8.0"</span>,</span><br><span class="line">    <span class="string">"minimum_index_compatibility_version"</span> : <span class="string">"6.0.0-beta1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"tagline"</span> : <span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="helm-安装ELK参考"><a href="#helm-安装ELK参考" class="headerlink" title="helm 安装ELK参考"></a>helm 安装ELK参考</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># helm repo add stable https://kubernetes-charts.storage.googleapis.com</span></span><br><span class="line"><span class="string">helm</span> <span class="string">repo</span> <span class="string">add</span> <span class="string">elastic</span> <span class="string">https://helm.elastic.co</span></span><br><span class="line"><span class="comment"># 获取helm chart</span></span><br><span class="line"><span class="string">helm</span> <span class="string">fetch</span> <span class="string">stable/elasticsearch</span></span><br><span class="line"><span class="comment"># 修改后应用</span></span><br><span class="line"><span class="string">helm</span> <span class="string">install</span> <span class="string">elastic/elasticsearch</span> <span class="string">-n</span> <span class="string">elk-es</span> <span class="string">--namespace</span> <span class="string">elk</span> <span class="string">-f</span> <span class="string">elasticsearch/values.yaml</span></span><br></pre></td></tr></table></figure>
<p>强制删除pod：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl delete pod -n elk kibana-75cd5fcbc5-jxn44  --force --grace-period=0</span><br></pre></td></tr></table></figure>
<p>AD认证：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.x/active-directory-realm.html#ad-realm-configuration" rel="external nofollow noopener noreferrer" target="_blank">https://www.elastic.co/guide/en/elasticsearch/reference/7.x/active-directory-realm.html#ad-realm-configuration</a></p>
]]></content>
      <categories>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>ELK</tag>
      </tags>
  </entry>
  <entry>
    <title>ELK整改部署</title>
    <url>/log-analysis/k8s-elk-improvement/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>为了将测试环境、仿真环境和生产环境的ELK合并为一个部署到K8s中管理，作一些测试验证，并尝试集成STS单点登录。</p>
</blockquote>
<h2 id="测试NFS可用性"><a href="#测试NFS可用性" class="headerlink" title="测试NFS可用性"></a>测试NFS可用性</h2><blockquote>
<p> 测试应用使用的MySQL数据目录是通过NFS挂载的，每GET请求一次 <code>http://192.168.100.157:9000/visit/add/</code> 会新增一条记录到数据库。通过脚本每0.01秒请求一次，共请求10000次的过程中：当人为停止NFS服务时，MySQL数据目录挂载失效，导致请求接口无法访问；重新开启NFS服务后，恢复正常，并且最终记录总数一致。</p>
</blockquote>
<a id="more"></a>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/k8s-elk-improvement.assets/1582856249817.png" alt="1582856249817"></p>
<h3 id="NFS供应节点"><a href="#NFS供应节点" class="headerlink" title="NFS供应节点"></a>NFS供应节点</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@zabbix02 elk]<span class="comment"># cat /etc/exports</span></span><br><span class="line">/testPV *(rw,sync)</span><br><span class="line">/helloPV *(rw,no_root_squash,async)</span><br></pre></td></tr></table></figure>
<h3 id="测试节点"><a href="#测试节点" class="headerlink" title="测试节点"></a>测试节点</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@157-xxl-job testPV]<span class="comment"># df -h</span></span><br><span class="line">Filesystem                Size  Used Avail Use% Mounted on</span><br><span class="line">...</span><br><span class="line">192.168.100.150:/helloPV  292G   42G  250G  15% /helloPV</span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">'Asia/Shanghai'</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">qwerasdf</span></span><br><span class="line">      <span class="attr">MYSQL_DATABASE:</span> <span class="string">testpv</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">['mysqld',</span> <span class="string">'--character-set-server=utf8'</span><span class="string">]</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"/helloPV/db:/var/lib/mysql"</span></span><br></pre></td></tr></table></figure>
<h3 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysql&gt; select count(id) from visit_record;</span><br><span class="line">+-----------+</span><br><span class="line">| count(id) |</span><br><span class="line">+-----------+</span><br><span class="line">|      9999 |</span><br><span class="line">+-----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from visit_record <span class="built_in">limit</span> 1;</span><br><span class="line">+----+----------------------+----------------------------+</span><br><span class="line">| id | ip_addr              | visit_date                 |</span><br><span class="line">+----+----------------------+----------------------------+</span><br><span class="line">|  1 | 192.168.100.157:9000 | 2020-02-28 01:13:38.370327 |</span><br><span class="line">+----+----------------------+----------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from visit_record order by id desc <span class="built_in">limit</span> 1;</span><br><span class="line">+------+----------------------+----------------------------+</span><br><span class="line">| id   | ip_addr              | visit_date                 |</span><br><span class="line">+------+----------------------+----------------------------+</span><br><span class="line">| 9999 | 192.168.100.157:9000 | 2020-02-28 01:18:10.755606 |</span><br><span class="line">+------+----------------------+----------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>
<h2 id="PV数据恢复验证"><a href="#PV数据恢复验证" class="headerlink" title="PV数据恢复验证"></a>PV数据恢复验证</h2><h3 id="文档写入、更新"><a href="#文档写入、更新" class="headerlink" title="文档写入、更新"></a>文档写入、更新</h3><ul>
<li>初始写入2个文档</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -X PUT <span class="string">"http://es.staging.keep.com/customer/_doc/1?pretty"</span> -H <span class="string">'Content-Type: application/json'</span> -u elastic:elastic -d <span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  "datetime": "2020-02-27 10:50:00",</span></span><br><span class="line"><span class="string">  "name": "Jim Green"</span></span><br><span class="line"><span class="string">&#125;'</span></span><br><span class="line"></span><br><span class="line">curl -X PUT <span class="string">"http://es.staging.keep.com/customer/_doc/2?pretty"</span> -H <span class="string">'Content-Type: application/json'</span> -u elastic:elastic -d <span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  "datetime": "2020-02-27 10:51:00",</span></span><br><span class="line"><span class="string">  "name": "Jim Green2"</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>更新文档</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -X PUT <span class="string">"http://es.staging.keep.com/customer/_doc/1?pretty"</span> -H <span class="string">'Content-Type: application/json'</span> -u elastic:elastic -d <span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  "datetime": "2020-02-27 10:54:00",</span></span><br><span class="line"><span class="string">  "name": "Jim Green3"</span></span><br><span class="line"><span class="string">&#125;'</span></span><br><span class="line"></span><br><span class="line">curl -X PUT <span class="string">"http://es.staging.keep.com/customer/_doc/2?pretty"</span> -H <span class="string">'Content-Type: application/json'</span> -u elastic:elastic -d <span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  "datetime": "2020-02-27 10:54:02",</span></span><br><span class="line"><span class="string">  "name": "Jim Green4"</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/k8s-elk-improvement.assets/1582772220081.png" alt="1582772220081"></p>
<ul>
<li>增加2个文档</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -X PUT <span class="string">"http://es.staging.keep.com/customer/_doc/3?pretty"</span> -H <span class="string">'Content-Type: application/json'</span> -u elastic:elastic -d <span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  "datetime": "2020-02-27 10:58:00",</span></span><br><span class="line"><span class="string">  "name": "Jim Green5"</span></span><br><span class="line"><span class="string">&#125;'</span></span><br><span class="line"></span><br><span class="line">curl -X PUT <span class="string">"http://es.staging.keep.com/customer/_doc/4?pretty"</span> -H <span class="string">'Content-Type: application/json'</span> -u elastic:elastic -d <span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  "datetime": "2020-02-27 10:58:02",</span></span><br><span class="line"><span class="string">  "name": "Jim Green6"</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/k8s-elk-improvement.assets/1582772345348.png" alt="1582772345348"></p>
<h3 id="修改请求的容量"><a href="#修改请求的容量" class="headerlink" title="修改请求的容量"></a>修改请求的容量</h3><p>NFS StorageClass Provider自动为ES创建的PV目录为：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@zabbix02 ~]<span class="comment"># ls /testPV/</span></span><br><span class="line">yhelk-es-data-elasticsearch-0-pvc-94de2142-590a-11ea-ac5d-005056a941c1</span><br></pre></td></tr></table></figure>
<h4 id="不删PV仅修改编排的容量需求"><a href="#不删PV仅修改编排的容量需求" class="headerlink" title="不删PV仅修改编排的容量需求"></a>不删PV仅修改编排的容量需求</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 原先20Gi</span></span><br><span class="line"><span class="attr">volumeClaimTemplates:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">metadata:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">es-data</span></span><br><span class="line">  <span class="attr">spec:</span></span><br><span class="line">    <span class="attr">storageClassName:</span> <span class="string">"managed-nfs-storage"</span></span><br><span class="line">    <span class="attr">accessModes:</span> <span class="string">[</span> <span class="string">"ReadWriteOnce"</span> <span class="string">]</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">requests:</span></span><br><span class="line">        <span class="attr">storage:</span> <span class="string">40Gi</span></span><br></pre></td></tr></table></figure>
<p>重新部署ES</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@zabbix02 4cp]<span class="comment"># kubectl apply -f es-ss.yml </span></span><br><span class="line">The StatefulSet <span class="string">"elasticsearch"</span> is invalid: spec: Forbidden: updates to statefulset spec <span class="keyword">for</span> fields other than <span class="string">'replicas'</span>, <span class="string">'template'</span>, and <span class="string">'updateStrategy'</span> are forbidden</span><br></pre></td></tr></table></figure>
<p>因为是statefulset.apps，提示不能直接apply，先delete再apply</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@zabbix02 4cp]<span class="comment"># kubectl delete -f es-ss.yml </span></span><br><span class="line">statefulset.apps <span class="string">"elasticsearch"</span> deleted</span><br><span class="line">[root@zabbix02 4cp]<span class="comment"># kubectl apply -f es-ss.yml </span></span><br><span class="line">statefulset.apps/elasticsearch created</span><br></pre></td></tr></table></figure>
<p>PV目录未变化，并且从Kibana查看数据还是容量变更前的样子</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/k8s-elk-improvement.assets/1582773231870.png" alt="1582773231870"></p>
<p>说明不删除已创建的PV情况下，修改请求PV容量值<code>resources.requests.storage</code>，不影响已有数据。</p>
<h4 id="删PV重建ES"><a href="#删PV重建ES" class="headerlink" title="删PV重建ES"></a>删PV重建ES</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@zabbix02 4cp]<span class="comment"># sh run-es.sh down</span></span><br><span class="line">ingress.extensions <span class="string">"elasticsearch"</span> deleted</span><br><span class="line">service <span class="string">"elasticsearch"</span> deleted</span><br><span class="line">statefulset.apps <span class="string">"elasticsearch"</span> deleted</span><br><span class="line">configmap <span class="string">"es-config"</span> deleted</span><br><span class="line">secret <span class="string">"rp-client-secret"</span> deleted</span><br><span class="line">[root@zabbix02 4cp]<span class="comment"># kubectl delete pvc -n yhelk es-data-elasticsearch-0</span></span><br><span class="line">persistentvolumeclaim <span class="string">"es-data-elasticsearch-0"</span> deleted</span><br><span class="line"></span><br><span class="line">[root@zabbix02 4cp]<span class="comment"># sh run-es.sh</span></span><br><span class="line">namespace/yhelk unchanged</span><br><span class="line">secret/rp-client-secret created</span><br><span class="line">configmap/es-config created</span><br><span class="line">statefulset.apps/elasticsearch created</span><br><span class="line">service/elasticsearch created</span><br><span class="line">ingress.extensions/elasticsearch created</span><br></pre></td></tr></table></figure>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/k8s-elk-improvement.assets/1582774172498.png" alt="1582774172498"></p>
<p>删除PV后，PV目录被归档</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@zabbix02 4cp]<span class="comment"># ls /testPV/</span></span><br><span class="line">archived-yhelk-es-data-elasticsearch-0-pvc-94de2142-590a-11ea-ac5d-005056a941c1</span><br></pre></td></tr></table></figure>
<p>重建后，生成了新的PV目录</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@zabbix02 4cp]<span class="comment"># ls /testPV/</span></span><br><span class="line">archived-yhelk-es-data-elasticsearch-0-pvc-94de2142-590a-11ea-ac5d-005056a941c1</span><br><span class="line">yhelk-es-data-elasticsearch-0-pvc-cb8ea87c-5912-11ea-ac5d-005056a941c1</span><br></pre></td></tr></table></figure>
<p>显然，之前的保存的文档不在新目录中，查看Kibana也显示没有任何索引：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/k8s-elk-improvement.assets/1582774922290.png" alt="1582774922290"></p>
<p>尝试恢复旧数据如下：</p>
<p>通过移动归档的PV目录替换现在使用的PV目录，并删除es的pod以使其被重新调度：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@zabbix02 4cp]<span class="comment"># mv /testPV/yhelk-es-data-elasticsearch-0-pvc-cb8ea87c-5912-11ea-ac5d-005056a941c1/ /testPV/yhelk-es-data-elasticsearch-0-pvc-cb8ea87c-5912-11ea-ac5d-005056a941c1.old</span></span><br><span class="line">[root@zabbix02 4cp]<span class="comment"># ls /testPV/</span></span><br><span class="line">archived-yhelk-es-data-elasticsearch-0-pvc-94de2142-590a-11ea-ac5d-005056a941c1</span><br><span class="line">yhelk-es-data-elasticsearch-0-pvc-cb8ea87c-5912-11ea-ac5d-005056a941c1.old</span><br><span class="line">[root@zabbix02 4cp]<span class="comment"># mv /testPV/archived-yhelk-es-data-elasticsearch-0-pvc-94de2142-590a-11ea-ac5d-005056a941c1/ /testPV/yhelk-es-data-elasticsearch-0-pvc-cb8ea87c-5912-11ea-ac5d-005056a941c1</span></span><br><span class="line">[root@zabbix02 4cp]<span class="comment"># ls /testPV/</span></span><br><span class="line">yhelk-es-data-elasticsearch-0-pvc-cb8ea87c-5912-11ea-ac5d-005056a941c1</span><br><span class="line">yhelk-es-data-elasticsearch-0-pvc-cb8ea87c-5912-11ea-ac5d-005056a941c1.old</span><br><span class="line">[root@zabbix02 4cp]<span class="comment"># kubectl get pod -n yhelk</span></span><br><span class="line">NAME                      READY   STATUS    RESTARTS   AGE</span><br><span class="line">elasticsearch-0           1/1     Running   0          7m17s</span><br><span class="line">kibana-6564b7c688-bvmf4   1/1     Running   0          61m</span><br><span class="line">[root@zabbix02 4cp]<span class="comment"># kubectl delete pod -n yhelk elasticsearch-0 </span></span><br><span class="line">pod <span class="string">"elasticsearch-0"</span> deleted</span><br><span class="line">[root@zabbix02 4cp]<span class="comment"># kubectl get pod -n yhelk</span></span><br><span class="line">NAME                      READY   STATUS    RESTARTS   AGE</span><br><span class="line">elasticsearch-0           1/1     Running   0          16s</span><br><span class="line">kibana-6564b7c688-bvmf4   1/1     Running   0          62m</span><br></pre></td></tr></table></figure>
<p>待kibana重新连接es后，显示旧文档已恢复：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/k8s-elk-improvement.assets/1582775406309.png" alt="1582775406309"></p>
<hr>
<h3 id="数据迁移到新的集群"><a href="#数据迁移到新的集群" class="headerlink" title="数据迁移到新的集群"></a>数据迁移到新的集群</h3><h4 id="创建一个新ELK环境"><a href="#创建一个新ELK环境" class="headerlink" title="创建一个新ELK环境"></a>创建一个新ELK环境</h4><p>在另一个名称空间 yhelk2 再创建一个ELK环境：</p>
<p>对应的PV目录：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/k8s-elk-improvement.assets/1582785238406.png" alt="1582785238406"></p>
<h4 id="复制迁移数据"><a href="#复制迁移数据" class="headerlink" title="复制迁移数据"></a>复制迁移数据</h4><p>先删除刚创建出来的ES，仅保留PVC和PV。如果删除PVC（和PV），原数据（目录）会被归档，重新部署后会重建PV。</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/k8s-elk-improvement.assets/1582786894380.png" alt="1582786894380"></p>
<p>再将对应yhelk空间的原有ELK环境的PV目录复制一份替换新ELK环境的PV目录</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mv /testPV/yhelk2-es-data-elasticsearch-0-pvc-a2488669-5929-11ea-ac5d-005056a941c1&#123;,.old&#125;</span><br><span class="line"></span><br><span class="line">cp -rp /testPV/yhelk-es-data-elasticsearch-0-pvc-cb8ea87c-5912-11ea-ac5d-005056a941c1  /testPV/yhelk2-es-data-elasticsearch-0-pvc-a2488669-5929-11ea-ac5d-005056a941c1</span><br></pre></td></tr></table></figure>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/k8s-elk-improvement.assets/1582786693455.png" alt="1582786693455"></p>
<p>重建yhelk2空间的ES，因对应的PV目录名称不变，将会加载该目录中的数据。在Kibana中可以看到，新、旧环境ELK中的索引、文档是相同的：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/k8s-elk-improvement.assets/1582787118597.png" alt="1582787118597"></p>
<blockquote>
<p>这说明两个不同名称空间的ELK集群的数据，可以通过复制数据目录的方式从一个环境迁移到另一个。可以作出合理推测：1. 如果两个ES集群的节点数一样（对应的PV目录数一样），数据可以通过直接复制的方式迁移。2. ES对供应PV的NFS文件系统是无感知的，NFS文件系统自身扩容、缩容，只要满足pod需求，数据就可以正常使用。</p>
</blockquote>
<hr>
<h2 id="ES账号设置"><a href="#ES账号设置" class="headerlink" title="ES账号设置"></a>ES账号设置</h2><p>启用了AD认证后，除了几个内置的用户和已授权的AD账号外，新创建的用户（未被AD管理的）无法使用：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"error"</span> : &#123;</span><br><span class="line">    <span class="string">"root_cause"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"type"</span> : <span class="string">"security_exception"</span>,</span><br><span class="line">        <span class="string">"reason"</span> : <span class="string">"unable to authenticate user [etms_dev] for REST request [/dev.etms.abc/_doc/1?pretty]"</span>,</span><br><span class="line">        <span class="string">"header"</span> : &#123;</span><br><span class="line">          <span class="string">"WWW-Authenticate"</span> : <span class="string">"Basic realm=\"security\" charset=\"UTF-8\""</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"type"</span> : <span class="string">"security_exception"</span>,</span><br><span class="line">    <span class="string">"reason"</span> : <span class="string">"unable to authenticate user [etms_dev] for REST request [/dev.etms.abc/_doc/1?pretty]"</span>,</span><br><span class="line">    <span class="string">"header"</span> : &#123;</span><br><span class="line">      <span class="string">"WWW-Authenticate"</span> : <span class="string">"Basic realm=\"security\" charset=\"UTF-8\""</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"status"</span> : 401</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="用户组权限设置"><a href="#用户组权限设置" class="headerlink" title="用户组权限设置"></a>用户组权限设置</h3><p>只能设置两类权限</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">PUT /_security/role_mapping/admins</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"roles"</span> : [ <span class="string">"superuser"</span> ],</span><br><span class="line">  <span class="string">"rules"</span> : &#123;</span><br><span class="line">    <span class="string">"field"</span> : &#123;</span><br><span class="line">      <span class="string">"groups"</span> : <span class="string">"CN=elk_admin,OU=Elasticsearch,OU=系统帐号,DC=keep,DC=com"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"enabled"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT  /_security/role_mapping/basic_users</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"enabled"</span> : <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"roles"</span> : [</span><br><span class="line">      <span class="string">"kibana_user"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"rules"</span> : &#123;</span><br><span class="line">      <span class="string">"any"</span> : [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"field"</span> : &#123;</span><br><span class="line">            <span class="string">"groups"</span> : <span class="string">"CN=elk_user,OU=Elasticsearch,OU=系统帐号,DC=keep,DC=com"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"metadata"</span> : &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="设置指定用户的权限"><a href="#设置指定用户的权限" class="headerlink" title="设置指定用户的权限"></a>设置指定用户的权限</h3><blockquote>
<p>刚开始所有用户要么属于elk_admin组，要么属于elk_user组，并具有对应的两类权限。如果要进一步单独设置组内某个用户的权限，可按以下步骤进行：</p>
</blockquote>
<ul>
<li>先按传统方法添加一个包含所需权限的角色</li>
<li>在kibana手动创建一个与AD账号同名的用户，密码随意设置，并与刚刚创建的角色绑定</li>
<li>以该用户名及相应的AD密码登录Kibana即可发现权限已变更</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看、删除admins的role_mapping</span></span><br><span class="line">GET /_security/role_mapping/admins</span><br><span class="line">DELETE /_security/role_mapping/admins</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看、删除basic_users的role_mapping</span></span><br><span class="line">GET /_security/role_mapping/basic_users</span><br><span class="line">DELETE /_security/role_mapping/basic_users</span><br><span class="line"></span><br><span class="line">PUT /_security/role_mapping/admins</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"roles"</span> : [ <span class="string">"superuser"</span> ],</span><br><span class="line">  <span class="string">"rules"</span> : &#123;</span><br><span class="line">    <span class="string">"field"</span> : &#123;</span><br><span class="line">      <span class="string">"groups"</span> : <span class="string">"CN=elk_admin,OU=Elasticsearch,OU=系统帐号,DC=keep,DC=com"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"enabled"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT  /_security/role_mapping/basic_users</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"enabled"</span> : <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"roles"</span> : [</span><br><span class="line">      <span class="string">"kibana_user"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"rules"</span> : &#123;</span><br><span class="line">      <span class="string">"any"</span> : [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"field"</span> : &#123;</span><br><span class="line">            <span class="string">"groups"</span> : <span class="string">"CN=elk_user,OU=Elasticsearch,OU=系统帐号,DC=keep,DC=com"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"metadata"</span> : &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="索引名称规范"><a href="#索引名称规范" class="headerlink" title="索引名称规范"></a>索引名称规范</h3><p><strong>建议按</strong></p>
<p><code>&lt;环境名称&gt;.&lt;系统&gt;[.&lt;应用&gt;][.&lt;日志类型&gt;]_&lt;YYYY.MM.dd&gt;</code></p>
<p>的形式取索引名称，例如：</p>
<p><code>dev.etms.webhost.error-log_2020.02.28</code></p>
<p>据以上，可以针对 项目组及个人设置ELK权限。比如设置ETMS组成员dev环境的权限：</p>
<ol>
<li>创建角色<code>role_etms_dev</code></li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">PUT /_security/role/role_etms_dev</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"cluster"</span> : [ ],</span><br><span class="line">    <span class="string">"indices"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"names"</span> : [</span><br><span class="line">          <span class="string">"dev.etms.*"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"privileges"</span> : [</span><br><span class="line">          <span class="string">"all"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"field_security"</span> : &#123;</span><br><span class="line">          <span class="string">"grant"</span> : [</span><br><span class="line">            <span class="string">"*"</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="string">"except"</span> : [ ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"allow_restricted_indices"</span> : <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"applications"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"application"</span> : <span class="string">"kibana-.kibana"</span>,</span><br><span class="line">        <span class="string">"privileges"</span> : [</span><br><span class="line">          <span class="string">"feature_discover.all"</span>,</span><br><span class="line">          <span class="string">"feature_visualize.all"</span>,</span><br><span class="line">          <span class="string">"feature_dashboard.all"</span>,</span><br><span class="line">          <span class="string">"feature_dev_tools.all"</span>,</span><br><span class="line">          <span class="string">"feature_indexPatterns.all"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"resources"</span> : [</span><br><span class="line">          <span class="string">"space:default"</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"run_as"</span> : [ ],</span><br><span class="line">    <span class="string">"metadata"</span> : &#123; &#125;,</span><br><span class="line">    <span class="string">"transient_metadata"</span> : &#123;</span><br><span class="line">      <span class="string">"enabled"</span> : <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>创建etms组成员AD账号同名的ES账号并绑定角色</li>
</ol>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/k8s-elk-improvement.assets/1582881482944.png" alt="1582881482944"></p>
<ol start="3">
<li>登录查看效果</li>
</ol>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/k8s-elk-improvement.assets/1582881659083.png" alt="1582881659083"></p>
<hr>
<h2 id="ELK集成STS登录调试过程记录"><a href="#ELK集成STS登录调试过程记录" class="headerlink" title="ELK集成STS登录调试过程记录"></a>ELK集成STS登录调试过程记录</h2><blockquote>
<p>因为ES不支持在配置文件中直接配置：rp.client_secret ，以及其它一些集成OpenID的参数设置不清晰，作了如下大量尝试：</p>
</blockquote>
<h3 id="使用配置字典的方式"><a href="#使用配置字典的方式" class="headerlink" title="使用配置字典的方式"></a>使用配置字典的方式</h3><p>OIDC realm配置到es-cm.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">es-config</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">elk</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">elasticsearch</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="comment">#role_mapping.yml: |-</span></span><br><span class="line">  <span class="comment">#  kibana_user:</span></span><br><span class="line">  <span class="comment">#    - "CN=elk_user,OU=系统帐号,DC=keep,DC=com"</span></span><br><span class="line">  <span class="comment">#    - "CN=堡垒机,CN=Users,DC=keep,DC=com"</span></span><br><span class="line">  <span class="comment">#  superuser:</span></span><br><span class="line">  <span class="comment">#    - "CN=elk_admin,OU=系统帐号,DC=keep,DC=com"</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">elasticsearch.yml:</span> <span class="string">|-</span></span><br><span class="line">    <span class="attr">cluster.name:</span> <span class="string">"docker-cluster"</span></span><br><span class="line">    <span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">    <span class="attr">discovery.zen.minimum_master_nodes:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">discovery.type:</span> <span class="string">single-node</span></span><br><span class="line">    <span class="attr">xpack.security.authc.realms.active_directory:</span></span><br><span class="line">      <span class="attr">my_ad:</span></span><br><span class="line">        <span class="attr">order:</span> <span class="number">0</span></span><br><span class="line">        <span class="attr">domain_name:</span> <span class="string">keep.com</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">ldap://192.168.100.120:389,</span> <span class="string">ldap://192.168.100.129:389</span></span><br><span class="line">        <span class="attr">bind_dn:</span> <span class="string">xxx@keep.com</span></span><br><span class="line">        <span class="attr">bind_password:</span> <span class="string">******</span></span><br><span class="line">        <span class="attr">load_balance:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">"round_robin"</span></span><br><span class="line">        <span class="attr">user_search:</span></span><br><span class="line">          <span class="attr">base_dn:</span> <span class="string">"dc=keep,dc=com"</span></span><br><span class="line">          <span class="attr">filter:</span> <span class="string">"(&amp;(objectClass=user)(sAMAccountName=&#123;0&#125;))"</span></span><br><span class="line">        <span class="attr">group_search:</span></span><br><span class="line">          <span class="attr">base_dn:</span> <span class="string">"dc=keep,dc=com"</span></span><br><span class="line">        <span class="comment">#files:</span></span><br><span class="line">        <span class="comment">#  role_mapping: "/usr/share/elasticsearch/config/role_mapping.yml"</span></span><br><span class="line">        <span class="comment">#unmapped_groups_as_roles: true</span></span><br><span class="line">    <span class="attr">xpack.security.authc.realms.oidc.oidc1:</span></span><br><span class="line">      <span class="attr">order:</span> <span class="number">2</span></span><br><span class="line">      <span class="attr">rp.client_id:</span> <span class="string">"kibana"</span></span><br><span class="line">      <span class="comment"># rp.client_secret: "secret"  # rp.client_secret 不能这样写在配置文件，有下面报错信息</span></span><br><span class="line">      <span class="attr">rp.response_type:</span> <span class="string">code</span></span><br><span class="line">      <span class="attr">rp.requested_scopes:</span> <span class="string">[openid,profile]</span></span><br><span class="line">      <span class="attr">rp.redirect_uri:</span> <span class="string">"http://kibana.staging.keep.com/api/security/v1/oidc"</span></span><br><span class="line">      <span class="attr">rp.post_logout_redirect_uri:</span> <span class="string">"http://kibana.staging.keep.com/logged_out"</span></span><br><span class="line">      <span class="attr">op.issuer:</span> <span class="string">"https://sts.keep.cn"</span></span><br><span class="line">      <span class="attr">op.authorization_endpoint:</span> <span class="string">"http://sts.staging.keep.com/connect/authorize"</span></span><br><span class="line">      <span class="attr">op.token_endpoint:</span> <span class="string">"http://sts.staging.keep.com/connect/token"</span></span><br><span class="line">      <span class="comment">#op.userinfo_endpoint: "http://sts.staging.keep.com/connect/userinfo"</span></span><br><span class="line">      <span class="comment">#op.end_session_endpoint: "http://sts.staging.keep.com/connect/endsession"</span></span><br><span class="line">      <span class="attr">claims.principal:</span> <span class="string">email_verified</span></span><br><span class="line">      <span class="attr">claim_patterns.principal:</span> <span class="string">"^([^@]+)@keep\\.com$"</span></span><br></pre></td></tr></table></figure>
<p>kb-cm.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">xpack.security.authc.providers:</span> <span class="string">[oidc,</span> <span class="string">basic]</span></span><br><span class="line"><span class="attr">xpack.security.authc.oidc.realm:</span> <span class="string">"oidc1"</span></span><br><span class="line"><span class="attr">server.xsrf.whitelist:</span> <span class="string">[/api/security/v1/oidc,</span> <span class="string">/logged_out]</span></span><br></pre></td></tr></table></figure>
<p>错误信息如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;Caused by: java.lang.IllegalArgumentException: unknown setting [xpack.security.authc.realms.oidc.oidc1.op.end_session_endpoint] please check that any required plugins are installed, or check the breaking changes documentation for removed settings&quot;,</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">[xpack.security.authc.realms.oidc.oidc1.rp.client_secret] is a secure setting and must be stored inside the Elasticsearch keystore, but was found inside elasticsearch.yml&quot;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>遇到的异常主要有：</p>
<ul>
<li><p>[xpack.security.authc.realms.oidc.oidc1.op.end_session_endpoint] please check that any required plugins are installed, or check the breaking changes documentation for removed settings”</p>
</li>
<li><p>Setting [xpack.security.authc.realms.oidc.oidc1.rp.client_secret] is a secure setting and must be stored inside the Elasticsearch keystore, but was found inside elasticsearch.yml</p>
</li>
<li><p>java.lang.IllegalStateException: security initialization failed”</p>
<p>The configuration setting [xpack.security.authc.realms.oidc.oidc1.rp.client_secret] is required”</p>
</li>
</ul>
<h3 id="使用环境变量-保密字典的方式"><a href="#使用环境变量-保密字典的方式" class="headerlink" title="使用环境变量+保密字典的方式"></a>使用环境变量+保密字典的方式</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rp-client-secret</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">xpack.security.authc.realms.oidc.oidc1.rp.client_secret:</span> <span class="string">c2VjcmV0Cg==</span></span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">"xpack.security.authc.realms.oidc.oidc1.rp.client_secret"</span></span><br><span class="line">    <span class="attr">valueFrom:</span></span><br><span class="line">      <span class="attr">secretKeyRef:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">rp-client-secret</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">xpack.security.authc.realms.oidc.oidc1.rp.client_secret</span></span><br></pre></td></tr></table></figure>
<p>报错同上，失败</p>
<h3 id="initContainers方式"><a href="#initContainers方式" class="headerlink" title="initContainers方式"></a>initContainers方式</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">initContainers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">lzzeng/es-xpack:7.5.1</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">inites</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sh</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">|</span>                </span><br><span class="line">        <span class="string">echo</span> <span class="string">-e</span> <span class="string">"y\nsecret"</span> <span class="string">|</span> <span class="string">/usr/share/elasticsearch/bin/elasticsearch-keystore</span> <span class="string">add</span> <span class="string">--stdin</span> <span class="string">xpack.security.authc.realms.oidc.oidc1.rp.client_secret</span></span><br><span class="line">        <span class="string">exit</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config</span></span><br><span class="line">      <span class="attr">subPath:</span> <span class="string">elasticsearch.keystore</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/usr/share/elasticsearch/config/elasticsearch.keystore</span></span><br></pre></td></tr></table></figure>
<p>企图通过initContainer与es共享配置的方式设置rp.client_secret，initContainer正常初始化后，es pod异常退出，主要错误原因如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@zabbix02 4cp-err]<span class="comment"># kubectl logs -f -n yhelk elasticsearch-0 </span></span><br><span class="line">Exception <span class="keyword">in</span> thread <span class="string">"main"</span> java.lang.IllegalStateException: unable to <span class="built_in">read</span> from standard input; is standard input open and a tty attached?</span><br><span class="line">	at org.elasticsearch.cli.Terminal<span class="variable">$SystemTerminal</span>.readText(Terminal.java:207)</span><br><span class="line">	at org.elasticsearch.cli.Terminal.promptYesNo(Terminal.java:140)</span><br><span class="line">	at org.elasticsearch.common.settings.CreateKeyStoreCommand.execute(CreateKeyStoreCommand.java:43)</span><br><span class="line">	at org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:86)</span><br><span class="line">	at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:125)</span><br><span class="line">	at org.elasticsearch.cli.MultiCommand.execute(MultiCommand.java:77)</span><br><span class="line">	at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:125)</span><br><span class="line">	at org.elasticsearch.cli.Command.main(Command.java:90)</span><br><span class="line">	at org.elasticsearch.common.settings.KeyStoreCli.main(KeyStoreCli.java:41)</span><br></pre></td></tr></table></figure>
<p>失败</p>
<h3 id="直接修改es镜像的方式"><a href="#直接修改es镜像的方式" class="headerlink" title="直接修改es镜像的方式"></a>直接修改es镜像的方式</h3><p>直接修改es镜像，在镜像中生成elasticsearch.keystore，并完成其它配置。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">FROM</span> <span class="string">lzzeng/es-xpack:7.5.1</span></span><br><span class="line"></span><br><span class="line"><span class="string">ENV</span> <span class="string">RP_CLIENT_SECRET</span> <span class="string">secret</span></span><br><span class="line"></span><br><span class="line"><span class="string">ADD</span> <span class="string">elasticsearch.yml</span> <span class="string">/usr/share/elasticsearch/config/</span></span><br><span class="line"><span class="string">RUN</span> <span class="string">echo</span> <span class="string">-e</span> <span class="string">"y\n$&#123;RP_CLIENT_SECRET&#125;"</span> <span class="string">|</span> <span class="string">/usr/share/elasticsearch/bin/elasticsearch-keystore</span> <span class="string">add</span> <span class="string">--stdin</span> <span class="string">xpack.security.authc.realms.oidc.oidc1.rp.client_secret;</span> <span class="string">/usr/share/elasticsearch/bin/elasticsearch-keystore</span> <span class="string">list</span> <span class="string">&gt;</span> <span class="string">/opt/elasticsearch.keystore</span></span><br></pre></td></tr></table></figure>
<p>elasticsearch.yml:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cluster.name:</span> <span class="string">"docker-cluster"</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="attr">discovery.zen.minimum_master_nodes:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">discovery.type:</span> <span class="string">single-node</span></span><br><span class="line"><span class="attr">xpack.security.authc.realms.active_directory:</span></span><br><span class="line">  <span class="attr">my_ad:</span></span><br><span class="line">    <span class="attr">order:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">domain_name:</span> <span class="string">keep.com</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">ldap://192.168.100.120:389,</span> <span class="string">ldap://192.168.100.129:389</span></span><br><span class="line">    <span class="attr">bind_dn:</span> <span class="string">xxx@keep.com</span></span><br><span class="line">    <span class="attr">bind_password:</span> <span class="string">xxxxxx</span></span><br><span class="line">    <span class="attr">load_balance:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">"round_robin"</span></span><br><span class="line">    <span class="attr">user_search:</span></span><br><span class="line">      <span class="attr">base_dn:</span> <span class="string">"dc=keep,dc=com"</span></span><br><span class="line">      <span class="attr">filter:</span> <span class="string">"(&amp;(objectClass=user)(sAMAccountName=&#123;0&#125;))"</span></span><br><span class="line">    <span class="attr">group_search:</span></span><br><span class="line">      <span class="attr">base_dn:</span> <span class="string">"dc=keep,dc=com"</span></span><br><span class="line">    <span class="comment">#files:</span></span><br><span class="line">    <span class="comment">#  role_mapping: "/usr/share/elasticsearch/config/role_mapping.yml"</span></span><br><span class="line">    <span class="comment">#unmapped_groups_as_roles: true</span></span><br><span class="line"><span class="attr">xpack.security.authc.realms.oidc.oidc1:</span></span><br><span class="line">  <span class="attr">order:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">rp.client_id:</span> <span class="string">"kibana"</span></span><br><span class="line">  <span class="attr">rp.response_type:</span> <span class="string">code</span></span><br><span class="line">  <span class="attr">rp.requested_scopes:</span> <span class="string">[openid,</span> <span class="string">profile]</span></span><br><span class="line">  <span class="attr">rp.redirect_uri:</span> <span class="string">"http://kibana.staging.keep.com/api/security/v1/oidc"</span></span><br><span class="line">  <span class="attr">op.issuer:</span> <span class="string">"https://sts.keep.cn"</span></span><br><span class="line">  <span class="attr">op.authorization_endpoint:</span> <span class="string">"http://sts.staging.keep.com/connect/authorize"</span></span><br><span class="line">  <span class="attr">op.token_endpoint:</span> <span class="string">"http://sts.staging.keep.com/connect/token"</span></span><br><span class="line">  <span class="attr">claims.principal:</span> <span class="string">email_verified</span></span><br><span class="line">  <span class="attr">claim_patterns.principal:</span> <span class="string">"^([^@]+)@keep\\.com$"</span></span><br></pre></td></tr></table></figure>
<p>重新部署，报错如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="string">"Caused by: org.elasticsearch.common.settings.SettingsException: found settings for the realm [oidc1] (with type [oidc]) in the secure settings (elasticsearch.keystore), but this realm does not have any settings in elasticsearch.yml. Please remove these settings from the keystore, or update their names to match one of the realms that are defined in elasticsearch.yml - [xpack.security.authc.realms.oidc.oidc1.rp.client_secret]"</span>,</span><br></pre></td></tr></table></figure>
<p>失败</p>
<h3 id="postStart方式"><a href="#postStart方式" class="headerlink" title="postStart方式"></a>postStart方式</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">image:</span></span><br><span class="line">    <span class="string">...</span></span><br><span class="line">    </span><br><span class="line">    <span class="attr">lifecycle:</span></span><br><span class="line">      <span class="attr">postStart:</span></span><br><span class="line">        <span class="attr">exec:</span></span><br><span class="line">          <span class="attr">command:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">sh</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line">              <span class="string">rm</span> <span class="string">-f</span> <span class="string">/usr/share/elasticsearch/config/elasticsearch.keystore*</span></span><br><span class="line">              <span class="string">echo</span> <span class="string">-e</span> <span class="string">"y\nsecret"</span> <span class="string">|</span> <span class="string">/usr/share/elasticsearch/bin/elasticsearch-keystore</span> <span class="string">add</span> <span class="string">--stdin</span> <span class="string">xpack.security.authc.realms.oidc.oidc1.rp.client_secret</span></span><br><span class="line">              <span class="string">exit</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>再反复根据错误提示修改配置字典，报错信息有：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="string">"Caused by: org.elasticsearch.common.settings.SettingsException: The configuration setting [xpack.security.authc.realms.oidc.oidc1.op.jwkset_path] is required"</span>,</span><br><span class="line"><span class="string">"at org.elasticsearch.xpack.security.authc.oidc.OpenIdConnectRealm.require(OpenIdConnectRealm.java:329) ~[?:?]"</span>,</span><br><span class="line"><span class="string">"at org.elasticsearch.xpack.security.authc.oidc.OpenIdConnectRealm.buildOpenIdConnectProviderConfiguration(OpenIdConnectRealm.java:283) ~[?:?]"</span>,</span><br><span class="line"><span class="string">"at org.elasticsearch.xpack.security.authc.oidc.OpenIdConnectRealm.&lt;init&gt;(OpenIdConnectRealm.java:105) ~[?:?]"</span>,</span><br><span class="line"><span class="string">"at org.elasticsearch.xpack.security.authc.InternalRealms.lambda<span class="variable">$getFactories</span><span class="variable">$7</span>(InternalRealms.java:119) ~[?:?]"</span>,</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="string">"Caused by: org.elasticsearch.common.settings.SettingsException: The configuration setting [xpack.security.authc.realms.oidc.oidc1.rp.client_secret] is required"</span>,</span><br><span class="line"><span class="string">"at org.elasticsearch.xpack.security.authc.oidc.OpenIdConnectRealm.buildRelyingPartyConfiguration(OpenIdConnectRealm.java:259) ~[?:?]"</span>,</span><br><span class="line"><span class="string">"at org.elasticsearch.xpack.security.authc.oidc.OpenIdConnectRealm.&lt;init&gt;(OpenIdConnectRealm.java:104) ~[?:?]"</span>,</span><br><span class="line"><span class="string">"at org.elasticsearch.xpack.security.authc.InternalRealms.lambda<span class="variable">$getFactories</span><span class="variable">$7</span>(InternalRealms.java:119) ~[?:?]"</span>,</span><br><span class="line"><span class="string">"at org.elasticsearch.xpack.security.authc.Realms.initRealms(Realms.java:218) ~[?:?]"</span>,</span><br><span class="line"><span class="string">"at org.elasticsearch.xpack.security.authc.Realms.&lt;init&gt;(Realms.java:72) ~[?:?]"</span>,</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="string">"Caused by: java.lang.IllegalStateException: OpenID Connect Realm requires that the token service be enabled (xpack.security.authc.token.enabled)"</span>,</span><br><span class="line"><span class="string">"at org.elasticsearch.xpack.security.authc.oidc.OpenIdConnectRealm.&lt;init&gt;(OpenIdConnectRealm.java:114) ~[?:?]"</span>,</span><br><span class="line"><span class="string">"at org.elasticsearch.xpack.security.authc.InternalRealms.lambda<span class="variable">$getFactories</span><span class="variable">$7</span>(InternalRealms.java:119) ~[?:?]"</span>,</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">"type"</span>: <span class="string">"server"</span>, <span class="string">"timestamp"</span>: <span class="string">"2020-02-27T01:47:32,863Z"</span>, <span class="string">"level"</span>: <span class="string">"WARN"</span>, <span class="string">"component"</span>: <span class="string">"o.e.b.ElasticsearchUncaughtExceptionHandler"</span>, <span class="string">"cluster.name"</span>: <span class="string">"docker-cluster"</span>, <span class="string">"node.name"</span>: <span class="string">"elasticsearch-0"</span>, <span class="string">"message"</span>: <span class="string">"uncaught exception in thread [main]"</span>, </span><br><span class="line"><span class="string">"stacktrace"</span>: [<span class="string">"org.elasticsearch.bootstrap.StartupException: java.lang.IllegalStateException: security initialization failed"</span>,</span><br><span class="line"><span class="string">"at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:163) ~[elasticsearch-7.5.1.jar:7.5.1]"</span>,</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="string">"Caused by: java.lang.IllegalStateException: Unable to create a IDTokenValidator instance"</span>,</span><br><span class="line"><span class="string">"at org.elasticsearch.xpack.security.authc.oidc.OpenIdConnectAuthenticator.createIdTokenValidator(OpenIdConnectAuthenticator.java:619) ~[?:?]"</span>,</span><br><span class="line"><span class="string">"at org.elasticsearch.xpack.security.authc.oidc.OpenIdConnectAuthenticator.&lt;init&gt;(OpenIdConnectAuthenticator.java:143) ~[?:?]"</span>,</span><br><span class="line"><span class="string">"at org.elasticsearch.xpack.security.authc.oidc.OpenIdConnectRealm.&lt;init&gt;(OpenIdConnectRealm.java:116) ~[?:?]"</span>,</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="string">"Caused by: java.lang.IllegalStateException: security initialization failed"</span>,</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="string">"Caused by: java.lang.IllegalStateException: Unable to create a IDTokenValidator instance"</span>,</span><br><span class="line"><span class="string">"at org.elasticsearch.xpack.security.authc.oidc.OpenIdConnectAuthenticator.createIdTokenValidator(OpenIdConnectAuthenticator.java:619) ~[?:?]"</span>,</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="string">"Caused by: java.nio.file.NoSuchFileException: /usr/share/elasticsearch/config/oidc/jwkset.json"</span>,</span><br><span class="line"><span class="string">"at sun.nio.fs.UnixException.translateToIOException(UnixException.java:92) ~[?:?]"</span>,</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>op.jwkset_path</strong></p>
<p>The path to a file or a URL containing a JSON Web Key Set with the key material that the OpenID Connect Provider uses for signing tokens and claims responses.</p>
</blockquote>
<p><strong>当前错误原因：缺少JSON Web密钥集的文件或URL，需由STS提供 op.jwkset_path 信息，以进一步尝试。</strong></p>
]]></content>
      <categories>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>ELK</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Basic 01</title>
    <url>/python/python-basic-map-list-dict-set/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>列表和字典类型 —— 这可能是在Python程序中所见到并使用的两种最常见、最具有灵活性而且功能最为强大的集合体类型。</p>
</blockquote>
<a id="more"></a>
<h2 id="map-映射"><a href="#map-映射" class="headerlink" title="map 映射"></a>map 映射</h2><p>map()是Python内置的高阶函数，它接收一个函数 f 和一个 list，并通过把函数 f 依次作用在 list 的每个元素上，得到一个新的 list 并返回。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; L = map(str, [1, 2, 4])         <span class="comment"># int转str</span></span><br><span class="line">&gt;&gt;&gt; L2 = list(L)</span><br><span class="line">&gt;&gt;&gt; <span class="keyword">for</span> e <span class="keyword">in</span> L:                     <span class="comment"># L 已经迭代过了，不会print</span></span><br><span class="line">...   <span class="built_in">print</span>(e)</span><br><span class="line">... </span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt; L2</span><br><span class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'4'</span>]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; L = list(map(ord, <span class="string">'abcd'</span>))              <span class="comment"># ord 字符转ASC-II码</span></span><br><span class="line">&gt;&gt;&gt; L</span><br><span class="line">[97, 98, 99, 100]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; L = list(map(chr, range(97,100)))       <span class="comment"># chr ASC-II码转字符</span></span><br><span class="line">&gt;&gt;&gt; L</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; list(map(str.upper, [<span class="string">'a'</span>, <span class="string">'B'</span>, <span class="string">'c'</span>]))   <span class="comment"># 转大写</span></span><br><span class="line">[<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; d2</span><br><span class="line">&#123;<span class="string">'b'</span>: <span class="string">'555'</span>, <span class="string">'c'</span>: [3, 4, 5], <span class="string">'a'</span>: &#123;<span class="string">'aa'</span>: [9, 11], <span class="string">'bb'</span>: 44&#125;, (1, 2, 6): <span class="string">'999'</span>&#125;</span><br><span class="line">&gt;&gt;&gt; list(map(str, d2))                      <span class="comment"># 提取keys，并转化为str了</span></span><br><span class="line">[<span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'a'</span>, <span class="string">'(1, 2, 6)'</span>]</span><br></pre></td></tr></table></figure>
<h2 id="list-有序集"><a href="#list-有序集" class="headerlink" title="list 有序集"></a>list 有序集</h2><h3 id="remove方法按给定元素删除"><a href="#remove方法按给定元素删除" class="headerlink" title="remove方法按给定元素删除"></a>remove方法按给定元素删除</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, 2, 3, 2]</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, 2, 3, 2]</span><br><span class="line">&gt;&gt;&gt; a.remove(<span class="string">'a'</span>)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[<span class="string">'b'</span>, <span class="string">'a'</span>, 2, 3, 2]</span><br><span class="line">&gt;&gt;&gt; a.remove(2)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[<span class="string">'b'</span>, <span class="string">'a'</span>, 3, 2]    <span class="comment"># remove删除的是左边第一个找到的元素</span></span><br></pre></td></tr></table></figure>
<h3 id="pop方法按index删除"><a href="#pop方法按index删除" class="headerlink" title="pop方法按index删除"></a>pop方法按index删除</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, 2, 3, 2]</span><br><span class="line">&gt;&gt;&gt; a.pop(2)</span><br><span class="line"><span class="string">'a'</span></span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, 2, 3, 2]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; a = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, 2, 3, 2]</span><br><span class="line">&gt;&gt;&gt; a.pop()                         <span class="comment"># 不给定index时，pop的是末尾元素，等同于 a.pop(-1)</span></span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, 2, 3]</span><br></pre></td></tr></table></figure>
<h3 id="del命令也可以删除列表元素，按index删除"><a href="#del命令也可以删除列表元素，按index删除" class="headerlink" title="del命令也可以删除列表元素，按index删除"></a>del命令也可以删除列表元素，按index删除</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, 2, 3, 2]</span><br><span class="line">&gt;&gt;&gt; del a[2]</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, 2, 3, 2]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; del a         <span class="comment"># del列表名 会删除此列表</span></span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">'a'</span> is not defined</span><br></pre></td></tr></table></figure>
<h3 id="列表分片赋值"><a href="#列表分片赋值" class="headerlink" title="列表分片赋值"></a>列表分片赋值</h3><p>分片赋值最好分成两步来理解：</p>
<blockquote>
<p>1.删除, 删除等号左边指定的分片, 含头不含尾。</p>
<p>2.插入, 将包含在等号右边对象中的片段插入旧分片被删除的位置。</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; L = [1, 3, 5, 7, 9]</span><br><span class="line">&gt;&gt;&gt; L</span><br><span class="line">[1, 3, 5, 7, 9]</span><br><span class="line">&gt;&gt;&gt; L[1:3] = [2, 4, 6, 8]</span><br><span class="line">&gt;&gt;&gt; L</span><br><span class="line">[1, 2, 4, 6, 8, 7, 9]</span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">&gt;&gt;&gt; L[1:5] = []                 <span class="comment"># 分片赋值[] 相当于删除分片元素</span></span><br><span class="line">&gt;&gt;&gt; L</span><br><span class="line">[1, 7, 9]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; L[1:3] = [2, 4, 6, 8]</span><br><span class="line">&gt;&gt;&gt; L</span><br><span class="line">[1, 2, 4, 6, 8]</span><br><span class="line">&gt;&gt;&gt; del L[1:3]                  <span class="comment"># del命令删除分片</span></span><br><span class="line">&gt;&gt;&gt; L</span><br><span class="line">[1, 6, 8]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; L2</span><br><span class="line">[<span class="string">'A'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'C'</span>]</span><br><span class="line">&gt;&gt;&gt; L2[:] = []                  <span class="comment"># [:]分片表示全部元素，此处删除全部元素</span></span><br><span class="line">&gt;&gt;&gt; L2</span><br><span class="line">[]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; L2</span><br><span class="line">[<span class="string">'A'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'C'</span>]</span><br><span class="line">&gt;&gt;&gt; del L2[:]</span><br><span class="line">&gt;&gt;&gt; L2</span><br><span class="line">[]</span><br><span class="line">&gt;&gt;&gt; del L2</span><br><span class="line">&gt;&gt;&gt; L2</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">'L2'</span> is not defined</span><br></pre></td></tr></table></figure>
<h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; L = [<span class="string">'a'</span>, <span class="string">'A'</span>, <span class="string">'b'</span>, <span class="string">'C'</span>]</span><br><span class="line">&gt;&gt;&gt; L.sort()</span><br><span class="line">&gt;&gt;&gt; L</span><br><span class="line">[<span class="string">'A'</span>, <span class="string">'C'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>]</span><br><span class="line">&gt;&gt;&gt; L.sort(reverse=True)</span><br><span class="line">&gt;&gt;&gt; L</span><br><span class="line">[<span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'C'</span>, <span class="string">'A'</span>]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; L</span><br><span class="line">[<span class="string">'A'</span>, <span class="string">'C'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>]</span><br><span class="line">&gt;&gt;&gt; L.sort(key=str.lower)           <span class="comment"># ？统一按小写排序，小写后相同的保留原顺序</span></span><br><span class="line">&gt;&gt;&gt; L</span><br><span class="line">[<span class="string">'A'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'C'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># L.sort(key=str.upper) 与 L.sort(key=str.lower) 效果相同</span></span><br></pre></td></tr></table></figure>
<h2 id="set-无序集"><a href="#set-无序集" class="headerlink" title="set 无序集"></a>set 无序集</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a = <span class="built_in">set</span>(1,2,3)                    <span class="comment"># set和list 不能通过参数列表的方式初始化元素</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="built_in">set</span> expected at most 1 arguments, got 3</span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">&gt;&gt;&gt; a = <span class="built_in">set</span>([1,2,3])                  <span class="comment"># 方式一：转化list为set</span></span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3&#125;</span><br><span class="line">&gt;&gt;&gt; a = &#123;1,2,3,4&#125;                     <span class="comment"># 方式二：使用&#123;&#125;</span></span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 4&#125;</span><br><span class="line">&gt;&gt;&gt; a.pop(3)                          <span class="comment"># 因无序，没有pop(index)方法，del命令也是</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: pop() takes no arguments (1 given)</span><br><span class="line">&gt;&gt;&gt; a.remove(3)                       <span class="comment"># 有remove(element)方法，按元素删除；不要混淆pop，没有pop(element)方法</span></span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 4&#125;</span><br><span class="line">&gt;&gt;&gt; a = &#123;1,2,2,3&#125;                     <span class="comment"># 初始元素含重复，会自动剔除重复元素</span></span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3&#125;</span><br></pre></td></tr></table></figure>
<h2 id="dict-字典"><a href="#dict-字典" class="headerlink" title="dict 字典"></a>dict 字典</h2><p>Python 3.0中的keys返回一个迭代器，在Python 2.6中，keys构建并返回一个真正的列表</p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d = &#123;<span class="string">'a'</span>: 1, <span class="string">'b'</span>: 2, <span class="string">'c'</span>: [3,4,5]&#125;      <span class="comment"># 方式一</span></span><br><span class="line">&gt;&gt;&gt; d = dict(a=1, b=2, c=[3,4,5])           <span class="comment"># 方式二</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; d = &#123;&#125;                                  <span class="comment"># 方式三，逐行赋值法</span></span><br><span class="line">&gt;&gt;&gt; d[<span class="string">'a'</span>] = 1</span><br><span class="line">&gt;&gt;&gt; d[<span class="string">'b'</span>] = 2</span><br><span class="line">&gt;&gt;&gt; d[<span class="string">'c'</span>] = [3,4,5]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; d4 = dict.fromkeys([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>], 0)  <span class="comment"># 方式四，此方法只能指定key，参数二是公共的值，不写则为None</span></span><br><span class="line">&gt;&gt;&gt; d4</span><br><span class="line">&#123;<span class="string">'a'</span>: 0, <span class="string">'b'</span>: 0, <span class="string">'c'</span>: 0&#125;</span><br><span class="line">&gt;&gt;&gt; d4 = dict.fromkeys([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>])</span><br><span class="line">&gt;&gt;&gt; d4</span><br><span class="line">&#123;<span class="string">'a'</span>: None, <span class="string">'b'</span>: None, <span class="string">'c'</span>: None&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; D3 = dict.fromkeys(<span class="string">'abcd'</span>)                    <span class="comment"># 四-2, 注意'dict'字符串被分割，如同 for e in 'abcd'</span></span><br><span class="line">&gt;&gt;&gt; D3</span><br><span class="line">&#123;<span class="string">'a'</span>: None, <span class="string">'b'</span>: None, <span class="string">'c'</span>: None, <span class="string">'d'</span>: None&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; D2 = &#123;k:v <span class="keyword">for</span> k,v  <span class="keyword">in</span> zip([<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>], [1,2,3])&#125;     <span class="comment"># 解析法</span></span><br><span class="line">&gt;&gt;&gt; D2</span><br><span class="line">&#123;<span class="string">'a'</span>: 1, <span class="string">'b'</span>: 2, <span class="string">'c'</span>: 3&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; <span class="comment"># 其它转化法</span></span><br></pre></td></tr></table></figure>
<h3 id="2个list通过zip合并成dict"><a href="#2个list通过zip合并成dict" class="headerlink" title="2个list通过zip合并成dict"></a>2个list通过zip合并成dict</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; list_a = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">&gt;&gt;&gt; list_b = [1, 2, [3,4,5]]</span><br><span class="line">&gt;&gt;&gt; zip(list_a,list_b)</span><br><span class="line">&lt;zip object at 0x7f8d0b714e08&gt;</span><br><span class="line">&gt;&gt;&gt; list(zip(list_a,list_b))</span><br><span class="line">[(<span class="string">'a'</span>, 1), (<span class="string">'b'</span>, 2), (<span class="string">'c'</span>, [3, 4, 5])]</span><br><span class="line">&gt;&gt;&gt; dict(zip(list_a, list_b))</span><br><span class="line">&#123;<span class="string">'a'</span>: 1, <span class="string">'b'</span>: 2, <span class="string">'c'</span>: [3, 4, 5]&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; a = zip(list_a, list_b)                 <span class="comment"># zip 迭代器类型</span></span><br><span class="line">&gt;&gt;&gt; <span class="built_in">type</span>(a)</span><br><span class="line">&lt;class <span class="string">'zip'</span>&gt;</span><br><span class="line">&gt;&gt;&gt; <span class="keyword">for</span> m,n <span class="keyword">in</span> a:</span><br><span class="line">...     <span class="built_in">print</span>(f<span class="string">'&#123;m&#125;,&#123;n&#125;'</span>)</span><br><span class="line">... </span><br><span class="line">a,1</span><br><span class="line">b,2</span><br><span class="line">c,[3, 4, 5]</span><br></pre></td></tr></table></figure>
<h3 id="items"><a href="#items" class="headerlink" title="items"></a>items</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d = &#123;<span class="string">'a'</span>: 1, <span class="string">'b'</span>: 2, <span class="string">'c'</span>: [3,4,5]&#125;</span><br><span class="line">&gt;&gt;&gt; d</span><br><span class="line">&#123;<span class="string">'a'</span>: 1, <span class="string">'b'</span>: 2, <span class="string">'c'</span>: [3, 4, 5]&#125;</span><br><span class="line">&gt;&gt;&gt; d.items</span><br><span class="line">&lt;built-in method items of dict object at 0x7f8d0b7924c8&gt;</span><br><span class="line">&gt;&gt;&gt; d.items()</span><br><span class="line">dict_items([(<span class="string">'a'</span>, 1), (<span class="string">'b'</span>, 2), (<span class="string">'c'</span>, [3, 4, 5])])      <span class="comment"># d.items() 是dict_items类型</span></span><br><span class="line">&gt;&gt;&gt; items = list(d.items())</span><br><span class="line">&gt;&gt;&gt; items</span><br><span class="line">[(<span class="string">'a'</span>, 1), (<span class="string">'b'</span>, 2), (<span class="string">'c'</span>, [3, 4, 5])]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; <span class="keyword">for</span> k,v <span class="keyword">in</span> d.items():</span><br><span class="line">...     <span class="built_in">print</span>(f<span class="string">"&#123;k&#125;:&#123;v&#125;"</span>)</span><br><span class="line">... </span><br><span class="line">a:1</span><br><span class="line">b:2</span><br><span class="line">c:[3, 4, 5]</span><br></pre></td></tr></table></figure>
<h3 id="dict是可变类型"><a href="#dict是可变类型" class="headerlink" title="dict是可变类型"></a>dict是可变类型</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d</span><br><span class="line">&#123;<span class="string">'a'</span>: 1, <span class="string">'b'</span>: 2, <span class="string">'c'</span>: [3, 4, 5]&#125;</span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">&gt;&gt;&gt; d2 = d</span><br><span class="line">&gt;&gt;&gt; d is d2</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">&gt;&gt;&gt; d[<span class="string">'a'</span>] = 1.1</span><br><span class="line">&gt;&gt;&gt; d</span><br><span class="line">&#123;<span class="string">'a'</span>: 1.1, <span class="string">'b'</span>: 2, <span class="string">'c'</span>: [3, 4, 5]&#125;</span><br><span class="line">&gt;&gt;&gt; d2</span><br><span class="line">&#123;<span class="string">'a'</span>: 1.1, <span class="string">'b'</span>: 2, <span class="string">'c'</span>: [3, 4, 5]&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; d.pop(<span class="string">'a'</span>)                          <span class="comment"># dict 有pop(key)方法，相当于get(key)并del d[key]</span></span><br><span class="line">1.1</span><br><span class="line">&gt;&gt;&gt; d</span><br><span class="line">&#123;<span class="string">'b'</span>: 2, <span class="string">'c'</span>: [3, 4, 5]&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; d.remove(<span class="string">'a'</span>)                       <span class="comment"># ! dict 没有remove或delete方法</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">'dict'</span> object has no attribute <span class="string">'remove'</span></span><br><span class="line">&gt;&gt;&gt; d.delete(<span class="string">'a'</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">'dict'</span> object has no attribute <span class="string">'delete'</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; del d[<span class="string">'a'</span>]                          <span class="comment"># del 命令可以按key删除</span></span><br><span class="line">&gt;&gt;&gt; d</span><br><span class="line">&#123;<span class="string">'b'</span>: 2, <span class="string">'c'</span>: [3, 4, 5]&#125;</span><br></pre></td></tr></table></figure>
<h2 id="copy和deepcopy"><a href="#copy和deepcopy" class="headerlink" title="copy和deepcopy"></a>copy和deepcopy</h2><h3 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h3><p>字典、列表本身有copy方法</p>
<blockquote>
<p>拷贝需要注意的是：无条件值的分片以及字典copy方法只能做顶层复制。也就是说，不能够复制嵌套的数据结构（如果有的话）。如果你需要一个深层嵌套的数据结构的完整的、完全独立的拷贝，那么就要使用标准的copy模块——包括import copy语句，并编辑X = copy.deepcopy（Y）对任意嵌套对象Y做完整的复制。</p>
</blockquote>
<ul>
<li>没有限制条件的分片表达式(L[:])能够复制序列。</li>
<li>字典copy方法(X.copy())能够复制字典。</li>
<li>有些内置函数, 例如list, 能够生成拷贝(list(L))。</li>
<li>copy标准库模块能够生成完整拷贝。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d</span><br><span class="line">&#123;<span class="string">'b'</span>: 2, <span class="string">'c'</span>: [3, 4, 5], <span class="string">'a'</span>: &#123;<span class="string">'aa'</span>: [8, 9], <span class="string">'bb'</span>: 22&#125;&#125;</span><br><span class="line">&gt;&gt;&gt; d2 = d</span><br><span class="line">&gt;&gt;&gt; d2</span><br><span class="line">&#123;<span class="string">'b'</span>: 2, <span class="string">'c'</span>: [3, 4, 5], <span class="string">'a'</span>: &#123;<span class="string">'aa'</span>: [8, 9], <span class="string">'bb'</span>: 22&#125;&#125;</span><br><span class="line">&gt;&gt;&gt; d3 = d.copy()</span><br><span class="line">&gt;&gt;&gt; d3[<span class="string">'a'</span>] = <span class="string">'abc'</span></span><br><span class="line">&gt;&gt;&gt; d3</span><br><span class="line">&#123;<span class="string">'b'</span>: 2, <span class="string">'c'</span>: [3, 4, 5], <span class="string">'a'</span>: <span class="string">'abc'</span>&#125;</span><br><span class="line">&gt;&gt;&gt; d</span><br><span class="line">&#123;<span class="string">'b'</span>: 2, <span class="string">'c'</span>: [3, 4, 5], <span class="string">'a'</span>: &#123;<span class="string">'aa'</span>: [8, 9], <span class="string">'bb'</span>: 22&#125;&#125;</span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; d[<span class="string">'b'</span>] = 222</span><br><span class="line">&gt;&gt;&gt; d2</span><br><span class="line">&#123;<span class="string">'b'</span>: 222, <span class="string">'c'</span>: [3, 4, 5], <span class="string">'a'</span>: &#123;<span class="string">'aa'</span>: [8, 9], <span class="string">'bb'</span>: 22&#125;&#125;</span><br><span class="line">&gt;&gt;&gt; d</span><br><span class="line">&#123;<span class="string">'b'</span>: 222, <span class="string">'c'</span>: [3, 4, 5], <span class="string">'a'</span>: &#123;<span class="string">'aa'</span>: [8, 9], <span class="string">'bb'</span>: 22&#125;&#125;</span><br><span class="line">&gt;&gt;&gt; d3</span><br><span class="line">&#123;<span class="string">'b'</span>: 2, <span class="string">'c'</span>: [3, 4, 5], <span class="string">'a'</span>: <span class="string">'abc'</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; L = [1,3,5,7]</span><br><span class="line">&gt;&gt;&gt; L2 = L</span><br><span class="line">&gt;&gt;&gt; L3 = L.copy()             <span class="comment"># L3是对L的独立的复制</span></span><br><span class="line">&gt;&gt;&gt; L3</span><br><span class="line">[1, 3, 5, 7]</span><br><span class="line">&gt;&gt;&gt; L3[1] = 2                 <span class="comment"># L3改变 L和L2不变</span></span><br><span class="line">&gt;&gt;&gt; L3</span><br><span class="line">[1, 2, 5, 7]</span><br><span class="line">&gt;&gt;&gt; L</span><br><span class="line">[1, 3, 5, 7]</span><br><span class="line">&gt;&gt;&gt; L2</span><br><span class="line">[1, 3, 5, 7]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; L[1] = 100                <span class="comment"># L改变，L2跟着变，L3不变</span></span><br><span class="line">&gt;&gt;&gt; L</span><br><span class="line">[1, 100, 5, 7]</span><br><span class="line">&gt;&gt;&gt; L2</span><br><span class="line">[1, 100, 5, 7]</span><br><span class="line">&gt;&gt;&gt; L3</span><br><span class="line">[1, 2, 5, 7]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; L4 = L[:]                 <span class="comment"># [:]分片相当于L.copy(), L[0:], L[0:4]也一样</span></span><br><span class="line">&gt;&gt;&gt; L4</span><br><span class="line">[1, 100, 5, 7]</span><br><span class="line">&gt;&gt;&gt; L4[1] = 99</span><br><span class="line">&gt;&gt;&gt; L4</span><br><span class="line">[1, 99, 5, 7]</span><br><span class="line">&gt;&gt;&gt; L</span><br><span class="line">[1, 100, 5, 7]</span><br><span class="line">&gt;&gt;&gt; L2</span><br><span class="line">[1, 100, 5, 7]</span><br><span class="line">&gt;&gt;&gt; L3</span><br><span class="line">[1, 2, 5, 7]</span><br></pre></td></tr></table></figure>
<h3 id="deepcopy"><a href="#deepcopy" class="headerlink" title="deepcopy"></a>deepcopy</h3><p>copy只复制顶层结构, deepcopy可以复制嵌套的数据结构</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d</span><br><span class="line">&#123;<span class="string">'b'</span>: 222, <span class="string">'c'</span>: [3, 4, 5], <span class="string">'a'</span>: &#123;<span class="string">'aa'</span>: [8, 9], <span class="string">'bb'</span>: 22&#125;&#125;</span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">&gt;&gt;&gt; d2 = d.copy()</span><br><span class="line">&gt;&gt;&gt; d2</span><br><span class="line">&#123;<span class="string">'b'</span>: 222, <span class="string">'c'</span>: [3, 4, 5], <span class="string">'a'</span>: &#123;<span class="string">'aa'</span>: [8, 9], <span class="string">'bb'</span>: 22&#125;&#125;</span><br><span class="line">&gt;&gt;&gt; d[<span class="string">'a'</span>][<span class="string">'aa'</span>] = [8, 9, 10]                                   <span class="comment"># 修改第二层数据，会发现d2 仍然随 d 变化，因为对key:'a'的value复制的是引用</span></span><br><span class="line">&gt;&gt;&gt; d</span><br><span class="line">&#123;<span class="string">'b'</span>: 222, <span class="string">'c'</span>: [3, 4, 5], <span class="string">'a'</span>: &#123;<span class="string">'aa'</span>: [8, 9, 10], <span class="string">'bb'</span>: 22&#125;&#125;</span><br><span class="line">&gt;&gt;&gt; d2 </span><br><span class="line">&#123;<span class="string">'b'</span>: 222, <span class="string">'c'</span>: [3, 4, 5], <span class="string">'a'</span>: &#123;<span class="string">'aa'</span>: [8, 9, 10], <span class="string">'bb'</span>: 22&#125;&#125;</span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">&gt;&gt;&gt; d[<span class="string">'b'</span>] = 333                                                <span class="comment"># 修改顶层数据则不会</span></span><br><span class="line">&gt;&gt;&gt; d</span><br><span class="line">&#123;<span class="string">'b'</span>: 333, <span class="string">'c'</span>: [3, 4, 5], <span class="string">'a'</span>: &#123;<span class="string">'aa'</span>: [8, 9, 10], <span class="string">'bb'</span>: 22&#125;&#125;</span><br><span class="line">&gt;&gt;&gt; d2</span><br><span class="line">&#123;<span class="string">'b'</span>: 222, <span class="string">'c'</span>: [3, 4, 5], <span class="string">'a'</span>: &#123;<span class="string">'aa'</span>: [8, 9, 10], <span class="string">'bb'</span>: 22&#125;&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; import copy</span><br><span class="line">&gt;&gt;&gt; d3 = copy.deepcopy(d)                                       <span class="comment"># deepcopy可以实现嵌套引用结构的复制</span></span><br><span class="line">&gt;&gt;&gt; d3</span><br><span class="line">&#123;<span class="string">'b'</span>: 333, <span class="string">'c'</span>: [3, 4, 5], <span class="string">'a'</span>: &#123;<span class="string">'aa'</span>: [8, 9, 10], <span class="string">'bb'</span>: 22&#125;&#125;</span><br><span class="line">&gt;&gt;&gt; d[<span class="string">'a'</span>][<span class="string">'aa'</span>] = [9, 11]</span><br><span class="line">&gt;&gt;&gt; d</span><br><span class="line">&#123;<span class="string">'b'</span>: 333, <span class="string">'c'</span>: [3, 4, 5], <span class="string">'a'</span>: &#123;<span class="string">'aa'</span>: [9, 11], <span class="string">'bb'</span>: 22&#125;&#125;</span><br><span class="line">&gt;&gt;&gt; d3</span><br><span class="line">&#123;<span class="string">'b'</span>: 333, <span class="string">'c'</span>: [3, 4, 5], <span class="string">'a'</span>: &#123;<span class="string">'aa'</span>: [8, 9, 10], <span class="string">'bb'</span>: 22&#125;&#125;   <span class="comment"># 没变</span></span><br><span class="line">&gt;&gt;&gt; d2</span><br><span class="line">&#123;<span class="string">'b'</span>: 222, <span class="string">'c'</span>: [3, 4, 5], <span class="string">'a'</span>: &#123;<span class="string">'aa'</span>: [9, 11], <span class="string">'bb'</span>: 22&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>进一步测试</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d2</span><br><span class="line">&#123;<span class="string">'b'</span>: <span class="string">'222'</span>, <span class="string">'c'</span>: [3, 4, 5], <span class="string">'a'</span>: &#123;<span class="string">'aa'</span>: [9, 11], <span class="string">'bb'</span>: 22&#125;&#125;</span><br><span class="line">&gt;&gt;&gt; d4 = d2.copy()</span><br><span class="line">&gt;&gt;&gt; d4 is d2</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; d4 == d2</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; d2[<span class="string">'b'</span>] is d4[<span class="string">'b'</span>]                <span class="comment"># 使用copy时，对于不可变对象和（嵌套的）可变对象，都是复制（顶层）地址</span></span><br><span class="line">True                                  <span class="comment"># 因此，当顶层不可变对象修改时，互不影响</span></span><br><span class="line">&gt;&gt;&gt; d2[<span class="string">'b'</span>] = <span class="string">'555'</span></span><br><span class="line">&gt;&gt;&gt; d4[<span class="string">'b'</span>]</span><br><span class="line">222</span><br><span class="line">&gt;&gt;&gt; d2[<span class="string">'b'</span>] is d4[<span class="string">'b'</span>]</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">&gt;&gt;&gt; d2[<span class="string">'a'</span>][<span class="string">'bb'</span>] = 44                <span class="comment"># 而嵌套结构修改时，因为是原地修改（顶层地址不变），原始对象和复制对象一起改变</span></span><br><span class="line">&gt;&gt;&gt; d2</span><br><span class="line">&#123;<span class="string">'b'</span>: <span class="string">'555'</span>, <span class="string">'c'</span>: [3, 4, 5], <span class="string">'a'</span>: &#123;<span class="string">'aa'</span>: [9, 11], <span class="string">'bb'</span>: 44&#125;&#125;</span><br><span class="line">&gt;&gt;&gt; d4</span><br><span class="line">&#123;<span class="string">'b'</span>: 222, <span class="string">'c'</span>: [3, 4, 5], <span class="string">'a'</span>: &#123;<span class="string">'aa'</span>: [9, 11], <span class="string">'bb'</span>: 44&#125;&#125;</span><br><span class="line">&gt;&gt;&gt; d2[<span class="string">'a'</span>][<span class="string">'bb'</span>] is d4[<span class="string">'a'</span>][<span class="string">'bb'</span>]    <span class="comment"># 虽然子层 d2['a']['bb'] 是int不可变类型修改时第二层的相应地址变了</span></span><br><span class="line">True                                  <span class="comment"># ，但因为所关联的顶层地址不变，所以复制对象与原始对象保持一致</span></span><br><span class="line">                                      <span class="comment"># copy复制的对象 可以看作时 栈内存中的一个内存位置所指向的堆内存的顶层地址列表</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; d3 = copy.deepcopy(d2)</span><br><span class="line">&gt;&gt;&gt; d3</span><br><span class="line">&#123;<span class="string">'b'</span>: <span class="string">'555'</span>, <span class="string">'c'</span>: [3, 4, 5], <span class="string">'a'</span>: &#123;<span class="string">'aa'</span>: [9, 11], <span class="string">'bb'</span>: 22&#125;&#125;</span><br><span class="line">&gt;&gt;&gt; d3[<span class="string">'b'</span>] is d2[<span class="string">'b'</span>]</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; d3[<span class="string">'c'</span>] is d2[<span class="string">'c'</span>]</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; d3[<span class="string">'c'</span>][0] is d2[<span class="string">'c'</span>][0]</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; d3[<span class="string">'a'</span>] is d2[<span class="string">'a'</span>]</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; d3[<span class="string">'a'</span>][<span class="string">'bb'</span>] is d2[<span class="string">'a'</span>][<span class="string">'bb'</span>]</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; d3[<span class="string">'a'</span>][<span class="string">'aa'</span>] is d2[<span class="string">'a'</span>][<span class="string">'aa'</span>]</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; d3[<span class="string">'a'</span>][<span class="string">'aa'</span>][0] is d2[<span class="string">'a'</span>][<span class="string">'aa'</span>][0]</span><br><span class="line">True</span><br></pre></td></tr></table></figure>
<h2 id="比较大小"><a href="#比较大小" class="headerlink" title="比较大小"></a>比较大小</h2><p>一般来说，Python中不同的类型的比较方法如下：</p>
<ul>
<li>数字通过相对大小进行比较。</li>
<li>字符串是按照字典顺序，一个字符接一个字符地对比进行比较（”abc” &lt; “ac”）。</li>
<li>列表和元组从左到右对每部分的内容进行比较。</li>
<li>字典通过排序之后的（键、值）列表进行比较。字典的相对大小比较在Python 3.0中不支持</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d</span><br><span class="line">&#123;<span class="string">'b'</span>: 333, <span class="string">'c'</span>: [3, 4, 5], <span class="string">'a'</span>: &#123;<span class="string">'aa'</span>: [8, 9, 10], <span class="string">'bb'</span>: 22&#125;&#125;</span><br><span class="line">&gt;&gt;&gt; d2</span><br><span class="line">&#123;<span class="string">'b'</span>: 222, <span class="string">'c'</span>: [3, 4, 5], <span class="string">'a'</span>: &#123;<span class="string">'aa'</span>: [8, 9, 10], <span class="string">'bb'</span>: 22&#125;&#125;</span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">&gt;&gt;&gt; d3 = d</span><br><span class="line">&gt;&gt;&gt; d3 is d</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; d4 = d2.copy()</span><br><span class="line">&gt;&gt;&gt; d4 is d2</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; d4 == d2                  <span class="comment"># 可以测试是否相等 ==</span></span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; d2 &lt; d                    <span class="comment"># 但 python3 中不支持比大小 &gt; &lt;</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">'&lt;'</span> not supported between instances of <span class="string">'dict'</span> and <span class="string">'dict'</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python整齐输出多列</title>
    <url>/python/python-pretty-column/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>效果图：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/image-20201008161147875.png" alt="image-20201008161147875"></p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""python整齐输出多列（含中英文字符）的方法"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">is_py2 = <span class="number">2</span> == sys.version_info.major</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pretty_col</span><span class="params">(rows, title=True, print_title=True, fields=None)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :param rows: List[List] or List[Dict] type</span></span><br><span class="line"><span class="string">    :param title: whether row0 is title or not. always True when &lt;rows&gt; is List[Dict] type</span></span><br><span class="line"><span class="string">    :param print_title: print title or not when &lt;title&gt; is True,</span></span><br><span class="line"><span class="string">    :param fields: specify columns order</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_zh</span><span class="params">(ch)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        部分编码范围的字符一个字符占2个普通字符的宽度，不齐全</span></span><br><span class="line"><span class="string">        :param ch:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> is_py2:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">u'\u4e00'</span> &lt;= ch &lt;= <span class="string">u'\u9fa5'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">elif</span> <span class="string">u'\u3000'</span> &lt;= ch &lt;= <span class="string">u'\u303F'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">elif</span> <span class="string">u'\uff00'</span> &lt;= ch &lt;= <span class="string">u'\uff60'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">'\u4e00'</span> &lt;= ch &lt;= <span class="string">'\u9fa5'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">elif</span> <span class="string">'\u3000'</span> &lt;= ch &lt;= <span class="string">'\u303F'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">elif</span> <span class="string">'\uff00'</span> &lt;= ch &lt;= <span class="string">'\uff60'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">str_width</span><span class="params">(string)</span>:</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> ch <span class="keyword">in</span> string.decode(<span class="string">'utf8'</span>) <span class="keyword">if</span> is_py2 <span class="keyword">else</span> string:</span><br><span class="line">            <span class="keyword">if</span> is_zh(ch):</span><br><span class="line">                count += <span class="number">2</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(rows) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    row_list = rows</span><br><span class="line">    <span class="comment"># if type(rows[0]) is dict:</span></span><br><span class="line">    <span class="comment"># if isinstance(rows[0], OrderedDict) or isinstance(rows[0], dict):</span></span><br><span class="line">    <span class="keyword">if</span> type(rows[<span class="number">0</span>]).__name__ <span class="keyword">in</span> [<span class="string">"dict"</span>, <span class="string">"OrderedDict"</span>]:</span><br><span class="line">        title = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> fields:</span><br><span class="line">            fields = rows[<span class="number">0</span>].keys()</span><br><span class="line">        row_list = [[d.get(k) <span class="keyword">for</span> k <span class="keyword">in</span> fields] <span class="keyword">for</span> d <span class="keyword">in</span> rows]</span><br><span class="line">        row_list.insert(<span class="number">0</span>, fields)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> type(rows[<span class="number">0</span>]) <span class="keyword">is</span> list:</span><br><span class="line">        <span class="keyword">if</span> fields:</span><br><span class="line">            fields_cols = fields</span><br><span class="line">            <span class="keyword">if</span> isinstance(fields[<span class="number">0</span>], str):</span><br><span class="line">                row0 = rows[<span class="number">0</span>]</span><br><span class="line">                fields_cols = [row0.index(m) <span class="keyword">for</span> m <span class="keyword">in</span> fields]</span><br><span class="line">            row_list = [[r[i] <span class="keyword">for</span> i <span class="keyword">in</span> fields_cols] <span class="keyword">for</span> r <span class="keyword">in</span> row_list]</span><br><span class="line"></span><br><span class="line">    columns_list = list(zip(*row_list))</span><br><span class="line">    c_len = [max(map(str_width, col)) <span class="keyword">for</span> col <span class="keyword">in</span> columns_list]</span><br><span class="line">    c_len = [w + <span class="number">4</span> - w % <span class="number">4</span> <span class="keyword">for</span> w <span class="keyword">in</span> c_len]</span><br><span class="line">    r_len = sum(c_len) - <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    nr = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> row_list:</span><br><span class="line">        nr += <span class="number">1</span></span><br><span class="line">        line = <span class="string">""</span>.join([x + <span class="string">" "</span> * (c_len[i] - str_width(x)) <span class="keyword">for</span> i, x <span class="keyword">in</span> enumerate(row)])</span><br><span class="line">        <span class="keyword">if</span> <span class="number">1</span> == nr <span class="keyword">and</span> title:</span><br><span class="line">            <span class="keyword">if</span> print_title:</span><br><span class="line">                print(line)</span><br><span class="line">                print(<span class="string">"*"</span> * r_len)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        print(line)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_all</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span>(open(<span class="string">"contact.txt"</span>, <span class="string">"r"</span>)) <span class="keyword">as</span> f:</span><br><span class="line">        name_dict_list = list(csv.DictReader(f))</span><br><span class="line"></span><br><span class="line">    pretty_col(name_dict_list, title=<span class="literal">True</span>, fields=[<span class="string">"姓名"</span>, <span class="string">"phone"</span>, <span class="string">"qq"</span>, <span class="string">"email"</span>, <span class="string">"remark"</span>])</span><br><span class="line">    print(<span class="string">""</span>)</span><br><span class="line">    pretty_col(name_dict_list, title=<span class="literal">True</span>, print_title=<span class="literal">False</span>, fields=[<span class="string">"姓名"</span>, <span class="string">"phone"</span>, <span class="string">"qq"</span>, <span class="string">"email"</span>, <span class="string">"remark"</span>])</span><br><span class="line">    print(<span class="string">""</span>)</span><br><span class="line">    pretty_col(name_dict_list, title=<span class="literal">True</span>)</span><br><span class="line">    print(<span class="string">""</span>)</span><br><span class="line">    pretty_col(name_dict_list, title=<span class="literal">True</span>, print_title=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_all2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span>(open(<span class="string">"contact.txt"</span>, <span class="string">"r"</span>)) <span class="keyword">as</span> f:</span><br><span class="line">        name_list = list(csv.reader(f))</span><br><span class="line"></span><br><span class="line">    pretty_col(name_list, title=<span class="literal">True</span>, fields=[<span class="string">"姓名"</span>, <span class="string">"qq"</span>, <span class="string">"phone"</span>, <span class="string">"email"</span>, <span class="string">"remark"</span>])</span><br><span class="line">    print(<span class="string">""</span>)</span><br><span class="line">    pretty_col(name_list, title=<span class="literal">True</span>, print_title=<span class="literal">False</span>, fields=[<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>])</span><br><span class="line">    print(<span class="string">""</span>)</span><br><span class="line">    pretty_col(name_list, title=<span class="literal">True</span>)</span><br><span class="line">    print(<span class="string">""</span>)</span><br><span class="line">    pretty_col(name_list, title=<span class="literal">False</span>, fields=[<span class="string">"姓名"</span>, <span class="string">"email"</span>, <span class="string">"remark"</span>])</span><br><span class="line">    print(<span class="string">""</span>)</span><br><span class="line">    pretty_col(name_list, title=<span class="literal">False</span>, fields=[<span class="number">0</span>, <span class="number">3</span>])</span><br><span class="line">    print(<span class="string">""</span>)</span><br><span class="line">    pretty_col(name_list, title=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="string">"""contact.txt:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">姓名,phone,qq,email,remark</span></span><br><span class="line"><span class="string">张三33333333333333333333333333,15688886666,666999,zhangsan@qq.com,无</span></span><br><span class="line"><span class="string">李四44444444444444444444444444444444444444444444444444,13188889999,999777,lisi@qq.com,2020</span></span><br><span class="line"><span class="string">王!@#ii@()（）【】五5555555,156787888991,8882222222222222,ww@qq.com,2019</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    show_all()</span><br><span class="line">    print(<span class="string">""</span>)</span><br><span class="line">    print(<span class="string">""</span>)</span><br><span class="line">    print(<span class="string">""</span>)</span><br><span class="line">    print(<span class="string">""</span>)</span><br><span class="line">    show_all2()</span><br></pre></td></tr></table></figure>
<p><a href="/assets/files/pretty_column.py">附件：pretty_column.py</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python模拟栈和队列</title>
    <url>/python/python-stack-queue/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">How to reduce <span class="string">'attention residue'</span> <span class="keyword">in</span> your life </span><br><span class="line"> 34 Many of us struggle with the never-ending nature of our to-do lists, says Elizabeth Emens, author of The Art of Life Admin and a New York-based professor     of law at Columbia University.</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>模拟栈随机存取若干字符：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM_0_13_centos pyQueueStack]<span class="comment"># python stack.py </span></span><br><span class="line"></span><br><span class="line">+6: H o w   t o </span><br><span class="line">-5: o t   w o </span><br><span class="line">+5:   r e d u </span><br><span class="line">-7: u d e r   H (empty) </span><br><span class="line">+5: c e   <span class="string">' a </span></span><br><span class="line"><span class="string">+4: t t e n </span></span><br><span class="line"><span class="string">+6: t i o n   r </span></span><br><span class="line"><span class="string">-6: r   n o i t </span></span><br><span class="line"><span class="string">+7: e s i d u e '</span> </span><br><span class="line">-6: <span class="string">' e u d i s </span></span><br><span class="line"><span class="string">-5: e n e t t </span></span><br><span class="line"><span class="string">+3:   i n </span></span><br><span class="line"><span class="string">+4:   y o u </span></span><br><span class="line"><span class="string">-7: u o y   n i   </span></span><br><span class="line"><span class="string">-3: a '</span>   </span><br><span class="line">-5: e c (empty) </span><br><span class="line">+5: r   l i f </span><br><span class="line">+4: e ? </span><br><span class="line">-4: ? e f i </span><br><span class="line">-3: l   r </span><br><span class="line">End.</span><br></pre></td></tr></table></figure>
<p>模拟队列随机存取若干字符：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM_0_13_centos pyQueueStack]<span class="comment"># python queue.py </span></span><br><span class="line"></span><br><span class="line">+7: H o w   t o   </span><br><span class="line">+7: r e d u c e   </span><br><span class="line">+4: <span class="string">' a t t </span></span><br><span class="line"><span class="string">+3: e n t </span></span><br><span class="line"><span class="string">+7: i o n   r e s </span></span><br><span class="line"><span class="string">+7: i d u e '</span>   i </span><br><span class="line">+3: n   y </span><br><span class="line">+3: o u r </span><br><span class="line">+4:   l i f </span><br><span class="line">+5: e ? </span><br><span class="line">-5: H o w   t </span><br><span class="line">-6: o   r e d u </span><br><span class="line">-7: c e   <span class="string">' a t t </span></span><br><span class="line"><span class="string">-3: e n t </span></span><br><span class="line"><span class="string">-5: i o n   r </span></span><br><span class="line"><span class="string">-6: e s i d u e </span></span><br><span class="line"><span class="string">-7: '</span>   i n   y o </span><br><span class="line">-6: u r   l i f </span><br><span class="line">-7: e ? (empty) </span><br><span class="line">End.</span><br></pre></td></tr></table></figure>
<p>模拟 2个栈 实现 队列：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM_0_13_centos pyQueueStack]<span class="comment"># python stack2queue.py </span></span><br><span class="line"></span><br><span class="line">+4: H o w   </span><br><span class="line">+7: t o   r e d u </span><br><span class="line">+3: c e   </span><br><span class="line">+4: <span class="string">' a t t </span></span><br><span class="line"><span class="string">+5: e n t i o </span></span><br><span class="line"><span class="string">+4: n   r e </span></span><br><span class="line"><span class="string">+4: s i d u </span></span><br><span class="line"><span class="string">+5: e '</span>   i n </span><br><span class="line">+5:   y o u r </span><br><span class="line">+6:   l i f e ? </span><br><span class="line">-3: H o w </span><br><span class="line">-4:   t o   </span><br><span class="line">-6: r e d u c e </span><br><span class="line">-4:   <span class="string">' a t </span></span><br><span class="line"><span class="string">-6: t e n t i o </span></span><br><span class="line"><span class="string">-7: n   r e s i d </span></span><br><span class="line"><span class="string">-7: u e '</span>   i n   </span><br><span class="line">-7: y o u r   l i </span><br><span class="line">-4: f e ? (empty) </span><br><span class="line">End.</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SequenceStack</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__members = list()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_empty</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> len(self.__members)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        self.__members.append(data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.is_empty():</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">return</span> self.__members.pop()</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">length</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> len(self.__members)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.is_empty():</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">return</span> self.__members[<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__stackA = SequenceStack()</span><br><span class="line">        self.__stackB = SequenceStack()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_empty</span><span class="params">(self)</span>:</span></span><br><span class="line">         <span class="keyword">return</span> self.__stackA.is_empty() <span class="keyword">and</span> self.__stackB.is_empty()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">offer</span><span class="params">(self, e)</span>:</span></span><br><span class="line">        self.__stackA.push(e)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">poll</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.__stackB.is_empty():</span><br><span class="line">            <span class="keyword">while</span> <span class="keyword">not</span> self.__stackA.is_empty():</span><br><span class="line">                self.__stackB.push(self.__stackA.pop())</span><br><span class="line">        <span class="keyword">return</span> self.__stackB.pop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    q = Queue()</span><br><span class="line">    s = <span class="string">"""How to reduce 'attention residue' in your life?"""</span></span><br><span class="line">    n_pos = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># is_offer = int(random.random()*2) == 1 and n_pos &lt; len(s)</span></span><br><span class="line">        is_offer = n_pos &lt; len(s)</span><br><span class="line">        in_num = int(random.random()*<span class="number">5</span>) + <span class="number">3</span></span><br><span class="line">        out_num = int(random.random()*<span class="number">5</span>) + <span class="number">3</span></span><br><span class="line">        <span class="keyword">if</span> is_offer:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"\n+%1d:"</span> % in_num,</span><br><span class="line">            <span class="keyword">for</span> e <span class="keyword">in</span> s[n_pos:n_pos+in_num]:</span><br><span class="line">                <span class="keyword">print</span> e,</span><br><span class="line">                q.offer(e)</span><br><span class="line">            n_pos += in_num</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"\n-%1d:"</span> % out_num,</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(out_num):</span><br><span class="line">                <span class="keyword">if</span> q.is_empty():</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">"(empty)"</span>,</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">print</span> q.poll(),</span><br><span class="line">            <span class="keyword">if</span> q.is_empty() <span class="keyword">and</span> n_pos &gt;= len(s):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"\nEnd."</span></span><br></pre></td></tr></table></figure>
<p>队列 当 栈 使用：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM_0_13_centos pyQueueStack]<span class="comment"># python queue2stack.py </span></span><br><span class="line"></span><br><span class="line">+3: H o w </span><br><span class="line">+5:   t o   r </span><br><span class="line">+7: e d u c e   <span class="string">' </span></span><br><span class="line"><span class="string">+5: a t t e n </span></span><br><span class="line"><span class="string">+4: t i o n </span></span><br><span class="line"><span class="string">+6:   r e s i d </span></span><br><span class="line"><span class="string">+4: u e '</span>   </span><br><span class="line">-7:   <span class="string">' e u d i s </span></span><br><span class="line"><span class="string">+3: i n   </span></span><br><span class="line"><span class="string">+7: y o u r   l i </span></span><br><span class="line"><span class="string">+7: f e ? </span></span><br><span class="line"><span class="string">-5: ? e f i l </span></span><br><span class="line"><span class="string">-5:   r u o y </span></span><br><span class="line"><span class="string">-6:   n i e r   </span></span><br><span class="line"><span class="string">-5: n o i t n </span></span><br><span class="line"><span class="string">-3: e t t </span></span><br><span class="line"><span class="string">-3: a '</span>   </span><br><span class="line">-7: e c u d e r   </span><br><span class="line">-6: o t   w o H </span><br><span class="line">End.</span><br></pre></td></tr></table></figure>
<p><a href="/assets/files/stack-queue/stack.py">附件：stack.py</a></p>
<p><a href="/assets/files/stack-queue/queue.py">附件：queue.py</a></p>
<p><a href="/assets/files/stack-queue/stack2queue.py">附件：stack2queue.py</a></p>
<p><a href="/assets/files/stack-queue/queue2stack.py">附件：queue2stack.py</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python文本对齐</title>
    <url>/python/python-text-align/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>效果图：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/image-20201008165358024.png" alt="image-20201008161147875" style="zoom: 67%;"></p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># coding=utf8</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""指定行宽，文本段落分散对齐（每行尽量多输出单词，类似两端对齐，末行左对齐）"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># def full_justify2(self, words: List[str], max_width: int) -&gt; List[str]:</span></span><br><span class="line">    <span class="comment"># def full_justify2(words, max_width):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">full_justify2</span><span class="params">(words: List[str], max_width: int)</span> -&gt; List[str]:</span></span><br><span class="line">        cur = <span class="number">0</span></span><br><span class="line">        start = <span class="number">0</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(words)):</span><br><span class="line">            cur += len(words[i]) + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> cur &gt; max_width + <span class="number">1</span>:  <span class="comment"># +1是考虑空格情况，btw，此时可以整理放入res的行不包括words[i]</span></span><br><span class="line">                space_count = i - start - <span class="number">1</span>  <span class="comment"># [start,i)可以组成一行放入res</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> space_count:  <span class="comment"># 一行只有一个单词的情况</span></span><br><span class="line">                    res.append(words[i - <span class="number">1</span>].ljust(max_width, <span class="string">" "</span>))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    total_space = max_width - (cur - len(words[i]) - <span class="number">2</span>) + i - <span class="number">1</span> - start  <span class="comment"># 注意补上一开始每个space预留的一个空格</span></span><br><span class="line">                    small_space = total_space // space_count</span><br><span class="line">                    small_space_str = small_space * <span class="string">" "</span></span><br><span class="line">                    big_space_str = (small_space + <span class="number">1</span>) * <span class="string">" "</span></span><br><span class="line">                    big_space_count = total_space - small_space * space_count</span><br><span class="line">                    res.append(big_space_str.join(words[start:start + big_space_count + <span class="number">1</span>]) + small_space_str.join(</span><br><span class="line">                        [<span class="string">""</span>] + words[start + big_space_count + <span class="number">1</span>:i]))  <span class="comment"># 大小空格连接的字符串中间注意还要有空格，用空字符串坐占位符来补</span></span><br><span class="line"></span><br><span class="line">                cur = len(words[i]) + <span class="number">1</span></span><br><span class="line">                start = i</span><br><span class="line">        res.append(<span class="string">" "</span>.join(words[start:]).ljust(max_width, <span class="string">" "</span>))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="comment"># def fullJustify(self, words, maxWidth):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">full_justify</span><span class="params">(words, max_width)</span>:</span>  <span class="comment"># ? 不用self，语法规范否？</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type words: List[str]</span></span><br><span class="line"><span class="string">        :type max_width: int</span></span><br><span class="line"><span class="string">        :rtype: List[str]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        res = []</span><br><span class="line">        tmp = []</span><br><span class="line">        lg = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> words:</span><br><span class="line">            <span class="keyword">if</span> len(i) + lg &lt;= max_width:</span><br><span class="line">                tmp.append(i)</span><br><span class="line">                lg += len(i) + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res.append(tmp)</span><br><span class="line">                tmp = [i]</span><br><span class="line">                lg = len(i) + <span class="number">1</span></span><br><span class="line">        res.append(tmp)</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> res[:<span class="number">-1</span>]:</span><br><span class="line">            lg = sum(len(ws) <span class="keyword">for</span> ws <span class="keyword">in</span> word)</span><br><span class="line">            <span class="keyword">if</span> len(word) == <span class="number">1</span>:</span><br><span class="line">                word[<span class="number">0</span>] = word[<span class="number">0</span>] + <span class="string">' '</span> * (max_width - lg)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">while</span> lg != max_width:</span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(word) - <span class="number">1</span>):</span><br><span class="line">                        word[i] = word[i] + <span class="string">' '</span></span><br><span class="line">                        lg += <span class="number">1</span></span><br><span class="line">                        <span class="keyword">if</span> lg == max_width:</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">        ans = <span class="string">' '</span>.join(res[<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">if</span> len(ans) &lt; max_width:</span><br><span class="line">            ans = ans + <span class="string">" "</span> * (max_width - len(ans))</span><br><span class="line">        <span class="comment"># print(ans)</span></span><br><span class="line">        <span class="keyword">return</span> [<span class="string">''</span>.join(word) <span class="keyword">for</span> word <span class="keyword">in</span> res[:<span class="number">-1</span>]] + [ans]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    txt_list = [</span><br><span class="line">        <span class="string">"This is a sample textyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy for testing justification."</span>,</span><br><span class="line">        <span class="string">"This2 is a sa justification2."</span>,</span><br><span class="line">        <span class="string">"This3 is a sample texjustification2."</span>,</span><br><span class="line">        <span class="string">"This4 is a sample text forstification2."</span>,</span><br><span class="line">        <span class="string">"This5 is a saustification2."</span>,</span><br><span class="line">    ]</span><br><span class="line">    txt_list = <span class="string">" "</span>.join(txt_list).split(<span class="string">" "</span>)</span><br><span class="line">    max_len = <span class="number">80</span></span><br><span class="line">    <span class="comment"># ins = Solution()</span></span><br><span class="line">    <span class="comment"># for line in ins.fullJustify(txt_list, max_len):</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> Solution.full_justify(txt_list, max_len):</span><br><span class="line">        print(<span class="string">"["</span>, line, <span class="string">"]"</span>)</span><br><span class="line">        </span><br><span class="line">    print(<span class="string">" ---"</span> * <span class="number">20</span>)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> Solution.full_justify2(txt_list, max_len):</span><br><span class="line">        print(<span class="string">"["</span>, line, <span class="string">"]"</span>)</span><br></pre></td></tr></table></figure>
<p><a href="/assets/files/python-text-align.py">附件：python-text-align.py</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>股价查询小工具一枚[2]</title>
    <url>/python/stock-price-plus/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="../tools-stock-price/">旧版</a></p>
<p>针对有时输出对不齐作了改进，效果如下：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/stock-price-plus-01_20201008163516.png" alt="image-20200928004218980" style="zoom: 67%;"></p>
<a id="more"></a>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用：</span></span><br><span class="line">[root@VM_0_13_centos ~]<span class="comment"># cp sp3.py /usr/local/bin/stock-price</span></span><br><span class="line">[root@VM_0_13_centos ~]<span class="comment"># chmod +x /usr/local/bin/stock-price</span></span><br><span class="line">[root@VM_0_13_centos ~]<span class="comment"># cd /usr/local/bin</span></span><br><span class="line">[root@VM_0_13_centos ~]<span class="comment"># ln -s stock-price sp</span></span><br><span class="line"></span><br><span class="line">[root@VM_0_13_centos demo]<span class="comment"># sp -h</span></span><br><span class="line">usage: sp [-h] [-C] [-Z] stock_code [day]</span><br><span class="line"></span><br><span class="line">positional arguments:</span><br><span class="line">  stock_code      the stock code or the stock name, e.g. sz000002 or 万科A</span><br><span class="line">  day             <span class="built_in">which</span> day(s), use the number of days before today, e.g.</span><br><span class="line">                  <span class="string">"3,1"</span> or <span class="string">"1,3"</span> or <span class="string">"3,"</span> or <span class="string">",1"</span> or <span class="string">"3"</span>, by default <span class="string">","</span> is the</span><br><span class="line">                  same as <span class="string">"10,1"</span>, and the quotes are not necessary. Maximum</span><br><span class="line">                  days: 137</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --<span class="built_in">help</span>      show this <span class="built_in">help</span> message and <span class="built_in">exit</span></span><br><span class="line">  -C, --no-color  <span class="keyword">if</span> calculate delta, <span class="keyword">then</span> color, <span class="keyword">else</span> no color.</span><br><span class="line">  -Z, --en        cancel zh-CN</span><br></pre></td></tr></table></figure>
<p><a href="/assets/files/sp3.py">附件：sp3.py</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>编译xxl-job-2.1.2</title>
    <url>/task-sheduling/upgrade-xxl-job/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>xxl-job-2.0.2 只有一个admin用户，不能设置创建多个账号，v2.1.2版可以创建多个。</p>
</blockquote>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/upgrade-xxl-job.assets/1579404329759.png" alt="xxl-job首页"></p>
<a id="more"></a>
<h2 id="运行一个maven容器"><a href="#运行一个maven容器" class="headerlink" title="运行一个maven容器"></a>运行一个maven容器</h2><p>docker-compose.yml如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mvn:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">maven:3.5-jdk-8-alpine</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./data:/data</span>		<span class="comment"># 源码包xxl-job-2.1.2.tar.gz在./data下</span></span><br><span class="line">  <span class="attr">command:</span> <span class="string">["tail",</span> <span class="string">"-f"</span><span class="string">,</span> <span class="string">"/dev/null"</span><span class="string">]</span></span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d --name mvn3 maven:3.5-jdk-8-alpine tail -f /dev/null</span><br><span class="line"><span class="comment"># 复制源码包到容器/data目录中</span></span><br><span class="line">docker cp data/xxl-job-2.1.2.tar.gz mvn3:/data/</span><br></pre></td></tr></table></figure>
<h2 id="进入容器编译"><a href="#进入容器编译" class="headerlink" title="进入容器编译"></a>进入容器编译</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it mvn3 bash</span><br><span class="line"><span class="comment"># 编包</span></span><br><span class="line"><span class="built_in">cd</span> /data/xxl-job-&#123;版本号&#125;</span><br><span class="line">mvn clean package</span><br><span class="line"><span class="comment"># 拷包</span></span><br><span class="line">mkdir target</span><br><span class="line">mv xxl-job-admin/target/*.jar target/</span><br><span class="line">mv xxl-job-executor-samples/xxl-job-executor-sample-springboot/target/*.jar target/</span><br></pre></td></tr></table></figure>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/upgrade-xxl-job.assets/1579251741156.png" alt="编译成功-效果图"></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/upgrade-xxl-job.assets/1579252048628.png" alt="拷包到一个目录中"></p>
<p>将其从容器中拷贝到宿主机目录下：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/upgrade-xxl-job.assets/1579252125212.png" alt="拷包到宿主机"></p>
<p>停止xxl-job，替换原相应的所有jar包并重新启动。</p>
<p><strong>升级失败</strong></p>
<p>替换jar包并重新启动，发现启动失败。经分析是版本之间 数据库 的设计发生较大变化。因未提供数据迁移功能，通过手动复制旧版本的所有任务到新版本重建任务，完成本次升级过程。</p>
<h2 id="supervisord配置"><a href="#supervisord配置" class="headerlink" title="supervisord配置"></a>supervisord配置</h2><p>执行器（作为客户端）：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[program:xxl-job-executor]</span></span><br><span class="line"><span class="attr">command</span>=java -jar /srv/xxl-job-executor-sample-springboot-<span class="number">2.1</span>.<span class="number">2</span>.jar --server.port=<span class="number">10080</span> --xxl.job.executor.ip=<span class="number">10.1</span>.<span class="number">7.211</span>  --xxl.job.executor.port=<span class="number">9999</span> --xxl.job.admin.addresses=https://job.keep.com/xxl-job-admin --xxl.job.executor.appname=xxl-job-executor-<span class="number">7</span>-<span class="number">211</span></span><br><span class="line"><span class="attr">directory</span>=/srv</span><br><span class="line"><span class="attr">user</span>=root</span><br><span class="line"><span class="attr">startsecs</span>=<span class="number">3</span></span><br><span class="line"><span class="attr">redirect_stderr</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">stdout_logfile_maxbytes</span>=<span class="number">50</span>MB</span><br><span class="line"><span class="attr">stdout_logfile_backups</span>=<span class="number">3</span></span><br><span class="line"><span class="attr">stdout_logfile</span>=/var/log/xxl-job-executor.log</span><br></pre></td></tr></table></figure>
<p>调度服务（作为服务端）：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[program:xxl-job-admin_212]</span></span><br><span class="line"><span class="attr">command</span>=java -jar /srv/xxl-target-<span class="number">2.1</span>.<span class="number">2</span>/xxl-job-admin-<span class="number">2.1</span>.<span class="number">2</span>.jar --spring.datasource.url=jdbc:mysql://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">3306</span>/xxl_job?Unicode=<span class="literal">true</span>&amp;characterEncoding=UTF-<span class="number">8</span> --spring.datasource.username=root --spring.datasource.password=mysql@dmin --server.port=<span class="number">8080</span></span><br><span class="line"><span class="attr">directory</span>=/srv</span><br><span class="line"><span class="attr">user</span>=root</span><br><span class="line"><span class="attr">startsecs</span>=<span class="number">3</span></span><br><span class="line"><span class="attr">redirect_stderr</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">stdout_logfile_maxbytes</span>=<span class="number">50</span>MB</span><br><span class="line"><span class="attr">stdout_logfile_backups</span>=<span class="number">3</span></span><br><span class="line"><span class="attr">stdout_logfile</span>=/var/log/xxl-job-admin.log</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>任务调度</category>
      </categories>
      <tags>
        <tag>Job</tag>
      </tags>
  </entry>
  <entry>
    <title>任务调度</title>
    <url>/task-sheduling/xxl-job/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<blockquote>
<p>分布式调度在互联网企业中占据着十分重要的作用，尤其是电子商务领域，由于存在数据量大、高并发的特点，对数据处理的要求较高，既要保证高效性，也要保证准确性和安全性，相对比较耗时的业务逻辑往往会从中剥离开来进行异步处理。</p>
</blockquote>
<a id="more"></a>
<hr>
<p>下列是几款优秀和极具潜力的国产开源分布式任务调度系统：</p>
<p><strong>opencron</strong></p>
<p><a href="https://www.oschina.net/p/opencron" rel="external nofollow noopener noreferrer" target="_blank">opencron</a> 是一个功能完善且通用的开源定时任务调度系统，拥有先进可靠的自动化任务管理调度功能，提供可操作的 web 图形化管理满足多种场景下各种复杂的定时任务调度，同时集成了 linux 实时监控、webssh 等功能特性。</p>
<p><strong>LTS</strong></p>
<p><a href="https://www.oschina.net/p/lts" rel="external nofollow noopener noreferrer" target="_blank">LTS</a>，light-task-scheduler，是一款分布式任务调度框架, 支持实时任务、定时任务和 Cron 任务。有较好的伸缩性和扩展性，提供对 Spring 的支持（包括 Xml 和注解），提供业务日志记录器。支持节点监控、任务执行监、JVM 监控，支持动态提交、更改、停止任务。</p>
<p><strong>xxl-job</strong></p>
<p><a href="https://www.oschina.net/p/xxl-job" rel="external nofollow noopener noreferrer" target="_blank">XXL-JOB</a> 是一个轻量级分布式任务调度框架，支持通过 Web 页面对任务进行 CRUD 操作，支持动态修改任务状态、暂停/恢复任务，以及终止运行中任务，支持在线配置调度任务入参和在线查看调度结果。</p>
<hr>
<h2 id="XXL-JOB"><a href="#XXL-JOB" class="headerlink" title="XXL-JOB"></a>XXL-JOB</h2><h3 id="新增执行器"><a href="#新增执行器" class="headerlink" title="新增执行器"></a>新增执行器</h3><ul>
<li><p>编译执行器项目</p>
<p>源码：<a href="https://github.com/xuxueli/xxl-job/" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/xuxueli/xxl-job/</a></p>
</li>
</ul>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/xxl-job.assets/1558508900842.png" alt="1558508900842"></p>
<p>xxl-job-executor-sample是通过源码配置、编译后的组件xxl-job-executor-sample-springboot运行时提供的一个server，源码中修改的位置如下：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/xxl-job.assets/1558509187649.png" alt="1558509187649"></p>
<p>执行<code>mvn clean package</code>编译打包可生成jar文件</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/xxl-job.assets/1558509314582.png" alt="1558509314582"></p>
<p>然后，通过supervisor使其在后台持续运行。</p>
<ul>
<li>添加执行器到xxl-job-admin</li>
</ul>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/xxl-job.assets/1558512727527.png" alt="1558512727527"></p>
<p>注意：AppName与编译源码时配置的appname一致，才可以自动获取机器地址（端口）。否则，手动录入。</p>
<hr>
<h3 id="添加示例任务"><a href="#添加示例任务" class="headerlink" title="添加示例任务"></a>添加示例任务</h3><p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/xxl-job.assets/1558511698496.png" alt="1558511698496"></p>
<p>任务设置</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/xxl-job.assets/1558511749220.png" alt="1558511749220"></p>
<p><code>0 * * * * ? *</code>表示每分钟（0秒时）调度一次，因间隔短，不设置任务超时及失败重试。任务参数内填多行也是作为一个参数（$1）传递给脚本的。路由策略“第一个”表示总是在第一个OnLine机器上执行。</p>
<p>该任务的示例脚本如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"xxl-job: hello shell"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"脚本位置：<span class="variable">$0</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"任务参数：<span class="variable">$1</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"分片序号 = <span class="variable">$2</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"分片总数 = <span class="variable">$3</span>"</span></span><br><span class="line"></span><br><span class="line">failed=0</span><br><span class="line">succeed=0</span><br><span class="line">failed_urls=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> <span class="variable">$1</span> <span class="comment"># 对每一行的url</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"current url: [<span class="variable">$url</span>]"</span></span><br><span class="line">  status_code=$(curl -s -o /dev/null -w <span class="string">"%&#123;http_code&#125;"</span> <span class="variable">$url</span>) <span class="comment"># 检测http响应状态码</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"status_code: <span class="variable">$status_code</span>"</span></span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">"<span class="variable">$status_code</span>"</span> -ne 200 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Failed: Access <span class="variable">$url</span> failed."</span></span><br><span class="line">    failed_urls=<span class="string">"<span class="variable">$failed_urls</span>,<span class="variable">$url</span>"</span></span><br><span class="line">    <span class="built_in">let</span> failed=failed+1 <span class="comment"># 失败+1</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">let</span> succeed=succeed+1 <span class="comment"># 成功+1</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Good bye!"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Total: <span class="variable">$failed</span> failed <span class="variable">$succeed</span> succeed"</span> <span class="comment"># 日志中打印统计结果</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$failed</span> -lt 0 ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Failed Urls: <span class="variable">$failed_urls</span>"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> <span class="variable">$failed</span> <span class="comment"># 退出状态值，非0表示失败</span></span><br></pre></td></tr></table></figure>
<p>如果执行状态失败，将发出报警邮件。</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/xxl-job.assets/1558512929701.png" alt="1558512929701"></p>
]]></content>
      <categories>
        <category>任务调度</category>
      </categories>
      <tags>
        <tag>Job</tag>
      </tags>
  </entry>
  <entry>
    <title>K8s笔记</title>
    <url>/2020/K8s-learning/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<blockquote>
<p><em><a href="https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/" rel="external nofollow noopener noreferrer" target="_blank">Kubernetes (K8s)</a> is an open-source system for automating deployment, scaling, and management of containerized applications.</em></p>
<p><a href="https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/" rel="external nofollow noopener noreferrer" target="_blank"><strong>Kubernetes (K8s)</strong></a> 是一个开源容器编排引擎，用于自动化容器化应用程序的部署，扩展和管理。</p>
</blockquote>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/container_evolution.svg" alt="Deployment evolution"></p>
<a id="more"></a>
<p>应用部署方式的演变历史：物理机部署  =&gt; 虚拟机部署  =&gt; 容器化部署*</p>
<p>早期的应用是直接部署在物理机的，资源使用率不高。</p>
<p>举例来说，比如200qps，包含100个请求静态资源的请求和100个动态资源的请求，假设静态请求占用2M内存，动态请求占用10M内存，那么200qps占用内存约1200MB。如果服务器内存是4GB，那最高可以600qps左右，如果考虑CPU、带宽及其他资源的占用，可能实际最多支持300qps，按300qps的话，实际内存利用率就不高了。</p>
<p>虚拟机技术的出现，可以将高规格的物理服务器隔离成多个小规格的虚拟机，能更好地利用系统资源。而且，虚拟机之间有严格的隔离，为不同的应用提供了相对独立的运行环境，仅通过网络相互访问，安全性也更高了。</p>
<p>容器技术，是一种更加轻量级的虚拟化技术。尽管在资源隔离上不如虚拟机严格，但其它方面的优势也很明显。</p>
<p>容器可以运行在虚拟机里面。</p>
<p>似乎可以这么理解，以OpenStack为代表的云计算技术产生了公有云，而以K8s为代表的容器云技术则在公有云提供的基础设施之上构建出了容器云。</p>
<p>架构简图：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/k8s-arch.jpg" alt="img"></p>
<p>master节点包含的组件：</p>
<p><strong>API Server</strong>：是k8s最核心的组件，统一的资源操作入口，包括提供认证、授权、访问控制、API注册和 发现等机制，其他的组件运行依赖于api server，通过api接口可以对k8s资源对象进行curd以及监控，也能进行健康，日志等监控。</p>
<p><strong>Scheduler</strong>：属于调度器的角色，负责决策pod按照哪种算法调度到哪个node上，它会把决策的信息通过ap iserver发送给kubelet，让kubelet执行。</p>
<p><strong>Controller-Manger</strong>：为了管理集群中不同的资源，k8s为不同的资源建立了对应的controller。k8s中分了8个controller,不同的 Controller 负责对不同资源的监控和管理。</p>
<p><strong>ETCD</strong> 一般也部署在master节点上，是k8s的key-value数据库，集群的状态信息都持久化存储在ETCD中。</p>
<p>worker节点包含的组件：</p>
<p><strong>kubelet</strong>：真正的容器管理和维护者，它根据master节点上shcedule的调度决策去真正控制节点上的容器，维护 Container 的生命周期，同时也负责存储（CSI）和网络（CNI）的管理。</p>
<p><strong>kube-proxy</strong>：集群内部通过kube-proxy访问其他pod,其主要功能是提供集群内部的服务发现和负载均衡功能。</p>
<h1 id="安装K8s"><a href="#安装K8s" class="headerlink" title="安装K8s"></a>安装K8s</h1><p>尝试过以下四种安装方式：kubeadm，rancher，rke 及 kubespray。</p>
<h2 id="kubeadm"><a href="#kubeadm" class="headerlink" title="kubeadm"></a>kubeadm</h2><p>官网提供的方法。大致过程是：</p>
<ul>
<li><p>初始化环境，安装docker</p>
</li>
<li><p>先在各个节点yum安装kubelet、kubeadm、kubectl</p>
</li>
<li><p>在一个master节点kubeadm init 获得kubeadm join集群的命令</p>
</li>
<li>在其它节点上执行kubeadm join命令加入集群</li>
</ul>
<h2 id="rancher"><a href="#rancher" class="headerlink" title="rancher"></a>rancher</h2><p>先通过docker启动一个rancher管理界面，然后从管理界面复制添加节点的命令，在待加入集群的节点上执行命令，逐个添加节点创建K8s集群。界面如下：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/1551840932234.png" alt="1551840932234"></p>
<h2 id="rke"><a href="#rke" class="headerlink" title="rke"></a>rke</h2><p>rancher官方提供的一个安装工具，通过一个节点配置文件描述集群各个节点信息。</p>
<p>例如：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">nodes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">address:</span> <span class="number">192.168</span><span class="number">.100</span><span class="number">.79</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">rancher</span></span><br><span class="line">    <span class="attr">role:</span> <span class="string">[controlplane,worker,etcd]</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">address:</span> <span class="number">192.168</span><span class="number">.100</span><span class="number">.80</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">rancher</span></span><br><span class="line">    <span class="attr">role:</span> <span class="string">[controlplane,worker,etcd]</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">address:</span> <span class="number">192.168</span><span class="number">.100</span><span class="number">.81</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">rancher</span></span><br><span class="line">    <span class="attr">role:</span> <span class="string">[controlplane,etcd]</span></span><br></pre></td></tr></table></figure>
<p>执行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rke up --config  &lt;节点配置文件&gt;</span><br></pre></td></tr></table></figure>
<p>即可完成集群的初步安装，相比其它方式更快捷，但能安装的版本滞后于官网，最新的K8s版本可能尚未被rancher支持。</p>
<p>rancher集群管理界面类似下图：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/1551841031094.png" alt="1551841031094"></p>
<p>3个master、etcd + 3个node:</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/1551844009517.png" alt="1551844009517"></p>
<h2 id="kubespray"><a href="#kubespray" class="headerlink" title="kubespray"></a>kubespray</h2><blockquote>
<p>官方github:  <a href="https://github.com/kubernetes-sigs/kubespray/tree/release-2.14" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/kubernetes-sigs/kubespray/tree/release-2.14</a></p>
</blockquote>
<p>这是一种通过ansible-playbook自动安装K8s的方式。默认和kubeadm一样需要能访问国外网站，否则有点镜像或二进制文件获取不到。也可自行修改相关地址，主要涉及以下几个文件：</p>
<ul>
<li>roles/download/defaults/main.yml</li>
<li><p>inventory/sample/group_vars/k8s-cluster/k8s-cluster.yml</p>
</li>
<li><p>roles/kubespray-defaults/defaults/main.yaml</p>
</li>
</ul>
<p>修改其中的地址，替换成国内能访问到的镜像源，安装应该就能顺利进行了。默认会一并安装dashboard。</p>
<p>其主机清单（inventory）文件格式如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">[all]</span></span><br><span class="line"><span class="string">m01</span>    <span class="string">ansible_host=192.168.19.135</span> <span class="string">ip=192.168.19.135</span></span><br><span class="line"><span class="string">m02</span>    <span class="string">ansible_host=192.168.19.136</span> <span class="string">ip=192.168.19.136</span></span><br><span class="line"><span class="string">m03</span>    <span class="string">ansible_host=192.168.19.137</span> <span class="string">ip=192.168.19.137</span></span><br><span class="line"><span class="string">n01</span>    <span class="string">ansible_host=192.168.19.138</span> <span class="string">ip=192.168.19.138</span></span><br><span class="line"><span class="string">n02</span>    <span class="string">ansible_host=192.168.19.139</span> <span class="string">ip=192.168.19.139</span></span><br><span class="line"><span class="string">n03</span>    <span class="string">ansible_host=192.168.19.140</span> <span class="string">ip=192.168.19.140</span></span><br><span class="line"></span><br><span class="line"><span class="string">[kube-master]</span></span><br><span class="line"><span class="string">m01</span></span><br><span class="line"><span class="string">m02</span></span><br><span class="line"><span class="string">m03</span></span><br><span class="line"></span><br><span class="line"><span class="string">[etcd]</span></span><br><span class="line"><span class="string">m01</span></span><br><span class="line"><span class="string">m02</span></span><br><span class="line"><span class="string">m03</span></span><br><span class="line"></span><br><span class="line"><span class="string">[kube-node]</span></span><br><span class="line"><span class="string">n01</span></span><br><span class="line"><span class="string">n02</span></span><br><span class="line"><span class="string">n03</span></span><br><span class="line"></span><br><span class="line"><span class="string">[calico-rr]</span></span><br><span class="line"></span><br><span class="line"><span class="string">[k8s-cluster:children]</span></span><br><span class="line"><span class="string">kube-master</span></span><br><span class="line"><span class="string">kube-node</span></span><br></pre></td></tr></table></figure>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201115174122445.png" alt="image-20201115174122445" style="zoom:50%;"></p>
<p>安装命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost opt]<span class="comment"># cd kubespray</span></span><br><span class="line">[root@localhost kubespray]<span class="comment"># cp -r inventory/sample inventory/mycluster</span></span><br><span class="line">(修改某些无法获取到的镜像地址)</span><br><span class="line">[root@localhost kubespray]<span class="comment"># pip install -U pip</span></span><br><span class="line">[root@localhost kubespray]<span class="comment"># pip install -r requirements.txt</span></span><br><span class="line">[root@localhost kubespray]<span class="comment"># ansible-playbook -i inventory/mycluster/hosts.ini --become --become-user=root cluster.yml</span></span><br></pre></td></tr></table></figure>
<h1 id="安装-kubernetes-dashboard"><a href="#安装-kubernetes-dashboard" class="headerlink" title="安装 kubernetes dashboard"></a>安装 kubernetes dashboard</h1><blockquote>
<p>参考官方文档：<a href="https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/" rel="external nofollow noopener noreferrer" target="_blank">https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/</a></p>
</blockquote>
<p>在集群已经安装成功的前提下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0/aio/deploy/recommended.yaml</span><br></pre></td></tr></table></figure>
<p>获取登录令牌</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep kubernetes-dashboard-token|awk <span class="string">'&#123;print $1&#125;'</span>)|grep token:|awk <span class="string">'&#123;print $2&#125;'</span></span><br></pre></td></tr></table></figure>
<p>访问</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">https://&lt;master节点ip&gt;:6443/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/</span><br></pre></td></tr></table></figure>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201108222956832.png" alt="image-20201108222956832"></p>
<p>或者绑定域名访问（涉及ingress）</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201108223045757.png" alt="image-20201108223045757"></p>
<p>首页</p>
<hr>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201114225536299.png" alt="image-20201114225536299"></p>
<p>myweb名称空间</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201114225653905.png" alt="image-20201114225653905"></p>
<h1 id="K8s基础"><a href="#K8s基础" class="headerlink" title="K8s基础"></a>K8s基础</h1><p>本文涉及K8s操作的部分是在如下K8s环境中进行的：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@m01 ~]<span class="comment"># kubectl get nodes</span></span><br><span class="line">[root@m01 ~]<span class="comment"># kubectl get nodes -o wide</span></span><br></pre></td></tr></table></figure>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201114215421923.png" alt="image-20201114215421923"></p>
<h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><p>Kubernetes里的所有资源对象都可以采用YAML或者JSON格式的文件来定义或描述。</p>
<h3 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h3><p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201114220715630.png" alt="image-20201114220715630" style="zoom: 50%;"></p>
<p>Pod是Kubernetes最重要的基本概念。</p>
<p>每个Pod都有一个特殊的被称为“根容器”的Pause容器。Pause容器对应的镜像属于Kubernetes平台的一部分，除了Pause容器，每个Pod还包含一个或多个紧密相关的用户业务容器。</p>
<p>在初始化每一个pod容器的时候，都会生成一个pause容器。这个容器使得pod里面的子容器能够共享网络和存储，方便内部容器之间的调用。</p>
<font color="red">为什么Kubernetes把Pod设计成这样的特殊结构？</font>

<ul>
<li><p>在一组容器作为一个单元的情况下，我们难以简单地对“整体”进行判断及有效地行动。比如，一个容器死亡了，此时算是整体死亡么？是N/M的死亡率么？引入业务无关并且不易死亡的Pause容器作为Pod的根容器，以它的状态代表整个容器组的状态，就简单、巧妙地解决了这个难题。</p>
</li>
<li><p>Pod里的多个业务容器共享Pause容器的IP，共享Pause容器挂接的Volume，这样既简化了密切关联的业务容器之间的通信问题，也很好地解决了它们之间的文件共享问题。</p>
</li>
</ul>
<p>在Kubernetes系统中对长时间运行容器的要求是：其主程序需要一直在前台执行。对于无法改造为前台执行的应用，也可以使用开源工具Supervisor辅助进行前台运行的功能。Supervisor提供了一种可以同时启动多个后台应用，并保持Supervisor自身在前台执行的机制，可以满足Kubernetes对容器的启动要求。</p>
<p>Pod IP</p>
<p>Kubernetes为每个Pod都分配了唯一的IP地址，称之为Pod IP，一个Pod里的多个容器共享Pod IP地址。Kubernetes要求底层网络支持集群内任意两个Pod之间的TCP/IP直接通信，这通常采用虚拟二层网络技术来实现，例如Flannel、Open vSwitch等，因此在Kubernetes里一个Pod里的容器与另外主机上的Pod容器能够直接通信。</p>
<p>Pod事件</p>
<p>Event是一个事件的记录，记录了事件的最早产生时间、最后重现时间、重复次数、发起者、类型，以及导致此事件的原因等众多信息。</p>
<p>Pod资源配额</p>
<p>Kubernetes里通常以千分之一的CPU配额为最小单位，用m来表示。通常一个容器的CPU配额被定义为100～300m，即占用0.1～0.3个CPU。</p>
<p>在Kubernetes里，一个计算资源进行配额限定时需要设定以下两个参数：</p>
<ul>
<li>Requests：该资源的最小申请量，系统必须满足要求。</li>
<li>Limits：该资源最大允许使用的量，不能被突破，当容器试图使用超过这个量的资源时，可能会被Kubernetes“杀掉”并重启。</li>
</ul>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201114221430793.png" alt="image-20201114221430793" style="zoom: 67%;"></p>
<p>普通Pod</p>
<p>Pod其实有两种类型：普通的Pod及静态Pod（Static Pod）。后者比较特殊，它并没被存放在Kubernetes的etcd存储里，而是被存放在某个具体的Node上的一个具体文件中，并且只在此Node上启动、运行。而普通的Pod一旦被创建，就会被放入etcd中存储，随后会被Kubernetes Master调度到某个具体的Node上并进行绑定（Binding），随后该Pod被对应的Node上的kubelet进程实例化成一组相关的Docker容器并启动。在默认情况下，当Pod里的某个容器停止时，Kubernetes会自动检测到这个问题并且重新启动这个Pod（重启Pod里的所有容器），如果Pod所在的Node宕机，就会将这个Node上的所有Pod重新调度到其他节点上。</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201114221127406.png" alt="image-20201114221127406" style="zoom: 67%;"></p>
<p>静态Pod</p>
<blockquote>
<p>静态Pod是由kubelet进行管理的仅存在于特定Node上的Pod。它们不能通过API Server进行管理，无法与ReplicationController、Deployment或者DaemonSet进行关联，并且kubelet无法对它们进行健康检查。静态Pod总是由kubelet创建的，并且总在kubelet所在的Node上运行。</p>
<p>创建静态Pod有两种方式：配置文件方式和HTTP方式。</p>
</blockquote>
<p>Pod内的存储与通信</p>
<p>属于同一个Pod的多个容器应用之间相互访问时仅需要通过localhost就可以通信。</p>
<p>同一个Pod中的多个容器能够共享Pod级别的存储卷Volume。</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201115203204927.png" alt="image-20201115203204927" style="zoom:50%;"></p>
<p>Pod的几种状态</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201115205626768.png" alt="image-20201115205626768"></p>
<p>Pod的重启策略包括Always、OnFailure 和 Never，默认值为Always。</p>
<ul>
<li>Always：当容器失效时，由kubelet自动重启该容器。</li>
<li>OnFailure：当容器终止运行且退出码不为0时，由kubelet自动重启该容器。</li>
<li>Never：不论容器运行状态如何，kubelet都不会重启该容器。</li>
</ul>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201115210018640.png" alt="image-20201115210018640"></p>
<p>每种控制器对Pod的重启策略要求如下：</p>
<ul>
<li><p>RC和DaemonSet：必须设置为Always，需要保证该容器持续运行。</p>
</li>
<li><p>Job：OnFailure或Never，确保容器执行完成后不再重启。</p>
</li>
<li>kubelet（管理静态pod时）：在Pod失效时自动重启它，不论将RestartPolicy设置为什么值，也不会对Pod进行健康检查。</li>
</ul>
<p>Pod的健康状态可以通过两类探针来检查： LivenessProbe和ReadinessProbe，kubelet定期执行这两类探针来诊断容器的健康状况。</p>
<p>（1）LivenessProbe探针：用于判断容器是否存活（Running状态），如果LivenessProbe探针探测到容器不健康，则kubelet将杀掉该容器，并根据容器的重启策略做相应的处理。如果一个容器不包含LivenessProbe探针，那么kubelet认为该容器的LivenessProbe探针返回的值永远是Success。</p>
<p>（2）ReadinessProbe探针：用于判断容器服务是否可用（Ready状态），达到Ready状态的Pod才可以接收请求。</p>
<p>对于被Service管理的Pod，Service与Pod Endpoint的关联关系也将基于Pod是否Ready进行设置。如果在运行过程中Ready状态变为False，则系统自动将其从Service的后端Endpoint列表中隔离出去，后续再把恢复到Ready状态的Pod加回后端Endpoint列表。这样就能保证客户端在访问Service时不会被转发到服务不可用的Pod实例上。</p>
<p>LivenessProbe和ReadinessProbe均可配置以下三种实现方式。</p>
<p>（1）ExecAction：在容器内部执行一个命令，如果该命令的返回码为0，则表明容器健康。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">livenessProbe:</span></span><br><span class="line">  <span class="attr">exec:</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/tmp/health</span></span><br><span class="line">    <span class="attr">initialDelaySeconds:</span> <span class="number">30</span></span><br><span class="line">    <span class="attr">timeoutSeconds:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>（2）TCPSocketAction：通过容器的IP地址和端口号执行TCP检查，如果能够建立TCP连接，则表明容器健康。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">livenessProbe:</span></span><br><span class="line">  <span class="attr">tcpSocket:</span></span><br><span class="line">	<span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">initialDelaySeconds:</span> <span class="number">30</span></span><br><span class="line">  <span class="attr">timeoutSeconds:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>（3）HTTPGetAction：通过容器的IP地址、端口号及路径调用HTTP Get方法，如果响应的状态码大于等于200且小于400，则认为容器健康。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">livenessProbe:</span></span><br><span class="line">  <span class="attr">httpGet:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/_status/healthz</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">initialDelaySeconds:</span> <span class="number">30</span></span><br><span class="line">  <span class="attr">timeoutSeconds:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>对于每种探测方式，都需要设置initialDelaySeconds和timeoutSeconds两个参数：</p>
<ul>
<li>initialDelaySeconds：启动容器后进行首次健康检查的等待时间，单位为s。</li>
<li>timeoutSeconds：健康检查发送请求后等待响应的超时时间，单位为s。当超时发生时，kubelet会认为容器已经无法提供服务，将会重启该容器。</li>
</ul>
<p>Kubernetes的ReadinessProbe机制可能无法满足某些复杂应用对容器内服务可用状态的判断。</p>
<p>通过Pod Readiness Gates机制，用户可以将自定义的ReadinessProbe探测方式设置在Pod上，辅助Kubernetes设置Pod何时达到服务可用状态（Ready）。为了使自定义的ReadinessProbe生效，用户需要提供一个外部的控制器（Controller）来设置相应的Condition状态。</p>
<h3 id="Namespace"><a href="#Namespace" class="headerlink" title="Namespace"></a>Namespace</h3><p>Namespace（命名空间）是Kubernetes系统中的另一个非常重要的概念，Namespace在很多情况下用于实现多租户的资源隔离。如果不特别指明Namespace，则用户创建的Pod、RC、Service都将被系统创建到这个默认的名为default的Namespace中。</p>
<h3 id="Label"><a href="#Label" class="headerlink" title="Label"></a>Label</h3><p>Label（标签）也是Kubernetes系统中一个核心概念。</p>
<p>一个Label是一个key=value的键值对，其中key与value由用户自己指定。Label可以被附加到各种资源对象上，例如Node、Pod、Service、RC等，一个资源对象可以定义任意数量的Label，同一个Label也可以被添加到任意数量的资源对象上。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myweb</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">myweb</span></span><br></pre></td></tr></table></figure>
<p>给某个资源对象定义一个Label，就相当于给它打了一个标签，随后可以通过Label Selector（标签选择器）查询和筛选拥有某些Label的资源对象。一些具体的例子：</p>
<ul>
<li>name = redis-slave：匹配所有具有标签name=redis-slave的资源对象。</li>
<li>env != production：匹配所有不具有标签env=production的资源对象，比如env=test就是满足此条件的标签之一。</li>
<li>name in（redis-master, redis-slave）：匹配所有具有标签name=redis-master或者name= redis-slave的资源对象。</li>
<li>name not in（php-frontend）：匹配所有不具有标签name=php-frontend的资源对象。</li>
</ul>
<p>管理对象RC和Service则通过Selector字段设置需要关联Pod的Label，其他管理对象如Deployment、ReplicaSet、DaemonSet和Job则可以在Selector中使用基于集合的筛选条件定义。</p>
<p>基于集合的筛选示例：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">selector:</span></span><br><span class="line">  <span class="attr">matchLabels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">myweb</span></span><br><span class="line">  <span class="attr">matchExpressions:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;key:</span> <span class="string">tier,</span> <span class="attr">operator:</span> <span class="string">In,</span> <span class="attr">values:</span> <span class="string">[frontend]&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;key:</span> <span class="string">environment,</span> <span class="attr">operator:</span> <span class="string">NotIn,</span> <span class="attr">values:</span> <span class="string">[dev]&#125;</span></span><br></pre></td></tr></table></figure>
<p>如果同时设置了matchLabels和matchExpressions，则两组条件为AND关系。</p>
<p>Label Selector在Kubernetes中的重要使用场景如下。</p>
<ul>
<li>kube-controller进程通过在资源对象RC上定义的Label Selector来筛选要监控的Pod副本数量，使Pod副本数量始终符合预期设定的全自动控制流程。</li>
<li>kube-proxy进程通过Service的Label Selector来选择对应的Pod，自动建立每个Service到对应Pod的请求转发路由表，从而实现Service的智能负载均衡机制。</li>
<li>通过对某些Node定义特定的Label，并且在Pod定义文件中使用NodeSelector这种标签调度策略，kube-scheduler进程可以实现Pod定向调度的特性。</li>
</ul>
<h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p>Kubernetes里的每个Service其实就是我们经常提起的微服务架构中的一个微服务。</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201115174901221.png" alt="image-20201115174901221" style="zoom: 80%;"></p>
<p>Kubernetes的Service定义了一个服务的访问入口地址，前端的应用（Pod）通过这个入口地址访问其背后的一组由Pod副本组成的集群实例，Service与其后端Pod副本集群之间则是通过Label Selector来实现无缝对接的。</p>
<p>RC的作用实际上是保证Service的服务能力和服务质量始终符合预期标准。</p>
<p>运行在每个Node上的kube-proxy进程其实就是一个智能的软件负载均衡器，负责把对Service的请求转发到后端的某个Pod实例上，并在内部实现服务的负载均衡与会话保持机制。但Kubernetes发明了一种很巧妙又影响深远的设计：Service没有共用一个负载均衡器的IP地址，每个Service都被分配了一个全局唯一的虚拟IP地址，这个虚拟IP被称为Cluster IP。这样一来，每个服务就变成了具备唯一IP地址的通信节点，服务调用就变成了最基础的TCP网络通信问题。</p>
<p>Service一旦被创建，Kubernetes就会自动为它分配一个可用的Cluster IP，而且在Service的整个生命周期内，它的Cluster IP不会发生改变。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tomcat-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">	<span class="attr">tier:</span> <span class="string">frontend</span></span><br></pre></td></tr></table></figure>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201115175558607.png" alt="image-20201115175558607" style="zoom: 67%;"></p>
<p>在spec.ports的定义中，targetPort属性用来确定提供该服务的容器所暴露（EXPOSE）的端口号，即具体业务进程在容器内的targetPort上提供TCP/IP接入；port属性则定义了Service的虚端口。前面定义Tomcat服务时没有指定targetPort，则默认targetPort与port相同。</p>
<p>Kubernetes Service支持多个Endpoint，在存在多个Endpoint的情况下，要求每个Endpoint都定义一个名称来区分。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tomcat-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">service-port</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8005</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">shutdown-port</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">	<span class="attr">tier:</span> <span class="string">frontend</span></span><br></pre></td></tr></table></figure>
<font color="red">多端口为什么需要给每个端口都命名呢？</font>

<p>这就涉及Kubernetes的服务发现机制，Kubernetes通过Add-On增值包引入了DNS系统，把服务名作为DNS域名，这样程序就可以直接使用服务名来建立通信连接了。</p>
<p><strong>外部系统访问Service的问题</strong></p>
<p>为了更深入地理解和掌握Kubernetes，我们需要弄明白Kubernetes里的3种IP，这3种IP分别如下。</p>
<ul>
<li>Node IP：Node的IP地址</li>
<li>Pod IP：Pod的IP地址</li>
<li>Cluster IP：Service的IP地址</li>
</ul>
<p>Node IP是Kubernetes集群中每个节点的物理网卡的IP地址。</p>
<p>Pod IP是每个Pod的IP地址，它是Docker Engine根据docker0网桥的IP地址段进行分配的，通常是一个虚拟的二层网络。所以Kubernetes里一个Pod里的容器访问另外一个Pod里的容器时，就是通过Pod IP所在的<strong>虚拟二层网络</strong>进行通信的，而真实的TCP/IP流量是通过Node IP所在的物理网卡流出的。</p>
<p>Cluster IP，它也是一种虚拟的IP，但更像一个“伪造”的IP网络。</p>
<ul>
<li>Cluster IP仅仅作用于Kubernetes Service这个对象，并由Kubernetes管理和分配IP地址。</li>
<li>Cluster IP无法被Ping，因为没有一个“实体网络对象”来响应。</li>
<li>Cluster IP只能结合Service Port组成一个具体的通信端口，单独的Cluster IP不具备TCP/IP通信的基础，并且它们属于Kubernetes集群这样一个封闭的空间。</li>
</ul>
<p>Service的Cluster IP属于Kubernetes集群内部的地址，无法在集群外部直接使用这个地址。</p>
<font color="red">外部的应用或者用户怎么访问service？</font>

<p>采用NodePort是解决上述问题的最直接、有效的常见做法。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myweb</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">myweb</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">nodePort:</span> <span class="number">30888</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8000</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="string">ui</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">myweb</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br></pre></td></tr></table></figure>
<p>NodePort的实现方式是在Kubernetes集群里的每个Node上都为需要外部访问的Service开启一个对应的TCP监听端口，外部系统只要用任意一个Node的IP地址+具体的NodePort端口号即可访问此服务。</p>
<p>NodePort还没有完全解决外部访问Service的所有问题，比如负载均衡问题。</p>
<p>如果我们的集群运行在公有云上，那么只要把Service的type=NodePort改为type=LoadBalancer，Kubernetes就会自动创建一个对应的Load balancer实例并返回它的IP地址供外部客户端使用。</p>
<h3 id="Replication-Controller"><a href="#Replication-Controller" class="headerlink" title="Replication Controller"></a>Replication Controller</h3><p>Replication Controller（简称RC）是Kubernetes系统中的核心概念之一，简单来说，它其实定义了一个期望的场景，即声明某种Pod的副本数量在任意时刻都符合某个预期值，所以RC的定义包括如下几个部分：</p>
<ul>
<li>Pod期待的副本数量</li>
<li>用于筛选目标Pod的Label Selector</li>
<li>当Pod的副本数量小于预期数量时，用于创建新Pod的Pod模板（template）</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ReplicationController</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">frontend</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">	<span class="attr">tier:</span> <span class="string">frontend</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">	<span class="attr">metadata:</span></span><br><span class="line">	  <span class="attr">labels:</span></span><br><span class="line">	  <span class="attr">app:</span> <span class="string">app-demo</span></span><br><span class="line">	  <span class="attr">tier:</span> <span class="string">frontend</span></span><br><span class="line">	<span class="attr">spec:</span></span><br><span class="line">	  <span class="attr">containers:</span></span><br><span class="line">	  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tomcat-demo</span></span><br><span class="line">	  <span class="attr">image:</span> <span class="string">tomcat</span></span><br><span class="line">	  <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">	  <span class="attr">env:</span></span><br><span class="line">	  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">GET_HOSTS_FROM</span></span><br><span class="line">		<span class="attr">value:</span> <span class="string">dns</span></span><br><span class="line">	  <span class="attr">ports:</span></span><br><span class="line">	  <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>
<p>在定义一个RC并将其提交到Kubernetes集群中后，Master上的Controller Manager组件就得到通知，定期巡检系统中当前存活的目标Pod，并确保目标Pod实例的数量刚好等于此RC的期望值，如果有过多的Pod副本在运行，系统就会停掉一些Pod，否则系统会再自动创建一些Pod。</p>
<p>可以通过执行 kubectl scale 命令来实现Pod的动态缩放（Scaling）。删除RC并不会影响通过该RC已创建好的Pod。为了删除所有Pod，可以设置replicas的值为0，然后更新该RC。通过RC机制，Kubernetes很容易就实现了这种高级实用的特性，被称为“滚动升级” 。</p>
<p>RC目前已升级为另外一个新概念——Replica Set，官方解释其为“下一代的RC”。Replica Set与RC当前的唯一区别是，Replica Sets支持基于集合的Label selector（Set-based selector），而RC只支持基于等式的Label Selector（equality-based selector），这使得Replica Set的功能更强。</p>
<h3 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h3><p>Deployment是Kubernetes在1.2版本中引入的新概念，用于更好地解决Pod的编排问题。为此，Deployment在内部使用了Replica Set来实现目的，无论从Deployment的作用与目的、YAML定义，还是从它的具体命令行操作来看，我们都可以把它看作RC的一次升级，两者的相似度超过90%。</p>
<p>Deployment相对于RC的一个最大升级是我们可以随时知道当前Pod“部署”的进度。实际上由于一个Pod的创建、调度、绑定节点及在目标Node上启动对应的容器这一完整过程需要一定的时间，所以我们期待系统启动N个Pod副本的目标状态，实际上是一个连续变化的“部署过程”导致的最终状态。</p>
<p>Deployment的典型使用场景有以下几个：</p>
<ul>
<li>创建一个Deployment对象来生成对应的Replica Set并完成Pod副本的创建</li>
<li>检查Deployment的状态来看部署动作是否完成（Pod副本数量是否达到预期的值）</li>
<li>更新Deployment以创建新的Pod（比如镜像升级）</li>
<li>如果当前Deployment不稳定，则回滚到一个早先的Deployment版本</li>
<li>暂停Deployment以便于一次性修改多个PodTemplateSpec的配置项，之后再恢复Deployment，进行新的发布</li>
<li>扩展Deployment以应对高负载</li>
<li><p>查看Deployment的状态，以此作为发布是否成功的指标</p>
</li>
<li><p>清理不再需要的旧版本ReplicaSets</p>
</li>
</ul>
<p>除了API声明与Kind类型等有所区别，Deployment的定义与Replica Set的定义很类似：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">frontend</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">	<span class="attr">matchLabels:</span></span><br><span class="line">	  <span class="attr">tier:</span> <span class="string">frontend</span></span><br><span class="line">	<span class="attr">matchExpressions:</span></span><br><span class="line">	  <span class="bullet">-</span> <span class="string">&#123;key:</span> <span class="string">tier,</span> <span class="attr">operator:</span> <span class="string">In,</span> <span class="attr">values:</span> <span class="string">[frontend]&#125;</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">	<span class="attr">metadata:</span></span><br><span class="line">	  <span class="attr">labels:</span></span><br><span class="line">		<span class="attr">app:</span> <span class="string">app-demo</span></span><br><span class="line">		<span class="attr">tier:</span> <span class="string">frontend</span></span><br><span class="line">	<span class="attr">spec:</span></span><br><span class="line">	  <span class="attr">containers:</span></span><br><span class="line">	  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tomcat-demo</span></span><br><span class="line">		<span class="attr">image:</span> <span class="string">tomcat</span></span><br><span class="line">		<span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">		<span class="attr">ports:</span></span><br><span class="line">		<span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201114231530048.png" alt="image-20201114231530048" style="zoom: 80%;"></p>
<p>对上述输出中涉及的数量解释如下：</p>
<ul>
<li>DESIRED：Pod副本数量的期望值，即在Deployment里定义的Replica</li>
<li>CURRENT：当前Replica的值，实际上是Deployment创建的Replica Set里的Replica值，这个值不断增加，直到达到DESIRED为止，表明整个部署过程完成</li>
<li>UP-TO-DATE：最新版本的Pod的副本数量，用于指示在滚动升级的过程中，有多少个Pod副本已经成功升级</li>
<li>AVAILABLE：当前集群中可用的Pod副本数量，即集群中当前存活的Pod数量</li>
</ul>
<h4 id="演示-——-Deployment-扩容"><a href="#演示-——-Deployment-扩容" class="headerlink" title="演示 —— Deployment 扩容"></a>演示 —— Deployment 扩容</h4><p>扩容 myweb 为2个副本：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201114231740085.png" alt="image-20201114231740085"></p>
<p>扩容中 …</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201114231813394.png" alt="image-20201114231813394"></p>
<p>扩容完成</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201114231851088.png" alt="image-20201114231851088"></p>
<p>为了区分访问的是哪个pod，可以进入容器修改 <code>myweb</code> 的html源码，比如可以将其中之一的 <code>h1</code> 标题增加 <code>(2)</code> 字样，保存后即可生效：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201114232414808.png" alt="image-20201114232414808"></p>
<p>开2个窗口，多次刷新，会发现有时访问到的是<strong>修改版</strong>（右），有时访问到的是<strong>未修改版</strong>（左），说明扩容后的2个pod都能提供服务；并且被访问的几率差不多，这是service的负载均衡特性。这些符合预期。</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201114232526869.png" alt="image-20201114232526869"></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201114233931967.png" alt="image-20201114233931967" style="zoom: 67%;"></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201114234101500.png" alt="image-20201114234101500" style="zoom: 67%;"></p>
<h3 id="Horizontal-Pod-Autoscaler"><a href="#Horizontal-Pod-Autoscaler" class="headerlink" title="Horizontal Pod Autoscaler"></a>Horizontal Pod Autoscaler</h3><p>通过手工执行 kubectl scale 命令，我们可以实现Pod扩容或缩容。如果仅仅到此为止，显然不符合谷歌对Kubernetes的定位目标——自动化、智能化。</p>
<p>Kubernetes从1.6版本开始，增强了根据应用自定义的指标进行自动扩容和缩容的功能，API版本为autoscaling/v2alpha1，并不断演进。</p>
<p>HPA与之前的RC、Deployment一样，也属于一种Kubernetes资源对象。</p>
<p>通过追踪分析指定RC控制的所有目标Pod的负载变化情况，来确定是否需要有针对性地调整目标Pod的副本数量，这是HPA的实现原理。当前，HPA有以下两种方式作为Pod负载的度量指标。</p>
<ul>
<li>CPUUtilizationPercentage</li>
<li>应用程序自定义的度量指标，比如服务在每秒内的相应请求数（TPS或QPS）</li>
</ul>
<p>CPUUtilizationPercentage 是一个算术平均值，即目标Pod所有副本自身的CPU利用率的平均值。</p>
<p>一个Pod自身的CPU利用率是该Pod当前CPU的使用量除以它的Pod Request的值。</p>
<p>在CPUUtilizationPercentage计算过程中使用到的Pod的CPU使用量通常是1min内的平均值。</p>
<p>如果目标Pod没有定义Pod Request的值，则无法使用CPUUtilizationPercentage实现Pod横向自动扩容。</p>
<p>Kubernetes从1.2版本开始也在尝试支持应用程序自定义的度量指标。</p>
<p>HPA示例：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">autoscaling/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">HorizontalPodAutoscaler</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">php-apache</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">maxReplicas:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">minReplicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">scaleTargetRef:</span></span><br><span class="line">	<span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line">	<span class="attr">name:</span> <span class="string">php-apache</span></span><br><span class="line">  <span class="attr">targetCPUUtilizationPercentage:</span> <span class="number">90</span></span><br></pre></td></tr></table></figure>
<p>等价于</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl autoscale deployment php-apache --cpu-percent=90--min=1--max=10</span><br></pre></td></tr></table></figure>
<h3 id="StatefulSet"><a href="#StatefulSet" class="headerlink" title="StatefulSet"></a>StatefulSet</h3><p>在Kubernetes系统中，Pod的管理对象RC、Deployment、DaemonSet和Job都面向无状态的服务。但现实中有很多服务是有状态的，特别是一些复杂的中间件集群，例如MySQL集群、MongoDB集群、Akka集群、ZooKeeper集群等，这些应用集群有4个共同点：</p>
<ul>
<li>每个节点都有固定的身份ID，通过这个ID，集群中的成员可以相互发现并通信。</li>
<li>集群的规模是比较固定的，集群规模不能随意变动。</li>
<li>集群中的每个节点都是有状态的，通常会持久化数据到永久存储中。</li>
<li>如果磁盘损坏，则集群里的某个节点无法正常运行，集群功能受损。</li>
</ul>
<p>如果通过RC或Deployment控制Pod副本数量来实现上述有状态的集群，就会发现第1点是无法满足的，因为Pod的名称是随机产生的，Pod的IP地址也是在运行期才确定且可能有变动的，我们事先无法为每个Pod都确定唯一不变的ID。</p>
<p>StatefulSet从本质上来说，可以看作Deployment/RC的一个特殊变种，它有如下特性：</p>
<ul>
<li><p>StatefulSet里的每个Pod都有稳定、唯一的网络标识，可以用来发现集群内的其他成员。假设StatefulSet的名称为kafka，那么第1个Pod叫kafka-0，第2个叫kafka-1，以此类推。</p>
</li>
<li><p>StatefulSet控制的Pod副本的启停顺序是受控的，操作第n个Pod时，前n-1个Pod已经是运行且准备好的状态。</p>
</li>
<li>StatefulSet里的Pod采用稳定的持久化存储卷，通过PV或PVC来实现，删除Pod时默认不会删除与StatefulSet相关的存储卷（为了保证数据的安全）。</li>
</ul>
<h3 id="DaemonSet"><a href="#DaemonSet" class="headerlink" title="DaemonSet"></a>DaemonSet</h3><p>在每个Node上都调度一个Pod。<br>DaemonSet 用于管理在集群中每个Node上仅运行一份Pod的副本实例。</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201115215750674.png" alt="image-20201115215750674" style="zoom:50%;"></p>
<p>使用场景：</p>
<ul>
<li>在每个Node上都运行一个GlusterFS存储或者Ceph存储的Daemon进程。</li>
<li>在每个Node上都运行一个日志采集程序，例如Fluentd或者Logstach。</li>
<li>在每个Node上都运行一个性能监控程序，采集该Node的运行性能数据，例如Prometheus Node Exporter、collectd、New Relic agent或者Ganglia gmond等。</li>
</ul>
<h3 id="Job"><a href="#Job" class="headerlink" title="Job"></a>Job</h3><p>批处理任务通常并行（或者串行）启动多个计算进程去处理一批工作项（work item），在处理完成后，整个批处理任务结束。</p>
<p>与RC、Deployment、ReplicaSet、DaemonSet类似，Job也控制一组Pod容器。从这个角度来看，Job也是一种特殊的Pod副本自动控制器。</p>
<p>（1）Job所控制的Pod副本是短暂运行的，可以将其视为一组Docker容器，其中的每个Docker容器都仅仅运行一次</p>
<p>（2）Job所控制的Pod副本的工作模式能够多实例并行计算</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201115220103135.png" alt="image-20201115220103135"></p>
<h3 id="Volume"><a href="#Volume" class="headerlink" title="Volume"></a>Volume</h3><p>Volume（存储卷）是Pod中能够被多个容器访问的共享目录。</p>
<p>Kubernetes中的Volume与Pod的生命周期相同，但与容器的生命周期不相关，当容器终止或者重启时，Volume中的数据也不会丢失。</p>
<p>Volume的使用也比较简单，在大多数情况下，我们先在Pod上声明一个Volume，然后在容器里引用该Volume并挂载（Mount）到容器里的某个目录上。</p>
<p>Kubernetes提供了非常丰富的Volume类型，下面逐一进行说明：</p>
<p>1．emptyDir</p>
<p>一个emptyDir Volume是在Pod分配到Node时创建的。从它的名称就可以看出，它的初始内容为空，并且无须指定宿主机上对应的目录文件，因为这是Kubernetes自动分配的一个目录，当Pod从Node上移除时，emptyDir中的数据也会被永久删除。</p>
<p>emptyDir的一些用途如下：</p>
<ul>
<li>临时空间，例如用于某些应用程序运行时所需的临时目录，且无须永久保留。</li>
<li>长时间任务的中间过程CheckPoint的临时保存目录。</li>
<li>一个容器需要从另一个容器中获取数据的目录（多容器共享目录）。</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">	<span class="bullet">-</span> <span class="attr">name:</span> <span class="string">datavol</span></span><br><span class="line">	<span class="attr">emptyDir:</span> <span class="string">&#123;&#125;</span></span><br></pre></td></tr></table></figure>
<p>2．hostPath</p>
<p>hostPath为在Pod上挂载宿主机上的文件或目录，它通常可以用于以下几方面：</p>
<ul>
<li>容器应用程序生成的日志文件需要永久保存时，可以使用宿主机的高速文件系统进行存储。</li>
<li>需要访问宿主机上Docker引擎内部数据结构的容器应用时，可以通过定义hostPath为宿主机/var/lib/docker目录，使容器内部应用可以直接访问Docker的文件系统。</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">"persistent-storage"</span></span><br><span class="line">  <span class="attr">hostPath:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">"/data"</span></span><br></pre></td></tr></table></figure>
<p>需要注意以下几点：</p>
<ul>
<li>在不同的Node上具有相同配置的Pod，可能会因为宿主机上的目录和文件不同而导致对Volume上目录和文件的访问结果不一致。</li>
<li>如果使用了资源配额管理，则Kubernetes无法将hostPath在宿主机上使用的资源纳入管理。</li>
</ul>
<p>3．NFS</p>
<p>使用NFS网络文件系统提供的共享目录存储数据时，我们需要在系统中部署一个NFS Server。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs</span></span><br><span class="line">  <span class="attr">nfs:</span></span><br><span class="line">	<span class="attr">server:</span> <span class="string">nfs服务器ip</span></span><br><span class="line">	<span class="attr">path:</span> <span class="string">"/"</span></span><br></pre></td></tr></table></figure>
<p>另外，configmap 和 secret 也可以volume来使用。</p>
<h3 id="Persistent-Volume"><a href="#Persistent-Volume" class="headerlink" title="Persistent Volume"></a>Persistent Volume</h3><p>之前提到的Volume是被定义在Pod上的，属于计算资源的一部分，而实际上，网络存储是相对独立于计算资源而存在的一种实体资源。</p>
<p>PV可以被理解成Kubernetes集群中的某个网络存储对应的一块存储，它与Volume类似，但有以下区别。</p>
<ul>
<li><p>PV只能是网络存储，不属于任何Node，但可以在每个Node上访问。</p>
</li>
<li><p>PV并不是被定义在Pod上的，而是独立于Pod之外定义的。</p>
</li>
<li>PV目前支持的类型包括：gcePersistentDisk、AWSElasticBlockStore、AzureFile、AzureDisk、FC（Fibre Channel）、Flocker、NFS、iSCSI、RBD（Rados Block Device）、CephFS、Cinder、GlusterFS、VsphereVolume、Quobyte Volumes、VMware Photon、Portworx Volumes、ScaleIO Volumes和HostPath（仅供单机测试）。</li>
</ul>
<p>NFS PV示例：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pv0003</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">	<span class="attr">storage:</span> <span class="string">5Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">	<span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">nfs:</span></span><br><span class="line">	<span class="attr">path:</span> <span class="string">/somepath</span></span><br><span class="line">	<span class="attr">server:</span> <span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span></span><br></pre></td></tr></table></figure>
<p>PV的accessModes属性，目前有以下类型：</p>
<ul>
<li>ReadWriteOnce：读写权限，并且只能被单个Node挂载。</li>
<li>ReadOnlyMany：只读权限，允许被多个Node挂载。</li>
<li>ReadWriteMany：读写权限，允许被多个Node挂载。</li>
</ul>
<h3 id="Persistent-Volume-Claim"><a href="#Persistent-Volume-Claim" class="headerlink" title="Persistent Volume Claim"></a>Persistent Volume Claim</h3><p>如果某个Pod想申请某种类型的PV，则首先需要定义一个PersistentVolumeClaim对象：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myclaim</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">	<span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">	<span class="attr">requests:</span></span><br><span class="line">	  <span class="attr">storage:</span> <span class="string">8Gi</span></span><br></pre></td></tr></table></figure>
<p>然后，在Pod的Volume定义中引用上述PVC</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mypd</span></span><br><span class="line">  <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">    <span class="attr">claimName:</span> <span class="string">myclaim</span></span><br></pre></td></tr></table></figure>
<p>PV是有状态的对象，它的状态有以下几种：</p>
<ul>
<li>Available：空闲状态</li>
<li>Bound：已经绑定到某个PVC上</li>
<li>Released：对应的PVC已经被删除，但资源还没有被集群收回</li>
<li>Failed：PV自动回收失败。</li>
</ul>
<h3 id="Annotation"><a href="#Annotation" class="headerlink" title="Annotation"></a>Annotation</h3><p>Annotation（注解）与Label类似，也使用key/value键值对的形式进行定义。</p>
<p>不同的是Label具有严格的命名规则，它定义的是Kubernetes对象的元数据（Metadata），并且用于Label Selector。Annotation则是用户任意定义的附加信息，以便于外部工具查找。在很多时候，Kubernetes的模块自身会通过Annotation标记资源对象的一些特殊信息。</p>
<h3 id="ConfigMap"><a href="#ConfigMap" class="headerlink" title="ConfigMap"></a>ConfigMap</h3><p>我们知道，Docker通过将程序、依赖库、数据及配置文件“打包固化”到一个不变的镜像文件中的做法，解决了应用的部署的难题，但这同时带来了棘手的问题，即配置文件中的参数在运行期如何修改的问题。</p>
<p>为了解决这个问题，Docker提供了两种方式：</p>
<ul>
<li>在运行时通过容器的环境变量来传递参数</li>
<li>通过Docker Volume将容器外的配置文件映射到容器内</li>
</ul>
<p>我们都希望能集中管理系统的配置参数，而不是管理一堆配置文件。</p>
<p>K8s把所有的配置项都当作key-value字符串，这些配置项可以作为Map表中的一个项，整个Map的数据可以被持久化存储在Kubernetes的etcd数据库中，然后提供API以方便Kubernetes相关组件或客户应用CRUD操作这些数据，上述专门用来保存配置参数的Map就是Kubernetes ConfigMap资源对象。</p>
<p>Kubernetes提供了一种内建机制，将存储在etcd中的ConfigMap通过Volume映射的方式变成目标Pod内的配置文件。</p>
<p>不管目标Pod被调度到哪台服务器上，都会完成自动映射。</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201115201737742.png" alt="image-20201115201737742" style="zoom: 67%;"></p>
<p>ConfigMap供容器使用的典型用途如下：</p>
<ul>
<li>生成为容器内的环境变量</li>
<li>设置容器启动命令的启动参数（需设置为环境变量）</li>
<li>以Volume的形式挂载为容器内部的文件或目录</li>
</ul>
<p>容器应用对ConfigMap的使用有以下两种方法：</p>
<ul>
<li>通过环境变量获取ConfigMap中的内容</li>
<li>通过Volume挂载的方式将ConfigMap中的内容挂载为容器内部的文件或目录</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cm-test</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">[</span> <span class="string">"/bin/sh"</span><span class="string">,</span> <span class="string">"-c"</span><span class="string">,</span> <span class="string">"env | grep APP"</span> <span class="string">]</span></span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">APPLOGLEVEL</span></span><br><span class="line">      <span class="attr">valueFrom:</span></span><br><span class="line">        <span class="attr">configMapKeyRef:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">cm-appvars</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">apploglevel</span></span><br></pre></td></tr></table></figure>
<p>使用ConfigMap的限制条件如下：</p>
<ul>
<li><p>ConfigMap必须在Pod之前创建。</p>
</li>
<li><p>ConfigMap受Namespace限制，只有处于相同Namespace中的Pod才可以引用它。</p>
</li>
<li>ConfigMap中的配额管理还未能实现。</li>
<li>kubelet只支持可以被API Server管理的Pod使用ConfigMap。kubelet在本Node上通过–manifest-url或–config自动创建的静态Pod将无法引用ConfigMap。</li>
<li>在Pod对ConfigMap进行挂载（volumeMount）操作时，在容器内部只能挂载为“目录”，无法挂载为“文件”。</li>
</ul>
<h3 id="RBAC"><a href="#RBAC" class="headerlink" title="RBAC"></a>RBAC</h3><p>Role-Based Access Control，基于角色的访问控制。</p>
<p>RBAC引入了4个新的顶级资源对象： Role 、 ClusterRole 、 RoleBinding和ClusterRoleBinding。</p>
<p>1）角色（Role）<br>一个角色就是一组权限的集合，这里的权限都是许可形式的，不存在拒绝的规则。在一个命名空间中，可以用角色来定义一个角色，如果是集群级别的，就需要使用ClusterRole了。</p>
<p>2）集群角色（ClusterRole）<br>集群角色除了具有和角色一致的命名空间内资源的管理能力，因其集群级别的范围，还可以用于以下特殊元素的授权：</p>
<ul>
<li>集群范围的资源，例如Node</li>
<li>非资源型的路径，例如“/healthz”</li>
<li>包含全部命名空间的资源，例如pods（用于kubectl get pods –all-namespaces这样的操作授权）</li>
</ul>
<p>3）角色绑定（RoleBinding）和集群角色绑定（ClusterRoleBinding）<br>角色绑定或集群角色绑定用来把一个角色绑定到一个目标上，绑定目标可以是User（用户）、Group（组）或者Service Account。使用RoleBinding为某个命名空间授权，使用ClusterRoleBinding为集群范围内授权。</p>
<p>RoleBinding可以引用Role进行授权。</p>
<p>RoleBinding也可以引用ClusterRole，对属于同一命名空间内ClusterRole定义的资源主体进行授权。</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201115213549982.png" alt="image-20201115213549982" style="zoom:50%;"></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard-minimal</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cluster-admin</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br></pre></td></tr></table></figure>
<p>绑定cluster-admin意味着具有超级用户权限。</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201115214009131.png" alt="image-20201115214009131"></p>
<h3 id="ingress"><a href="#ingress" class="headerlink" title="ingress"></a>ingress</h3><p>用于将不同URL的访问请求转发到后端不同的Service，以实现<strong>HTTP层</strong>的业务路由机制</p>
<p>Kubernetes使用了一个Ingress策略定义和一个具体的Ingress Controller，两者结合并实现了一个完整的Ingress负载均衡器。</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201115220412264.png" alt="image-20201115220412264" style="zoom:50%;"></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/v2-784c512e37755bcfd6c4ebb63dcbb866_720w.jpg" alt="img"></p>
<p>为使用Ingress，需要创建Ingress Controller（带一个默认backend服务）和Ingress策略设置来共同完成。</p>
<p>Ingress Controller有多种：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/v2-e11d1a3fef7f0bab2ce64a8f721360bd_r.jpg" alt="preview"></p>
<p>helm 安装 ingress-nginx</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx</span><br><span class="line">helm install my-release ingress-nginx/ingress-nginx</span><br></pre></td></tr></table></figure>
<p>traefik ingress 界面效果图</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201108220655920.png" alt="image-20201108220655920"></p>
<h3 id="secret"><a href="#secret" class="headerlink" title="secret"></a>secret</h3><p>一个Secret Volume用于为Pod提供加密的信息，你可以将定义在Kubernetes中的Secret直接挂载为文件让Pod访问。Secret Volume是通过TMFS（内存文件系统）实现的，这种类型的Volume不会被持久化。</p>
<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>在Master上运行着以下关键进程：</p>
<ul>
<li>Kubernetes API Server（kube-apiserver）：提供了HTTP Rest接口的关键服务进程，是Kubernetes里所有资源的增、删、改、查等操作的唯一入口，也是集群控制的入口进程。</li>
<li>Kubernetes Controller Manager（kube-controller-manager）：Kubernetes里所有资源对象的自动化控制中心，可以将其理解为资源对象的“大总管”。</li>
<li>Kubernetes Scheduler（kube-scheduler）：负责资源调度（Pod调度）的进程，相当于公交公司的“调度室”。</li>
<li>ETCD：etcd服务通常部署在master节点上，Kubernetes里的所有资源对象的数据都被保存在etcd。</li>
</ul>
<p>在每个Node上都运行着以下关键进程：</p>
<ul>
<li>kubelet：负责Pod对应的容器的创建、启停等任务，同时与Master密切协作，实现集群管理的基本功能。-</li>
<li>kube-proxy：实现Kubernetes Service的通信与负载均衡机制的重要组件。</li>
<li>Docker Engine（docker）：Docker引擎，负责本机的容器创建和管理工作。</li>
</ul>
<h3 id="API-Server"><a href="#API-Server" class="headerlink" title="API Server"></a>API Server</h3><p>Kubernetes API Server的核心功能是提供Kubernetes各类资源对象（如Pod、RC、Service等）的增、删、改、查及Watch等HTTP Rest接口，成为集群内各个功能模块之间数据交互和通信的中心枢纽，是整个系统的数据总线和数据中心。</p>
<p>除此之外，它还有以下一些功能特性：<br>（1）是集群管理的API入口。<br>（2）是资源配额控制的入口。<br>（3）提供了完备的集群安全机制。</p>
<p>通过命令行工具kubectl来与Kubernetes API Server交互，它们之间的接口是RESTful API。</p>
<p><strong>API Server架构解析</strong></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201115221020820.png" alt="image-20201115221020820"></p>
<p>（1）API层：主要以REST方式提供各种API接口，除了有Kubernetes资源对象的CRUD和Watch等主要API，还有健康检查、UI、日志、性能指标等运维监控相关的API。Kubernetes从1.11版本开始废弃Heapster监控组件，转而使用Metrics Server提供Metrics API接口，进一步完善了自身的监控能力。<br>（2）访问控制层：当客户端访问API接口时，访问控制层负责对用户身份鉴权，验明用户身份，核准用户对Kubernetes资源对象的访问权限，然后根据配置的各种资源访问许可逻辑（Admission Control），判断是否允许访问。<br>（3）注册表层：Kubernetes把所有资源对象都保存在注册表（Registry）中，针对注册表中的各种资源对象都定义了：资源对象的类型、如何创建资源对象、如何转换资源的不同版本，以及如何将资源编码和解码为JSON或ProtoBuf格式进行存储。<br>（4）etcd数据库：用于持久化存储Kubernetes资源对象的KV数据库。etcd的watch API接口对于API Server来说至关重要，因为通过这个接口，API Server创新性地设计了List-Watch这种高性能的资源对象实时同步机制，使Kubernetes可以管理超大规模的集群，及时响应和快速处理集群中的各种事件。</p>
<h3 id="Controller-Manager"><a href="#Controller-Manager" class="headerlink" title="Controller Manager"></a>Controller Manager</h3><p>一般来说，智能系统和自动系统通常会通过一个“操作系统”来不断修正系统的工作状态。在Kubernetes集群中，每个Controller都是这样的一个“操作系统”，它们通过API Server提供的（List-Watch）接口实时监控集群中特定资源的状态变化，当发生各种故障导致某资源对象的状态发生变化时，Controller会尝试将其状态调整为期望的状态。比如当某个Node意外宕机时，Node Controller会及时发现此故障并执行自动化修复流程，确保集群始终处于预期的工作状态。Controller Manager是Kubernetes中各种操作系统的管理者，是集群内部的管理控制中心，也是Kubernetes自动化功能的核心。</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201115230301979.png" alt="image-20201115230301979"></p>
<h3 id="Scheduler"><a href="#Scheduler" class="headerlink" title="Scheduler"></a>Scheduler</h3><p>前面深入分析了Controller Manager及它所包含的各个组件的运行机制，本节将继续对Kubernetes中负责Pod调度的重要功能模块——Kubernetes Scheduler的工作原理和运行机制做深入分析。</p>
<p>Kubernetes Scheduler在整个系统中承担了“承上启下”的重要功能，“承上”是指它负责接收Controller Manager创建的新Pod，为其安排一个落脚的“家”——目标Node；“启下”是指安置工作完成后，目标Node上的kubelet服务进程接管后继工作，负责Pod生命周期中的“下半生”。</p>
<p>具体来说，Kubernetes Scheduler的作用是将待调度的Pod（API新创建的Pod、Controller Manager为补足副本而创建的Pod等）按照特定的调度算法和调度策略绑定（Binding）到集群中某个合适的Node上，并将绑定信息写入etcd中。在整个调度过程中涉及三个对象，分别是待调度Pod列表、可用Node列表，以及调度算法和策略。简单地说，就是通过调度算法调度为待调度Pod列表中的每个Pod从Node列表中选择一个最适合的Node。</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201115230446082.png" alt="image-20201115230446082" style="zoom:67%;"></p>
<p>随后，目标节点上的kubelet通过API Server监听到Kubernetes Scheduler产生的Pod绑定事件，然后获取对应的Pod清单，下载Image镜像并启动容器。</p>
<p>Kubernetes Scheduler当前提供的默认调度流程分为以下两步：<br>（1）预选调度过程，即遍历所有目标Node，筛选出符合要求的候选节点。为此，Kubernetes内置了多种预选策略（xxx Predicates）供用户选择。<br>（2）确定最优节点，在第1步的基础上，采用优选策略（xxx Priority）计算出每个候选节点的积分，积分最高者胜出。</p>
<h3 id="kubelet"><a href="#kubelet" class="headerlink" title="kubelet"></a>kubelet</h3><p>在Kubernetes集群中，在每个Node（又称Minion）上都会启动一个kubelet服务进程。该进程用于处理Master下发到本节点的任务，管理Pod及Pod中的容器。每个kubelet进程都会在API Server上注册节点自身的信息，定期向Master汇报节点资源的使用情况，并通过cAdvisor监控容器和节点资源。</p>
<h3 id="kube-proxy"><a href="#kube-proxy" class="headerlink" title="kube-proxy"></a>kube-proxy</h3><p>我们在前面已经了解到，为了支持集群的水平扩展、高可用性，Kubernetes抽象出了Service的概念。Service是对一组Pod的抽象，它会根据访问策略（如负载均衡策略）来访问这组Pod。</p>
<p>Kubernetes在创建服务时会为服务分配一个虚拟的IP地址，客户端通过访问这个虚拟的IP地址来访问服务，服务则负责将请求转发到后端的Pod上。这不就是一个反向代理吗？没错，这就是一个反向代理。但是，它和普通的反向代理有一些不同：首先，它的IP地址是虚拟的，想从外面访问还需要一些技巧；其次，它的部署和启停是由Kubernetes统一自动管理的。</p>
<p>在很多情况下，Service只是一个概念，而真正将Service的作用落实的是它背后的kube-proxy服务进程。只有理解了kube-proxy的原理和机制，我们才能真正理解Service背后的实现逻辑。</p>
<p>在Kubernetes集群的每个Node上都会运行一个kube-proxy服务进程，我们可以把这个进程看作Service的透明代理兼负载均衡器，其核心功能是将到某个Service的访问请求转发到后端的多个Pod实例上。此外，Service的Cluster IP与NodePort等概念是kube-proxy服务通过iptables的NAT转换实现的，kube-proxy在运行过程中动态创建与Service相关的iptables规则，这些规则实现了将访问服务（Cluster IP或NodePort）的请求负载分发到后端Pod的功能。由于iptables机制针对的是本地的kube-proxy端口，所以在每个Node上都要运行kube-proxy组件，这样一来，在Kubernetes集群内部，我们可以在任意Node上发起对Service的访问请求。综上所述，由于kube-proxy的作用，在Service的调用过程中客户端无须关心后端有几个Pod，中间过程的通信、负载均衡及故障恢复都是透明的。</p>
<p>起初，kube-proxy进程是一个真实的TCP/UDP代理，类似HA Proxy，负责从Service到Pod的访问流量的转发，这种模式被称为userspace（用户空间代理）模式。如图5.13所示，当某个Pod以Cluster IP方式访问某个Service的时候，这个流量会被Pod所在本机的iptables转发到本机的kube-proxy进程，然后由kube-proxy建立起到后端Pod的TCP/UDP连接，随后将请求转发到某个后端Pod上，并在这个过程中实现负载均衡功能。</p>
<p>图：Service的负载均衡转发规则</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201115230811684.png" alt="image-20201115230811684"></p>
<h1 id="案例-——-部署myweb至K8s"><a href="#案例-——-部署myweb至K8s" class="headerlink" title="案例 —— 部署myweb至K8s"></a>案例 —— 部署myweb至K8s</h1><h2 id="重制镜像"><a href="#重制镜像" class="headerlink" title="重制镜像"></a>重制镜像</h2><p>之前我们是使用docker运行myweb这个demo的，并且为了简单，将mysql的用户名、密码写死在settings.py里了。</p>
<p>现在改成如下，让name, user, password, host, port分别从环境变量DB_NAME, DB_USER, DB_PASSWORD, DB_HOST, DB_PORT 获取。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123; </span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: os.environ.get(<span class="string">'DB_NAME'</span>),</span><br><span class="line">        <span class="string">'USER'</span>: os.environ.get(<span class="string">'DB_USER'</span>)</span><br><span class="line">        <span class="string">'PASSWORD'</span>: os.environ.get(<span class="string">'DB_PASSWORD'</span>),</span><br><span class="line">        <span class="string">'HOST'</span>: os.environ.get(<span class="string">'DB_HOST'</span>),</span><br><span class="line">        <span class="string">'PORT'</span>: os.environ.get(<span class="string">'DB_PORT'</span>),</span><br><span class="line">        <span class="string">'OPTIONS'</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重新制作镜像 myweb:0.2，并上传至 harbor。</p>
<p>涉及到环境变量的传递，可以通过docker-compose验证一下新镜像是否正常。</p>
<p>docker-compose.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">[root@localhost</span> <span class="string">demo]#</span> <span class="string">cat</span> <span class="string">docker-compose.yml</span> </span><br><span class="line"><span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">myweb:0.2</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">DB_NAME:</span> <span class="string">"testpv"</span></span><br><span class="line">      <span class="attr">DB_USER:</span> <span class="string">"root"</span></span><br><span class="line">      <span class="attr">DB_PASSWORD:</span> <span class="string">"mysql"</span></span><br><span class="line">      <span class="attr">DB_HOST:</span> <span class="number">172.17</span><span class="number">.0</span><span class="number">.13</span></span><br><span class="line">      <span class="attr">DB_PORT:</span> <span class="number">3306</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="comment">#command: ['']</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/log:/var/log</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8009</span><span class="string">:8000</span></span><br></pre></td></tr></table></figure>
<p>测试没问题：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost demo]<span class="comment"># docker-compose up -d</span></span><br><span class="line">Creating demo_db_1 ... <span class="keyword">done</span></span><br><span class="line">[root@localhost demo]<span class="comment"># docker-compose ps</span></span><br><span class="line">  Name                 Command               State           Ports         </span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">demo_db_1   supervisord -n -c /etc/sup ...   Up      0.0.0.0:8009-&gt;8000/tcp</span><br><span class="line">[root@localhost demo]<span class="comment"># curl http://localhost:8009/visit/add/</span></span><br><span class="line"></span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> <span class="built_in">type</span>=<span class="string">"text/css"</span> href=<span class="string">"/static/visit/style.css"</span>/&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;table class=<span class="string">"gridtable"</span>&gt;</span><br><span class="line">        &lt;thead&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;ID&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;date&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;ip_addr&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;/thead&gt;</span><br><span class="line">        &lt;tbody&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;47&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;2020-11-08 11:55:56&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;172.17.0.1&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;/tbody&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>另外，也可以直接通过docker run启动，–env-file加载环境变量：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost demo]<span class="comment"># cat env</span></span><br><span class="line">DB_NAME=testpv</span><br><span class="line">DB_USER=root</span><br><span class="line">DB_PASSWORD=mysql</span><br><span class="line">DB_HOST=172.17.0.13</span><br><span class="line">DB_PORT=3306</span><br><span class="line">[root@localhost demo]<span class="comment"># docker run -d --name myweb -p 8009:8000 --env-file=env myweb:0.2</span></span><br></pre></td></tr></table></figure>
<h2 id="推送镜像至harbor"><a href="#推送镜像至harbor" class="headerlink" title="推送镜像至harbor"></a>推送镜像至harbor</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost demo]<span class="comment"># docker tag myweb:0.2 harbor.lzzeng.cn/devops/myweb:0.2</span></span><br><span class="line">[root@localhost demo]<span class="comment"># docker image ls myweb</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">myweb               0.2                 0245c29d6060        25 minutes ago      325MB</span><br><span class="line">[root@localhost demo]<span class="comment"># docker image ls |grep myweb</span></span><br><span class="line">myweb                            0.2                              0245c29d6060        25 minutes ago      325MB</span><br><span class="line">harbor.lzzeng.cn/devops/myweb    0.2                              0245c29d6060        25 minutes ago      325MB</span><br><span class="line">[root@localhost demo]<span class="comment"># </span></span><br><span class="line">[root@localhost demo]<span class="comment"># docker push harbor.lzzeng.cn/devops/myweb:0.2</span></span><br><span class="line">The push refers to repository [harbor.lzzeng.cn/devops/myweb]</span><br><span class="line">7615e9027750: Pushed </span><br><span class="line">8daa36f6b1b1: Pushed </span><br><span class="line">c4b9879e46c2: Pushed </span><br><span class="line">879c0d8666e3: Mounted from devops/alerts </span><br><span class="line">20a7b70bdf2f: Mounted from devops/alerts </span><br><span class="line">3fc750b41be7: Mounted from devops/alerts </span><br><span class="line">beee9f30bc1f: Mounted from devops/alerts </span><br><span class="line">0.2: digest: sha256:4a74959ea51a5834436ecda47f9e9d461d4ec43a68ff1976c555dc6ba2878842 size: 1788</span><br></pre></td></tr></table></figure>
<p>在Harbor上可以看到：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201108202423148.png" alt="image-20201108202423148"></p>
<h2 id="创建K8s资源对象"><a href="#创建K8s资源对象" class="headerlink" title="创建K8s资源对象"></a>创建K8s资源对象</h2><p>假设我们仍使用已经独立部署好的mysql，现在只需要写myweb的k8s部署文件。</p>
<h3 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h3><p>先来创建一个namespace</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@m01 myweb]<span class="comment"># kubectl create ns myweb</span></span><br><span class="line">namespace/myweb created</span><br></pre></td></tr></table></figure>
<h3 id="configmap"><a href="#configmap" class="headerlink" title="configmap"></a>configmap</h3><p>由于用到了supervisor，将其配置文件创建为一个configmap</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@m01 myweb]<span class="comment"># ls</span></span><br><span class="line">myweb_supervisord.conf</span><br><span class="line">[root@m01 myweb]<span class="comment"># </span></span><br><span class="line">[root@m01 myweb]<span class="comment"># #创建configmap</span></span><br><span class="line">[root@m01 myweb]<span class="comment"># </span></span><br><span class="line">[root@m01 myweb]<span class="comment"># kubectl create -n myweb configmap myweb-supervisord-conf --from-file=myweb_supervisord.conf</span></span><br><span class="line">configmap/myweb-supervisord-conf created</span><br><span class="line">[root@m01 myweb]<span class="comment"># </span></span><br><span class="line">[root@m01 myweb]<span class="comment"># kubectl get cm -n myweb</span></span><br><span class="line">NAME                     DATA   AGE</span><br><span class="line">myweb-supervisord-conf   1      7s</span><br><span class="line">[root@m01 myweb]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>通过–from-file参数创建的myweb-supervisord-conf内容如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Please edit the object below. Lines beginning with a '#' will be ignored,</span></span><br><span class="line"><span class="comment"># and an empty file will abort the edit. If an error occurs while saving this file will be</span></span><br><span class="line"><span class="comment"># reopened with the relevant failures.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  myweb_supervisord.conf: |</span><br><span class="line">    [program:myweb]</span><br><span class="line">    <span class="built_in">command</span>=/usr/<span class="built_in">local</span>/bin/python manage.py runserver 0.0.0.0:8000</span><br><span class="line">    directory=/opt/apps/myweb</span><br><span class="line">    user=root</span><br><span class="line">    startsecs=3</span><br><span class="line">    redirect_stderr=<span class="literal">true</span></span><br><span class="line">    stdout_logfile_maxbytes=20MB</span><br><span class="line">    stdout_logfile_backups=3</span><br><span class="line">    stdout_logfile=/var/<span class="built_in">log</span>/myweb_supervisor.log</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: <span class="string">"2020-11-08T10:11:46Z"</span></span><br><span class="line">  name: myweb-supervisord-conf</span><br><span class="line">  namespace: myweb</span><br><span class="line">  resourceVersion: <span class="string">"1135081"</span></span><br><span class="line">  selfLink: /api/v1/namespaces/myweb/configmaps/myweb-supervisord-conf</span><br><span class="line">  uid: 42cd4d5c-48c4-4845-b1a9-102eb78f591a</span><br></pre></td></tr></table></figure>
<p>也可以直接写一个yaml文件：</p>
<p>myweb-supervisord-conf.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">myweb_supervisord.conf:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">[program:myweb]</span></span><br><span class="line">    <span class="string">command=/usr/local/bin/python</span> <span class="string">manage.py</span> <span class="string">runserver</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:8000</span></span><br><span class="line">    <span class="string">directory=/opt/apps/myweb</span></span><br><span class="line">    <span class="string">user=root</span></span><br><span class="line">    <span class="string">startsecs=3</span></span><br><span class="line">    <span class="string">redirect_stderr=true</span></span><br><span class="line">    <span class="string">stdout_logfile_maxbytes=20MB</span></span><br><span class="line">    <span class="string">stdout_logfile_backups=3</span></span><br><span class="line">    <span class="string">stdout_logfile=/var/log/myweb_supervisor.log</span></span><br></pre></td></tr></table></figure>
<p>然后</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl create -n myweb configmap myweb-supervisord-conf -f myweb-supervisord-conf.yml</span><br></pre></td></tr></table></figure>
<h3 id="secret-1"><a href="#secret-1" class="headerlink" title="secret"></a>secret</h3><p>假设mysql连接参数如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">user=root</span><br><span class="line">password=mysql</span><br><span class="line">host=192.168.100.200</span><br><span class="line">port=3306</span><br><span class="line">name=testpv</span><br></pre></td></tr></table></figure>
<p>可以通过命令行带参数的方式创建一个secret</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@m01 myweb]<span class="comment"># kubectl create -n myweb secret generic db-secret --from-literal=name=testpv --from-literal=user=root --from-literal=host=192.168.100.200 --from-literal=port=3306 --from-literal=password=mysql</span></span><br><span class="line">secret/db-secret created</span><br></pre></td></tr></table></figure>
<p>也可以先编写一个secret文件（data字段采用base64编码），再创建secret</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">db-secret</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">myweb</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">MTkyLjE2OC4xMDAuMjAwCg==</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">dGVzdHB2</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">bXlzcWwK</span></span><br><span class="line">  <span class="attr">port:</span> <span class="string">MzMwNg==</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">cm9vdA==</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span></span><br></pre></td></tr></table></figure>
<p>从dashboard可以看到创建的保密字典db-secret内容：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201109005053678.png" alt="image-20201109005053678"></p>
<h3 id="deployment、service和ingress"><a href="#deployment、service和ingress" class="headerlink" title="deployment、service和ingress"></a>deployment、service和ingress</h3><p>myweb-dep.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myweb</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">myweb</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">myweb</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">k8s-app:</span> <span class="string">myweb</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">k8s-app:</span> <span class="string">myweb</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">myweb</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">harbor.lzzeng.cn/devops/myweb:0.2</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="number">1</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">1000Mi</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="number">0.5</span> </span><br><span class="line">            <span class="attr">memory:</span> <span class="string">500Mi</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">DB_NAME</span></span><br><span class="line">            <span class="attr">valueFrom:</span></span><br><span class="line">              <span class="attr">secretKeyRef:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">db-secret</span></span><br><span class="line">                <span class="attr">key:</span> <span class="string">name</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">DB_USER</span></span><br><span class="line">            <span class="attr">valueFrom:</span></span><br><span class="line">              <span class="attr">secretKeyRef:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">db-secret</span></span><br><span class="line">                <span class="attr">key:</span> <span class="string">user</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">DB_PASSWORD</span></span><br><span class="line">            <span class="attr">valueFrom:</span></span><br><span class="line">              <span class="attr">secretKeyRef:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">db-secret</span></span><br><span class="line">                <span class="attr">key:</span> <span class="string">password</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">DB_HOST</span></span><br><span class="line">            <span class="attr">valueFrom:</span></span><br><span class="line">              <span class="attr">secretKeyRef:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">db-secret</span></span><br><span class="line">                <span class="attr">key:</span> <span class="string">host</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">DB_PORT</span></span><br><span class="line">            <span class="attr">valueFrom:</span></span><br><span class="line">              <span class="attr">secretKeyRef:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">db-secret</span></span><br><span class="line">                <span class="attr">key:</span> <span class="string">port</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8000</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">ui</span></span><br><span class="line">          <span class="attr">protocol:</span> <span class="string">TCP</span></span><br></pre></td></tr></table></figure>
<p>myweb-svc.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myweb</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">myweb</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8000</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="string">ui</span></span><br><span class="line">    <span class="attr">nodePort:</span> <span class="number">30888</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">myweb</span></span><br></pre></td></tr></table></figure>
<p>myweb-ing.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myweb</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">myweb</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">myweb.lzzeng.cn</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">serviceName:</span> <span class="string">myweb</span></span><br><span class="line">          <span class="attr">servicePort:</span> <span class="number">8000</span></span><br></pre></td></tr></table></figure>
<h3 id="kubectl-create"><a href="#kubectl-create" class="headerlink" title="kubectl create"></a>kubectl create</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl create -n myweb -f myweb-def.yml</span><br><span class="line">kubectl create -n myweb -f myweb-svc.yml</span><br><span class="line">kubectl create -n myweb -f myweb-ing.yml</span><br></pre></td></tr></table></figure>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201108203029458.png" alt="image-20201108203029458"></p>
<p>是deployment文件中secret名称写错了，修改myweb-dep.yml，更新后正常：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl apply -n myweb -f myweb-def.yml</span><br></pre></td></tr></table></figure>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201108213925801.png" alt="image-20201108213925801"></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201108234036126.png" alt="image-20201108234036126"></p>
<h1 id="使用-helm-与-harbor"><a href="#使用-helm-与-harbor" class="headerlink" title="使用 helm 与 harbor"></a>使用 helm 与 harbor</h1><p>helm是K8s的chart管理工具, harbor是docker镜像、helm charts托管平台。</p>
<h2 id="使用helm"><a href="#使用helm" class="headerlink" title="使用helm"></a>使用helm</h2><p>helm安装prometheus</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201115001019175.png" alt="image-20201115001019175"></p>
<p>grafana效果图</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201115022804654.png" alt="image-20201115022804654"></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201115173012548.png" alt="image-20201115173012548"></p>
<p>编写helm chart，推送至harbor命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">helm create mychart</span><br><span class="line"><span class="comment"># 编写...</span></span><br><span class="line">helm push -u xxx -p xxxxxx  ./  &lt;上传至chart项目地址&gt;</span><br></pre></td></tr></table></figure>
<p>helm部署ELK</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">helm install elastic/elasticsearch -n elk-es --namespace elk</span><br></pre></td></tr></table></figure>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201108222828848.png" alt="image-20201108222828848"></p>
<h2 id="使用harbor"><a href="#使用harbor" class="headerlink" title="使用harbor"></a>使用harbor</h2><blockquote>
<p>官方github：<a href="https://github.com/goharbor/harbor" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/goharbor/harbor</a></p>
<p>官方文档：<a href="https://goharbor.io/docs/2.0.0/install-config/" rel="external nofollow noopener noreferrer" target="_blank">https://goharbor.io/docs/2.0.0/install-config/</a></p>
</blockquote>
<p>创建自签名证书（一年期）：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout ./tls.key -out ./tls.crt -subj <span class="string">"/CN=你的自定义harbor域名"</span></span><br></pre></td></tr></table></figure>
<p>harbor.yml配置示例：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201108223522500.png" alt="image-20201108223522500"></p>
<p>Harbor要启用helm charts管理功能，在安装时要添加<code>--with-chartmuseum</code>参数：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./install.sh --with-chartmuseum</span><br></pre></td></tr></table></figure>
<p>Harbor的charts管理界面：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201108164730437.png" alt="image-20201108164730437"></p>
<p>可以通过web界面上传打包好的chart，也可以使用helm push命令推送。</p>
<p>在使用时：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 添加repo</span></span><br><span class="line">helm repo add --ca-file &lt;ca file&gt; --cert-file &lt;cert file&gt; --key-file &lt;key file&gt;     --username &lt;username&gt; --password &lt;password&gt; &lt;repo name&gt; https://&lt;harbor地址&gt;/chartrepo/&lt;项目名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 获取chart包</span></span><br><span class="line"><span class="comment"># helm fetch &lt;项目名称&gt;/&lt;chart名称&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 直接使用chart安装部署至K8s</span></span><br><span class="line">helm install --name &lt;自定义部署名&gt; --namespace &lt;指定部署到哪个名称空间&gt; [其它选项] &lt;项目名称&gt;/&lt;chart名称&gt;</span><br></pre></td></tr></table></figure>
<p>Harbor的镜像仓库管理界面：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/docker-k8s.assets/image-20201108165325479.png" alt="image-20201108165325479"></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><p><a href="https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/" rel="external nofollow noopener noreferrer" target="_blank">https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/</a></p>
</li>
<li><p><a href="https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/" rel="external nofollow noopener noreferrer" target="_blank">https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/</a></p>
</li>
<li><p><a href="https://github.com/goharbor/harbor" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/goharbor/harbor</a></p>
</li>
<li><p><a href="https://doc.traefik.io/traefik/" rel="external nofollow noopener noreferrer" target="_blank">https://doc.traefik.io/traefik/</a></p>
</li>
<li><p><a href="https://rancher.com/docs/rancher/v2.x/en/" rel="external nofollow noopener noreferrer" target="_blank">https://rancher.com/docs/rancher/v2.x/en/</a></p>
</li>
<li><p><a href="https://github.com/kubernetes-sigs" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/kubernetes-sigs</a></p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/109458069" rel="external nofollow noopener noreferrer" target="_blank">https://zhuanlan.zhihu.com/p/109458069</a></p>
</li>
<li><p><a href="https://kubernetes.github.io/ingress-nginx/deploy/" rel="external nofollow noopener noreferrer" target="_blank">https://kubernetes.github.io/ingress-nginx/deploy/</a></p>
</li>
</ol>
<hr>
<p>End</p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>K8s</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker介绍</title>
    <url>/deployment/docker/docker/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<blockquote>
<p><a href="https://docs.docker.com/engine/docker-overview/" rel="external nofollow noopener noreferrer" target="_blank"><strong>Docker</strong></a> 使用客户端 - 服务器架构。Docker客户端与Docker守护进程通信，后者负责构建，运行和分发Docker容器。Docker客户端和守护程序可以在同一系统上运行，也可以将Docker客户端连接到远程Docker守护程序。Docker客户端和守护程序使用REST API，通过UNIX套接字或网络接口进行通信。</p>
</blockquote>
<a id="more"></a>
<p><img src="https://docs.docker.com/engine/images/architecture.svg" alt="Docker Architecture Diagram"></p>
<p><strong>Docker vs VM</strong></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/docker.assets/1561264718294.png" alt="1561264718294"></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/docker.assets/1561264737939.png" alt="1561264737939"></p>
<p><a href="https://docs.docker.com/install/linux/docker-ce/centos/" rel="external nofollow noopener noreferrer" target="_blank">docker-ce for centos</a></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx + Consul-template</title>
    <url>/deployment/docker/nginx-consul/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<blockquote>
<p>通过registrator自动发现容器内的服务，注册到consul，通过consul -template动态修改nginx配置文件实现动态负载。</p>
</blockquote>
<a id="more"></a>
<p><code>docker-compose.yml</code>:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">consul:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">consul</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">SERVICE_8500_NAME:</span> <span class="string">"consul-ui"</span></span><br><span class="line">      <span class="attr">SERVICE_8500_TAGS:</span> <span class="string">"consul,http,ui"</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8500</span><span class="string">:8500</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/consul/data:/consul/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./conf.d:/consul/config</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">"agent -server -bootstrap-expect 1 -ui -disable-host-node-id -client 0.0.0.0 -bind 172.17.0.13"</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">registrator:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">gliderlabs/registrator</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">consul</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/tmp/docker.sock</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">CONSUL_HTTP_TOKEN:</span> <span class="string">$&#123;CONSUL_HTTP_TOKEN&#125;</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">-internal</span> <span class="string">consul://127.0.0.1:8500</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">nginx-consul:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx-consul:alpine</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">consul</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">registrator</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">80</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./files/nginx.conf.ctmpl:/etc/nginx/nginx.conf.ctmpl</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">HOST_TYPE:</span> <span class="string">$&#123;HOST_TYPE&#125;</span></span><br><span class="line">      <span class="attr">CONSUL_HTTP_TOKEN:</span> <span class="string">$&#123;CONSUL_HTTP_TOKEN&#125;</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">-consul-addr=127.0.0.1:8500</span> <span class="string">-wait=5s</span> <span class="string">-template</span> <span class="string">/etc/nginx/nginx.conf.ctmpl:/etc/nginx/conf.d/app.conf:/etc/nginx/nginx.sh</span></span><br></pre></td></tr></table></figure>
<p><code>Dockerfile</code>:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">FROM</span> <span class="string">nginx:alpine</span></span><br><span class="line"></span><br><span class="line"><span class="string">RUN</span> <span class="string">apk</span> <span class="string">update</span> <span class="string">&amp;&amp;</span> <span class="string">\</span></span><br><span class="line">    <span class="string">apk</span> <span class="string">add</span> <span class="string">--no-cache</span> <span class="string">unzip</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ENV CONSUL_TEMPLATE_VERSION 0.20.0</span></span><br><span class="line"><span class="string">ENV</span> <span class="string">PACKAGE</span> <span class="string">consul-template_0.20.0_linux_amd64.zip</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ADD https://releases.hashicorp.com/consul-template/$&#123;CONSUL_TEMPLATE_VERSION&#125;/consul-template_$&#123;CONSUL_TEMPLATE_VERSION&#125;_linux_amd64.zip /tmp/consul-template.zip</span></span><br><span class="line"><span class="string">ADD</span> <span class="string">files/nginx.conf</span> <span class="string">files/nginx.conf.ctmpl</span> <span class="string">files/nginx.sh</span> <span class="string">files/$&#123;PACKAGE&#125;</span> <span class="string">/etc/nginx/</span></span><br><span class="line"></span><br><span class="line"><span class="string">RUN</span> <span class="string">unzip</span> <span class="string">/etc/nginx/$&#123;PACKAGE&#125;</span> <span class="string">-d</span> <span class="string">/usr/bin</span> <span class="string">&amp;&amp;</span> <span class="string">\</span></span><br><span class="line">    <span class="string">chmod</span> <span class="string">+x</span> <span class="string">/usr/bin/consul-template</span> <span class="string">&amp;&amp;</span> <span class="string">\</span></span><br><span class="line">    <span class="string">rm</span> <span class="string">-f</span> <span class="string">/etc/nginx/$&#123;PACKAGE&#125;</span> <span class="string">&amp;&amp;</span> <span class="string">\</span></span><br><span class="line">    <span class="string">chmod</span> <span class="string">+x</span> <span class="string">/etc/nginx/nginx.sh</span> <span class="string">&amp;&amp;</span> <span class="string">\</span></span><br><span class="line">    <span class="string">apk</span> <span class="string">del</span> <span class="string">unzip</span></span><br><span class="line"></span><br><span class="line"><span class="string">WORKDIR</span> <span class="string">/etc/nginx</span></span><br><span class="line"><span class="string">ENTRYPOINT</span> <span class="string">["/usr/bin/consul-template"]</span></span><br></pre></td></tr></table></figure>
<p><code>conf.d/acl.json</code>:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM_0_13_centos nginx-consul]<span class="comment"># cat conf.d/acl.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"acl_datacenter"</span>: <span class="string">"dc1"</span>,</span><br><span class="line">    <span class="string">"acl_master_token"</span>: <span class="string">"xxxxxxxxxxxxxxxxxxxxxxxxxxxx"</span>,</span><br><span class="line">    <span class="string">"acl_agent_token"</span>: <span class="string">"xxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxxxx"</span>,</span><br><span class="line">    <span class="string">"acl_default_policy"</span>: <span class="string">"deny"</span>,</span><br><span class="line">    <span class="string">"acl_down_policy"</span>: <span class="string">"extend-cache"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Consul</tag>
      </tags>
  </entry>
  <entry>
    <title>PMM数据库性能监控</title>
    <url>/deployment/docker/pmm/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<blockquote>
<p>Percona Monitoring and Management (PMM)是一款开源的MySQL、MongoDB性能监控工具，PMM客户端负责收集DB监控数据，PMM服务端从已连接的客户端拉取数据，并通过第三方软件Grafana展示图表。</p>
</blockquote>
<a id="more"></a>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">pmm-data:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">percona/pmm-server:1.1.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">pmm-data</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/prometheus/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/consul-data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/lib/mysql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/lib/grafana</span></span><br><span class="line">    <span class="attr">entrypoint:</span> <span class="string">/bin/true</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">pmm-server:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">percona/pmm-server:1.1.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">pmm-server</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8088</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SERVICE_80_NAME=pmm</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SERVICE_80_TAGS=pmm,http</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SERVER_USER=admin</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SERVER_PASSWORD=$&#123;PMM_SERVER_PASSWORD&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">METRICS_RETENTION=720h</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">METRICS_MEMORY=4194304</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">METRICS_RESOLUTION=5s</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">QUERIES_RETENTION=30</span></span><br><span class="line">    <span class="attr">volumes_from:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">pmm-data</span></span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">tag0=<span class="variable">$1</span></span><br><span class="line">tag=<span class="variable">$&#123;tag0:=1.1.1&#125;</span></span><br><span class="line"></span><br><span class="line">docker stop pmm-server</span><br><span class="line">docker rm pmm-server pmm-data</span><br><span class="line"></span><br><span class="line">docker create \</span><br><span class="line">   -v /opt/prometheus/data \</span><br><span class="line">   -v /opt/consul-data \</span><br><span class="line">   -v /var/lib/mysql \</span><br><span class="line">   -v /var/lib/grafana \</span><br><span class="line">   --name pmm-data \</span><br><span class="line">   percona/pmm-server:<span class="variable">$tag</span> /bin/<span class="literal">true</span></span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">docker run -d \</span><br><span class="line">   -p 8088:80 \</span><br><span class="line">   --volumes-from pmm-data \</span><br><span class="line">   --name pmm-server \</span><br><span class="line">   -e SERVER_USER=admin \</span><br><span class="line">   -e SERVICE_80_NAME=pmm \</span><br><span class="line">   -e SERVICE_80_TAGS=pmm,http,ui \</span><br><span class="line">   -e SERVER_PASSWORD=<span class="variable">$&#123;PMM_SERVER_PASSWORD&#125;</span> \</span><br><span class="line">   --restart always \</span><br><span class="line">   percona/pmm-server:<span class="variable">$tag</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis in Docker</title>
    <url>/deployment/docker/redis-in-docker/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h3 id="连接redis"><a href="#连接redis" class="headerlink" title="连接redis"></a>连接redis</h3><ul>
<li>docker redis-cli连接redis</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost redis]<span class="comment"># docker inspect redis_redis_1 |grep net</span></span><br><span class="line">            <span class="string">"NetworkMode"</span>: <span class="string">"redis_localnet"</span>,</span><br><span class="line">            <span class="string">"SandboxKey"</span>: <span class="string">"/var/run/docker/netns/a498b7651db0"</span>,</span><br><span class="line">                <span class="string">"redis_localnet"</span>: &#123;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost redis]<span class="comment"># docker run -it --network redis_localnet --rm redis redis-cli -h redis</span></span><br><span class="line">redis:6379&gt; get k</span><br><span class="line">(nil)</span><br><span class="line">redis:6379&gt; <span class="built_in">exit</span></span><br><span class="line">[root@localhost redis]<span class="comment"># docker run -it --rm redis redis-cli -h 192.168.80.2</span></span><br><span class="line">192.168.80.2:6379&gt; <span class="built_in">set</span> k abc</span><br><span class="line">OK</span><br><span class="line">192.168.80.2:6379&gt; get k</span><br><span class="line"><span class="string">"abc"</span></span><br><span class="line">192.168.80.2:6379&gt; <span class="built_in">exit</span></span><br><span class="line">[root@localhost redis]<span class="comment"># docker run -it --network redis_localnet --rm redis redis-cli -h redis</span></span><br><span class="line">redis:6379&gt; get k</span><br><span class="line"><span class="string">"abc"</span></span><br><span class="line">redis:6379&gt; del k</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">redis:6379&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>从其它redis节点访问</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker run -it --rm redis redis-cli -h 10.1.7.211</span></span><br><span class="line">Unable to find image <span class="string">'redis:latest'</span> locally</span><br><span class="line">latest: Pulling from library/redis</span><br><span class="line">27833a3ba0a5: Already exists </span><br><span class="line">cde8019a4b43: Pull complete </span><br><span class="line">97a473b37fb2: Pull complete </span><br><span class="line">c6fe0dfbb7e3: Pull complete </span><br><span class="line">39c8f5ba1240: Pull complete </span><br><span class="line">cfbdd870cf75: Pull complete </span><br><span class="line">Digest: sha256:000339fb57e0ddf2d48d72f3341e47a8ca3b1beae9bdcb25a96323095b72a79b</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> redis:latest</span><br><span class="line">10.1.7.211:6379&gt; get k</span><br><span class="line">(nil)</span><br><span class="line">10.1.7.211:6379&gt; <span class="built_in">set</span> k abcdefg</span><br><span class="line">OK</span><br><span class="line">10.1.7.211:6379&gt; <span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
<h3 id="Redis集群"><a href="#Redis集群" class="headerlink" title="Redis集群"></a>Redis集群</h3><ul>
<li>创建</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">para=<span class="string">""</span></span><br><span class="line">port=8000 <span class="comment"># 6个节点8001——8006</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq 1 6`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="comment"># host? 192.168.*</span></span><br><span class="line"><span class="comment">#  ipaddr=$(docker inspect new_redis_redis$&#123;i&#125;_1 |jq '.[0].NetworkSettings.Networks.new_redis_default.IPAddress' |sed 's/\"//g')</span></span><br><span class="line"><span class="comment"># bridge? 172.*</span></span><br><span class="line">  ipaddr=$(docker inspect new_redis_redis<span class="variable">$&#123;i&#125;</span>_1 |jq <span class="string">'.[0].NetworkSettings.Networks.bridge.IPAddress'</span> |sed <span class="string">'s/\"//g'</span>)</span><br><span class="line">  <span class="built_in">let</span> port=port+1</span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$ipaddr</span>:<span class="variable">$port</span></span><br><span class="line">  para=<span class="string">"<span class="variable">$para</span> <span class="variable">$ipaddr</span>:<span class="variable">$port</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$para</span> <span class="comment"># 172.17.0.12:8001 172.17.0.8:8002 172.17.0.13:8003 172.17.0.9:8004 172.17.0.10:8005 172.17.0.11:8006</span></span><br><span class="line">docker run --rm -it inem0o/redis-trib create --replicas 1 <span class="variable">$para</span></span><br></pre></td></tr></table></figure>
<ul>
<li>查看</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost new_redis]<span class="comment"># docker run --rm -it inem0o/redis-trib info 172.17.0.11:8006</span></span><br><span class="line">172.17.0.8:8002@18002 (f015467b...) -&gt; 178239 keys | 5462 slots | 1 slaves.</span><br><span class="line">172.17.0.12:8001@18001 (17687354...) -&gt; 178166 keys | 5461 slots | 1 slaves.</span><br><span class="line">172.17.0.13:8003@18003 (2097e0e6...) -&gt; 178106 keys | 5461 slots | 1 slaves.</span><br><span class="line">[OK] 534511 keys <span class="keyword">in</span> 3 masters.</span><br><span class="line">32.62 keys per slot on average.</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost new_redis]<span class="comment"># docker run --rm -it redis redis-cli -h 172.17.0.12 -p 8001</span></span><br><span class="line">172.17.0.12:8001&gt; cluster nodes</span><br><span class="line">6104ad4f30a511d642aebb1bce8dd77bb5d10621 172.17.0.11:8006@18006 slave 2097e0e6a66c6adb6ddbe3bc783663d390a9360d 0 1557199119530 6 connected</span><br><span class="line">f9a309feda3b442dbf555712c7ff47026dc4700b 172.17.0.9:8004@18004 slave 1768735459c96a46722b1f0f038c125fa88aef83 0 1557199119000 4 connected</span><br><span class="line">f015467b0439b9694a6d633cc62a2502079e74f7 172.17.0.8:8002@18002 master - 0 1557199120532 2 connected 5461-10922</span><br><span class="line">1768735459c96a46722b1f0f038c125fa88aef83 172.17.0.12:8001@18001 myself,master - 0 1557199118000 1 connected 0-5460</span><br><span class="line">2097e0e6a66c6adb6ddbe3bc783663d390a9360d 172.17.0.13:8003@18003 master - 0 1557199120030 3 connected 10923-16383</span><br><span class="line">8126fa4d990c4e08cdb7d3e2ebf59771445b3a1a 172.17.0.10:8005@18005 slave f015467b0439b9694a6d633cc62a2502079e74f7 0 1557199119530 5 connected</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="Redis单节点单实例"><a href="#Redis单节点单实例" class="headerlink" title="Redis单节点单实例"></a>Redis单节点单实例</h3><p>docker-compose.yml:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">"6379:6379"</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">./data:/data</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">./conf/redis.conf:/etc/redis.conf</span></span><br><span class="line">        <span class="attr">networks:</span></span><br><span class="line">            <span class="attr">localnet:</span></span><br><span class="line">                <span class="attr">aliases:</span></span><br><span class="line">                    <span class="bullet">-</span> <span class="string">my-redis-server</span></span><br><span class="line">        <span class="attr">command:</span> <span class="string">["redis-server",</span> <span class="string">"/etc/redis.conf"</span><span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">    <span class="attr">localnet:</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="单节点redis集群"><a href="#单节点redis集群" class="headerlink" title="单节点redis集群"></a>单节点redis集群</h3><p>docker-compose.yml:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"> <span class="attr">redis1:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">redis-cluster</span></span><br><span class="line">  <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">/data/redis/6381/data:/data</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">REDIS_PORT=6381</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'6381:6381'</span>       <span class="comment">#服务端口</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'16381:16381'</span>   <span class="comment">#集群端口</span></span><br><span class="line"></span><br><span class="line"> <span class="attr">redis2:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">redis-cluster</span></span><br><span class="line">  <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">/data/redis/6382/data:/data</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">REDIS_PORT=6382</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'6382:6382'</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'16382:16382'</span></span><br><span class="line"></span><br><span class="line"> <span class="attr">redis3:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">redis-cluster</span></span><br><span class="line">  <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">/data/redis/6383/data:/data</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">REDIS_PORT=6383</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'6383:6383'</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'16383:16383'</span></span><br><span class="line"></span><br><span class="line"> <span class="attr">redis4:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">redis-cluster</span></span><br><span class="line">  <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">/data/redis/6384/data:/data</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">REDIS_PORT=6384</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'6384:6384'</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'16384:16384'</span></span><br><span class="line"></span><br><span class="line"> <span class="attr">redis5:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">redis-cluster</span></span><br><span class="line">  <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">/data/redis/6385/data:/data</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">REDIS_PORT=6385</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'6385:6385'</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'16385:16385'</span></span><br><span class="line"></span><br><span class="line"> <span class="attr">redis6:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">redis-cluster</span></span><br><span class="line">  <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">/data/redis/6386/data:/data</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">REDIS_PORT=6386</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'6386:6386'</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'16386:16386'</span></span><br></pre></td></tr></table></figure>
<p>redis.conf:</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment">#端口</span></span><br><span class="line">port REDIS_PORT</span><br><span class="line"><span class="comment">#开启集群</span></span><br><span class="line">cluster-enabled yes</span><br><span class="line"><span class="comment">#配置文件</span></span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line"><span class="comment">#更新操作后进行日志记录</span></span><br><span class="line">appendonly yes</span><br><span class="line"><span class="comment">#设置主服务的连接密码</span></span><br><span class="line"><span class="comment"># masterauth</span></span><br><span class="line"><span class="comment">#设置从服务的连接密码</span></span><br><span class="line"><span class="comment"># requirepass</span></span><br></pre></td></tr></table></figure>
<p>entrypoint.sh:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#只作用于当前进程,不作用于其创建的子进程</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"><span class="comment">#$0--Shell本身的文件名 $1--第一个参数 $@--所有参数列表</span></span><br><span class="line"><span class="comment"># allow the container to be started with `--user`</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$1</span>"</span> = <span class="string">'redis-server'</span> -a <span class="string">"<span class="variable">$(id -u)</span>"</span> = <span class="string">'0'</span> ]; <span class="keyword">then</span></span><br><span class="line">    sed -i <span class="string">'s/REDIS_PORT/'</span><span class="variable">$REDIS_PORT</span><span class="string">'/g'</span> /usr/<span class="built_in">local</span>/etc/redis.conf</span><br><span class="line">    chown -R redis .  <span class="comment">#改变当前文件所有者</span></span><br><span class="line">    <span class="built_in">exec</span> gosu redis <span class="string">"<span class="variable">$0</span>"</span> <span class="string">"<span class="variable">$@</span>"</span>  <span class="comment">#gosu是sudo轻量级”替代品”</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> <span class="string">"<span class="variable">$@</span>"</span></span><br></pre></td></tr></table></figure>
<p>Dockerfile:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">FROM</span> <span class="string">redis</span></span><br><span class="line"></span><br><span class="line"><span class="string">RUN</span> <span class="string">ln</span> <span class="string">-sf</span> <span class="string">/usr/share/zoneinfo/Asia/Shanghai</span> <span class="string">/etc/localtime</span></span><br><span class="line"><span class="string">RUN</span> <span class="string">echo</span> <span class="string">'Asia/Shanghai'</span> <span class="string">&gt;/etc/timezone</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ENV REDIS_PORT 8000</span></span><br><span class="line"><span class="comment"># ENV REDIS_PORT_NODE 18000</span></span><br><span class="line"><span class="string">EXPOSE</span> <span class="string">$REDIS_PORT</span></span><br><span class="line"><span class="comment"># EXPOSE $REDIS_PORT_NODE</span></span><br><span class="line"></span><br><span class="line"><span class="string">COPY</span> <span class="string">entrypoint.sh</span> <span class="string">/usr/local/bin/</span></span><br><span class="line"><span class="string">COPY</span> <span class="string">redis.conf</span> <span class="string">/usr/local/etc/</span></span><br><span class="line"><span class="string">RUN</span> <span class="string">chmod</span> <span class="number">777</span> <span class="string">/usr/local/etc/redis.conf</span></span><br><span class="line"><span class="string">RUN</span> <span class="string">chmod</span> <span class="string">+x</span> <span class="string">/usr/local/bin/entrypoint.sh</span></span><br><span class="line"></span><br><span class="line"><span class="string">ENTRYPOINT</span> <span class="string">["/usr/local/bin/entrypoint.sh"]</span></span><br><span class="line"><span class="string">CMD</span> <span class="string">["redis-server",</span> <span class="string">"/usr/local/etc/redis.conf"</span><span class="string">]</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>GitLab版本升级</title>
    <url>/deployment/else/gitlab-update/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>GitLab版本升级到11.9.1</p>
</blockquote>
<ul>
<li>先备份gitlab</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gitlab-rake gitlab:backup:create</span><br></pre></td></tr></table></figure>
<p>生成的备份文件在：/var/opt/gitlab/backups/下，格式如：1537856454_gitlab_backup.tar</p>
<a id="more"></a>
<ul>
<li>如果要恢复时间戳为1537856454的备份</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gitlab-rake gitlab:backup:restore BACKUP=1537856454</span><br></pre></td></tr></table></figure>
<ul>
<li>升级到11.9.1（当前11.0.4）</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-11.9.1-ce.0.el7.x86_64.rpm</span><br><span class="line">rpm -Uvh gitlab-ce-11.9.1-ce.0.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>Gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>yum安装MySQL-5.7</title>
    <url>/deployment/else/ins_mysql/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>系统：CentOS 7.6</p>
</blockquote>
<a id="more"></a>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先从官网下载rpm包</span></span><br><span class="line">wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-community-server-5.7.26-1.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装yum依赖源</span></span><br><span class="line"><span class="comment"># rpm -Uvh https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm</span></span><br><span class="line">wget https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm</span><br><span class="line">rpm -Uvh mysql80-community-release-el7-3.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改yum源</span></span><br><span class="line">sed -i <span class="string">'s/enabled=1/enabled=0/g'</span> /etc/yum.repos.d/mysql-community.repo</span><br><span class="line">sed -i <span class="string">'/\[mysql57-community\]/,+3s/enabled=.*/enabled=1/'</span> /etc/yum.repos.d/mysql-community.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前rpm包所在路径，安装</span></span><br><span class="line">yum install mysql-community-server-5.7.26-1.el7.x86_64.rpm -y</span><br></pre></td></tr></table></figure>
<p>完整日志：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">+ wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-community-server-5.7.26-1.el7.x86_64.rpm</span><br><span class="line">--2019-08-13 16:48:01--  https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-community-server-5.7.26-1.el7.x86_64.rpm</span><br><span class="line">Resolving dev.mysql.com (dev.mysql.com)... 137.254.60.11</span><br><span class="line">Connecting to dev.mysql.com (dev.mysql.com)|137.254.60.11|:443... connected.</span><br><span class="line">HTTP request sent, awaiting response... 302 Found</span><br><span class="line">Location: https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-community-server-5.7.26-1.el7.x86_64.rpm [following]</span><br><span class="line">--2019-08-13 16:48:06--  https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-community-server-5.7.26-1.el7.x86_64.rpm</span><br><span class="line">Resolving cdn.mysql.com (cdn.mysql.com)... 23.44.160.128</span><br><span class="line">Connecting to cdn.mysql.com (cdn.mysql.com)|23.44.160.128|:443... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 173541272 (166M) [application/x-redhat-package-manager]</span><br><span class="line">Saving to: ‘mysql-community-server-5.7.26-1.el7.x86_64.rpm’</span><br><span class="line"></span><br><span class="line">100%[===========================================================================================&gt;] 173,541,272 1.71MB/s   <span class="keyword">in</span> 1m 44s </span><br><span class="line"></span><br><span class="line">2019-08-13 16:49:51 (1.59 MB/s) - ‘mysql-community-server-5.7.26-1.el7.x86_64.rpm’ saved [173541272/173541272]</span><br><span class="line"></span><br><span class="line">+ wget https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm</span><br><span class="line">--2019-08-13 16:49:51--  https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm</span><br><span class="line">Resolving dev.mysql.com (dev.mysql.com)... 137.254.60.11</span><br><span class="line">Connecting to dev.mysql.com (dev.mysql.com)|137.254.60.11|:443... connected.</span><br><span class="line">HTTP request sent, awaiting response... 302 Found</span><br><span class="line">Location: https://repo.mysql.com//mysql80-community-release-el7-3.noarch.rpm [following]</span><br><span class="line">--2019-08-13 16:49:53--  https://repo.mysql.com//mysql80-community-release-el7-3.noarch.rpm</span><br><span class="line">Resolving repo.mysql.com (repo.mysql.com)... 104.89.31.15</span><br><span class="line">Connecting to repo.mysql.com (repo.mysql.com)|104.89.31.15|:443... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 26024 (25K) [application/x-redhat-package-manager]</span><br><span class="line">Saving to: ‘mysql80-community-release-el7-3.noarch.rpm’</span><br><span class="line"></span><br><span class="line">100%[===========================================================================================&gt;] 26,024      49.0KB/s   <span class="keyword">in</span> 0.5s   </span><br><span class="line"></span><br><span class="line">2019-08-13 16:49:55 (49.0 KB/s) - ‘mysql80-community-release-el7-3.noarch.rpm’ saved [26024/26024]</span><br><span class="line"></span><br><span class="line">+ rpm -Uvh mysql80-community-release-el7-3.noarch.rpm</span><br><span class="line">warning: mysql80-community-release-el7-3.noarch.rpm: Header V3 DSA/SHA1 Signature, key ID 5072e1f5: NOKEY</span><br><span class="line">Preparing...                          <span class="comment">################################# [100%]</span></span><br><span class="line">Updating / installing...</span><br><span class="line">   1:mysql80-community-release-el7-3  <span class="comment">################################# [100%]</span></span><br><span class="line">+ sed -i s/enabled=1/enabled=0/g /etc/yum.repos.d/mysql-community.repo</span><br><span class="line">+ sed -i <span class="string">'/\[mysql57-community\]/,+3s/enabled=.*/enabled=1/'</span> /etc/yum.repos.d/mysql-community.repo</span><br><span class="line">+ yum install mysql-community-server-5.7.26-1.el7.x86_64.rpm -y</span><br><span class="line">Loaded plugins: fastestmirror, langpacks</span><br><span class="line">Examining mysql-community-server-5.7.26-1.el7.x86_64.rpm: mysql-community-server-5.7.26-1.el7.x86_64</span><br><span class="line">Marking mysql-community-server-5.7.26-1.el7.x86_64.rpm to be installed</span><br><span class="line">Resolving Dependencies</span><br><span class="line">--&gt; Running transaction check</span><br><span class="line">---&gt; Package mysql-community-server.x86_64 0:5.7.26-1.el7 will be installed</span><br><span class="line">--&gt; Processing Dependency: mysql-community-common(x86-64) = 5.7.26-1.el7 <span class="keyword">for</span> package: mysql-community-server-5.7.26-1.el7.x86_64</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">mysql57-community                                                                                             | 2.5 kB  00:00:00     </span><br><span class="line">mysql57-community/x86_64/primary_db                                                                           | 184 kB  00:00:02     </span><br><span class="line">--&gt; Processing Dependency: mysql-community-client(x86-64) &gt;= 5.7.9 <span class="keyword">for</span> package: mysql-community-server-5.7.26-1.el7.x86_64</span><br><span class="line">--&gt; Processing Dependency: libnuma.so.1(libnuma_1.1)(64bit) <span class="keyword">for</span> package: mysql-community-server-5.7.26-1.el7.x86_64</span><br><span class="line">--&gt; Processing Dependency: libnuma.so.1(libnuma_1.2)(64bit) <span class="keyword">for</span> package: mysql-community-server-5.7.26-1.el7.x86_64</span><br><span class="line">--&gt; Processing Dependency: libnuma.so.1()(64bit) <span class="keyword">for</span> package: mysql-community-server-5.7.26-1.el7.x86_64</span><br><span class="line">--&gt; Running transaction check</span><br><span class="line">---&gt; Package mysql-community-client.x86_64 0:5.7.27-1.el7 will be installed</span><br><span class="line">--&gt; Processing Dependency: mysql-community-libs(x86-64) &gt;= 5.7.9 <span class="keyword">for</span> package: mysql-community-client-5.7.27-1.el7.x86_64</span><br><span class="line">---&gt; Package mysql-community-common.x86_64 0:5.7.26-1.el7 will be installed</span><br><span class="line">---&gt; Package numactl-libs.x86_64 0:2.0.9-7.el7 will be installed</span><br><span class="line">--&gt; Running transaction check</span><br><span class="line">---&gt; Package mariadb-libs.x86_64 1:5.5.60-1.el7_5 will be obsoleted</span><br><span class="line">--&gt; Processing Dependency: libmysqlclient.so.18()(64bit) <span class="keyword">for</span> package: 2:postfix-2.10.1-7.el7.x86_64</span><br><span class="line">--&gt; Processing Dependency: libmysqlclient.so.18(libmysqlclient_18)(64bit) <span class="keyword">for</span> package: 2:postfix-2.10.1-7.el7.x86_64</span><br><span class="line">---&gt; Package mysql-community-libs.x86_64 0:5.7.27-1.el7 will be obsoleting</span><br><span class="line">--&gt; Running transaction check</span><br><span class="line">---&gt; Package mysql-community-libs-compat.x86_64 0:5.7.27-1.el7 will be obsoleting</span><br><span class="line">--&gt; Finished Dependency Resolution</span><br><span class="line"></span><br><span class="line">Dependencies Resolved</span><br><span class="line"></span><br><span class="line">=====================================================================================================================================</span><br><span class="line"> Package                             Arch           Version                Repository                                           Size</span><br><span class="line">=====================================================================================================================================</span><br><span class="line">Installing:</span><br><span class="line"> mysql-community-libs                x86_64         5.7.27-1.el7           mysql57-community                                   2.2 M</span><br><span class="line">     replacing  mariadb-libs.x86_64 1:5.5.60-1.el7_5</span><br><span class="line"> mysql-community-libs-compat         x86_64         5.7.27-1.el7           mysql57-community                                   2.0 M</span><br><span class="line">     replacing  mariadb-libs.x86_64 1:5.5.60-1.el7_5</span><br><span class="line"> mysql-community-server              x86_64         5.7.26-1.el7           /mysql-community-server-5.7.26-1.el7.x86_64         746 M</span><br><span class="line">Installing <span class="keyword">for</span> dependencies:</span><br><span class="line"> mysql-community-client              x86_64         5.7.27-1.el7           mysql57-community                                    24 M</span><br><span class="line"> mysql-community-common              x86_64         5.7.26-1.el7           mysql57-community                                   274 k</span><br><span class="line"> numactl-libs                        x86_64         2.0.9-7.el7            os                                                   29 k</span><br><span class="line"></span><br><span class="line">Transaction Summary</span><br><span class="line">=====================================================================================================================================</span><br><span class="line">Install  3 Packages (+3 Dependent packages)</span><br><span class="line"></span><br><span class="line">Total size: 774 M</span><br><span class="line">Total download size: 29 M</span><br><span class="line">Downloading packages:</span><br><span class="line">warning: /var/cache/yum/x86_64/7/mysql57-community/packages/mysql-community-common-5.7.26-1.el7.x86_64.rpm: Header V3 DSA/SHA1 Signature, key ID 5072e1f5: NOKEY</span><br><span class="line">Public key <span class="keyword">for</span> mysql-community-common-5.7.26-1.el7.x86_64.rpm is not installed</span><br><span class="line">(1/5): mysql-community-common-5.7.26-1.el7.x86_64.rpm                                                         | 274 kB  00:00:03     </span><br><span class="line">(2/5): mysql-community-client-5.7.27-1.el7.x86_64.rpm                                                         |  24 MB  00:00:04     </span><br><span class="line">(3/5): numactl-libs-2.0.9-7.el7.x86_64.rpm                                                                    |  29 kB  00:00:00     </span><br><span class="line">(4/5): mysql-community-libs-compat-5.7.27-1.el7.x86_64.rpm                                                    | 2.0 MB  00:00:00     </span><br><span class="line">(5/5): mysql-community-libs-5.7.27-1.el7.x86_64.rpm                                                           | 2.2 MB  00:00:04     </span><br><span class="line">-------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">Total                                                                                                3.6 MB/s |  29 MB  00:00:08     </span><br><span class="line">Retrieving key from file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</span><br><span class="line">Importing GPG key 0x5072E1F5:</span><br><span class="line"> Userid     : <span class="string">"MySQL Release Engineering &lt;mysql-build@oss.oracle.com&gt;"</span></span><br><span class="line"> Fingerprint: a4a9 4068 76fc bd3c 4567 70c8 8c71 8d3b 5072 e1f5</span><br><span class="line"> Package    : mysql80-community-release-el7-3.noarch (installed)</span><br><span class="line"> From       : /etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</span><br><span class="line">Running transaction check</span><br><span class="line">Running transaction <span class="built_in">test</span></span><br><span class="line">Transaction <span class="built_in">test</span> succeeded</span><br><span class="line">Running transaction</span><br><span class="line">Warning: RPMDB altered outside of yum.</span><br><span class="line">  Installing : mysql-community-common-5.7.26-1.el7.x86_64                                                                        1/7 </span><br><span class="line">  Installing : mysql-community-libs-5.7.27-1.el7.x86_64                                                                          2/7 </span><br><span class="line">  Installing : mysql-community-client-5.7.27-1.el7.x86_64                                                                        3/7 </span><br><span class="line">  Installing : numactl-libs-2.0.9-7.el7.x86_64                                                                                   4/7 </span><br><span class="line">  Installing : mysql-community-server-5.7.26-1.el7.x86_64                                                                        5/7 </span><br><span class="line">  Installing : mysql-community-libs-compat-5.7.27-1.el7.x86_64                                                                   6/7 </span><br><span class="line">  Erasing    : 1:mariadb-libs-5.5.60-1.el7_5.x86_64                                                                              7/7 </span><br><span class="line">  Verifying  : mysql-community-server-5.7.26-1.el7.x86_64                                                                        1/7 </span><br><span class="line">  Verifying  : numactl-libs-2.0.9-7.el7.x86_64                                                                                   2/7 </span><br><span class="line">  Verifying  : mysql-community-libs-compat-5.7.27-1.el7.x86_64                                                                   3/7 </span><br><span class="line">  Verifying  : mysql-community-client-5.7.27-1.el7.x86_64                                                                        4/7 </span><br><span class="line">  Verifying  : mysql-community-common-5.7.26-1.el7.x86_64                                                                        5/7 </span><br><span class="line">  Verifying  : mysql-community-libs-5.7.27-1.el7.x86_64                                                                          6/7 </span><br><span class="line">  Verifying  : 1:mariadb-libs-5.5.60-1.el7_5.x86_64</span><br><span class="line"></span><br><span class="line">Installed:</span><br><span class="line">  mysql-community-libs.x86_64 0:5.7.27-1.el7                     mysql-community-libs-compat.x86_64 0:5.7.27-1.el7                  </span><br><span class="line">  mysql-community-server.x86_64 0:5.7.26-1.el7                  </span><br><span class="line"></span><br><span class="line">Dependency Installed:</span><br><span class="line">  mysql-community-client.x86_64 0:5.7.27-1.el7   mysql-community-common.x86_64 0:5.7.26-1.el7   numactl-libs.x86_64 0:2.0.9-7.el7  </span><br><span class="line"></span><br><span class="line">Replaced:</span><br><span class="line">  mariadb-libs.x86_64 1:5.5.60-1.el7_5                                                                                               </span><br><span class="line"></span><br><span class="line">Complete!</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>yum安装rabbitmq</title>
    <url>/deployment/else/ins_rabbitmq/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>系统：CentOS 7.6</p>
</blockquote>
<a id="more"></a>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget https://github.com/rabbitmq/erlang-rpm/releases/download/v22.0.1/erlang-22.0.1-1.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line">wget https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.7.15/rabbitmq-server-3.7.15-1.el7.noarch.rpm</span><br><span class="line"></span><br><span class="line">yum install erlang-22.0.1-1.el7.x86_64.rpm rabbitmq-server-3.7.15-1.el7.noarch.rpm</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>else</tag>
      </tags>
  </entry>
  <entry>
    <title>yum安装redis</title>
    <url>/deployment/else/ins_redis5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p> 系统：CentOS 7.6</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rpm -Uvh http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br><span class="line">rpm -Uvh https://centos7.iuscommunity.org/ius-release.rpm</span><br><span class="line">yum install redis5-5.0.5 -y</span><br></pre></td></tr></table></figure>
<a id="more"></a>]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>else</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>yum安装ruby-2.6和redis-dump</title>
    <url>/deployment/else/ins_ruby_redis_dump/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>系统：CentOS 7.6</p>
</blockquote>
<a id="more"></a>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 安装ruby-install</span></span><br><span class="line">wget https://github.com/postmodern/ruby-install/archive/v0.7.0.tar.gz</span><br><span class="line">tar -xf v0.7.0.tar.gz</span><br><span class="line"><span class="built_in">cd</span> ruby-install-0.7.0/</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装ruby</span></span><br><span class="line">ruby-install ruby</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装redis-dump</span></span><br><span class="line">gem install redis-dump</span><br><span class="line"></span><br><span class="line"><span class="comment"># ln -s /opt/rubies/ruby-2.6.3/bin/* /usr/bin/</span></span><br><span class="line"><span class="built_in">export</span> PATH=/opt/rubies/ruby-2.6.3/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>else</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Y-API的安装步骤</title>
    <url>/deployment/else/ins_yapi/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="安装-NodeJS"><a href="#安装-NodeJS" class="headerlink" title="安装 NodeJS"></a>安装 NodeJS</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 nodeJs</span></span><br><span class="line">wget https://nodejs.org/dist/v12.14.1/node-v12.14.1-linux-x64.tar.xz</span><br><span class="line">tar -xf node-v12.14.1-linux-x64.tar.xz -C /usr/<span class="built_in">local</span>/</span><br><span class="line">chown -R root:root /usr/<span class="built_in">local</span>/node-v12.14.1-linux-x64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置环境变量 /etc/profile</span></span><br><span class="line"><span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/node-v12.14.1-linux-x64/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查node版本</span></span><br><span class="line">node --version</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="安装-MongoDB"><a href="#安装-MongoDB" class="headerlink" title="安装 MongoDB"></a>安装 MongoDB</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 mongodb</span></span><br><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/mongo.repo</span><br><span class="line">[mongodb-org-4.0]</span><br><span class="line">name=MongoDB Repository</span><br><span class="line">baseurl=https://repo.mongodb.org/yum/redhat/<span class="variable">$releasever</span>/mongodb-org/4.0/x86_64/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://www.mongodb.org/static/pgp/server-4.0.asc</span><br><span class="line">EOF</span><br><span class="line">yum install -y mongodb-org</span><br></pre></td></tr></table></figure>
<p>配置 <code>/etc/mongod.conf</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">systemLog:</span></span><br><span class="line">  <span class="attr">destination:</span> <span class="string">file</span></span><br><span class="line">  <span class="attr">logAppend:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">/var/log/mongodb/mongod.log</span></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line">  <span class="attr">dbPath:</span> <span class="string">/var/lib/mongo</span></span><br><span class="line">  <span class="attr">journal:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">processManagement:</span></span><br><span class="line">  <span class="attr">fork:</span> <span class="literal">true</span>  <span class="comment"># fork and run in background</span></span><br><span class="line">  <span class="attr">pidFilePath:</span> <span class="string">/var/run/mongodb/mongod.pid</span>  <span class="comment"># location of pidfile</span></span><br><span class="line">  <span class="attr">timeZoneInfo:</span> <span class="string">/usr/share/zoneinfo</span></span><br><span class="line"><span class="attr">net:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">27017</span></span><br><span class="line">  <span class="attr">bindIp:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>  <span class="comment"># Enter 0.0.0.0,:: to bind to all IPv4 and IPv6 addresses or, alternatively, use the net.bindIpAll setting.</span></span><br></pre></td></tr></table></figure>
<p>启动 mongod</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> mongod		<span class="comment"># 开机自启动</span></span><br><span class="line">systemctl start mongod</span><br></pre></td></tr></table></figure>
<h2 id="安装-yapi-cli"><a href="#安装-yapi-cli" class="headerlink" title="安装 yapi-cli"></a>安装 yapi-cli</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 yapi-cli</span></span><br><span class="line">npm --registry https://registry.npm.taobao.org install express</span><br><span class="line"></span><br><span class="line"><span class="comment"># 前台测试启动yapi</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/node-v12.14.1-linux-x64/my-yapi/</span><br><span class="line">node vendors/server/app.js</span><br></pre></td></tr></table></figure>
<h2 id="配置-supervisor"><a href="#配置-supervisor" class="headerlink" title="配置 supervisor"></a>配置 supervisor</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果无easy_install命令</span></span><br><span class="line"><span class="comment">#wget https://files.pythonhosted.org/packages/1d/64/a18a487b4391a05b9c7f938b94a16d80305bf0369c6b0b9509e86165e1d3/setuptools-41.0.1.zip</span></span><br><span class="line"><span class="comment">#unzip setuptools-41.0.1.zip</span></span><br><span class="line"><span class="comment">#cd setuptools-41.0.1/</span></span><br><span class="line"><span class="comment">#python setup.py install</span></span><br><span class="line"><span class="comment">#cd ..</span></span><br><span class="line"><span class="comment">#rm -rf setuptools-41.0.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果无pip命令</span></span><br><span class="line"><span class="comment">#easy_install pip</span></span><br><span class="line"><span class="comment">#pip install -U pip</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pip安装</span></span><br><span class="line">pip install supervisor</span><br><span class="line">echo_supervisord_conf &gt; /etc/supervisord.conf</span><br></pre></td></tr></table></figure>
<p>配置 <code>/etc/supervisord.d/yapi.ini</code>：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[program:yapi]</span></span><br><span class="line"><span class="attr">command</span>=/usr/local/node-v10.<span class="number">15.3</span>-linux-x64/bin/node vendors/server/app.js</span><br><span class="line"><span class="attr">directory</span>=/usr/local/node-v10.<span class="number">15.3</span>-linux-x64/my-yapi</span><br><span class="line"><span class="attr">user</span>=root</span><br><span class="line"><span class="attr">startsecs</span>=<span class="number">3</span></span><br><span class="line"><span class="attr">redirect_stderr</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">stdout_logfile_maxbytes</span>=<span class="number">50</span>MB</span><br><span class="line"><span class="attr">stdout_logfile_backups</span>=<span class="number">3</span></span><br><span class="line"><span class="attr">stdout_logfile</span>=/var/log/yapi.log</span><br></pre></td></tr></table></figure>
<p>supervisor启动yapi</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> supervisord.service		<span class="comment"># supervisord 开机自启</span></span><br><span class="line">supervisord -c /etc/supervisord.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启yapi</span></span><br><span class="line">supervisorctl restart yapi</span><br></pre></td></tr></table></figure>
<h2 id="配置-NginX"><a href="#配置-NginX" class="headerlink" title="配置 NginX"></a>配置 NginX</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">upstream yapi443 &#123;</span><br><span class="line">        <span class="comment">#ip_hash;</span></span><br><span class="line">        server 127.0.0.1:3000;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 443 ssl;</span><br><span class="line">        server_name yapi.keep.com;</span><br><span class="line">        root html;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">        ssl_certificate /etc/letsencrypt/live/keep.com/fullchain.pem;</span><br><span class="line">        ssl_certificate_key /etc/letsencrypt/live/keep.com/privkey.pem;</span><br><span class="line">        access_log /var/log/nginx/yapi.keep.com.443.access.log main;</span><br><span class="line">        error_log /var/log/nginx/yapi.keep.com.443.error.log ;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_pass          http://yapi443;</span><br><span class="line">                proxy_redirect      off;</span><br><span class="line">                proxy_set_header    Host            $host;</span><br><span class="line">                proxy_set_header    X-Real-IP       $remote_addr;</span><br><span class="line">                proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">                proxy_redirect      http://$host http://$host:$server_port;</span><br><span class="line">                add_header          Strict-Transport-Security "max-age=31536000";</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page  500 502 503 504 /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">                root /usr/share/nginx/html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>else</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL主从配置</title>
    <url>/deployment/else/mysql-replication/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="mysql配置"><a href="#mysql配置" class="headerlink" title="mysql配置"></a>mysql配置</h2><p>master端my.cnf配置示例：</p>
<a id="more"></a>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br><span class="line"></span><br><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br><span class="line"></span><br><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">init_connect</span>=<span class="string">'SET collation_connection = utf8_unicode_ci'</span></span><br><span class="line"><span class="attr">init_connect</span>=<span class="string">'SET NAMES utf8'</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8</span><br><span class="line"><span class="attr">collation-server</span>=utf8_unicode_ci</span><br><span class="line">skip-character-set-client-handshake</span><br><span class="line"></span><br><span class="line"><span class="comment">## 设置server_id，一般设置为IP，同一局域网内注意要唯一</span></span><br><span class="line"><span class="attr">server_id</span>=<span class="number">100</span>  </span><br><span class="line"><span class="comment">## 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）</span></span><br><span class="line"><span class="attr">binlog-ignore-db</span>=mysql  </span><br><span class="line"><span class="comment">## 开启二进制日志功能，可以随便取，最好有含义（关键就是这里了）</span></span><br><span class="line"><span class="attr">log-bin</span>=edu-mysql-bin  </span><br><span class="line"><span class="comment">## 为每个session 分配的内存，在事务过程中用来存储二进制日志的缓存</span></span><br><span class="line"><span class="attr">binlog_cache_size</span>=<span class="number">1</span>M  </span><br><span class="line"><span class="comment">## 主从复制的格式（mixed,statement,row，默认格式是statement）</span></span><br><span class="line"><span class="attr">binlog_format</span>=mixed  </span><br><span class="line"><span class="comment">## 二进制日志自动删除/过期的天数。默认值为0，表示不自动删除。</span></span><br><span class="line"><span class="attr">expire_logs_days</span>=<span class="number">7</span>  </span><br><span class="line"><span class="comment">## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。</span></span><br><span class="line"><span class="comment">## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span></span><br><span class="line"><span class="attr">slave_skip_errors</span>=<span class="number">1062</span></span><br></pre></td></tr></table></figure>
<p>slave端my.cnf配置示例：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br><span class="line"></span><br><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br><span class="line"></span><br><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">init_connect</span>=<span class="string">'SET collation_connection = utf8_unicode_ci'</span></span><br><span class="line"><span class="attr">init_connect</span>=<span class="string">'SET NAMES utf8'</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8</span><br><span class="line"><span class="attr">collation-server</span>=utf8_unicode_ci</span><br><span class="line">skip-character-set-client-handshake</span><br><span class="line"></span><br><span class="line"><span class="comment">## 设置server_id，一般设置为IP,注意要唯一</span></span><br><span class="line"><span class="attr">server_id</span>=<span class="number">101</span></span><br><span class="line"><span class="comment">## 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）</span></span><br><span class="line"><span class="attr">binlog-ignore-db</span>=mysql</span><br><span class="line"><span class="comment">## 开启二进制日志功能，以备Slave作为其它Slave的Master时使用</span></span><br><span class="line"><span class="attr">log-bin</span>=edu-mysql-slave1-bin</span><br><span class="line"><span class="comment">## 为每个session 分配的内存，在事务过程中用来存储二进制日志的缓存</span></span><br><span class="line"><span class="attr">binlog_cache_size</span>=<span class="number">1</span>M</span><br><span class="line"><span class="comment">## 主从复制的格式（mixed,statement,row，默认格式是statement）</span></span><br><span class="line"><span class="attr">binlog_format</span>=mixed</span><br><span class="line"><span class="comment">## 二进制日志自动删除/过期的天数。默认值为0，表示不自动删除。</span></span><br><span class="line"><span class="attr">expire_logs_days</span>=<span class="number">7</span></span><br><span class="line"><span class="comment">## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。</span></span><br><span class="line"><span class="comment">## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span></span><br><span class="line"><span class="attr">slave_skip_errors</span>=<span class="number">1062</span></span><br><span class="line"><span class="comment">## relay_log配置中继日志</span></span><br><span class="line"><span class="attr">relay_log</span>=edu-mysql-relay-bin</span><br><span class="line"><span class="comment">## log_slave_updates表示slave将复制事件写进自己的二进制日志</span></span><br><span class="line"><span class="attr">log_slave_updates</span>=<span class="number">1</span></span><br><span class="line"><span class="comment">## 防止改变数据(除了特殊的线程)</span></span><br><span class="line"><span class="attr">read_only</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure>
<h2 id="master端添加slave端复制账号"><a href="#master端添加slave端复制账号" class="headerlink" title="master端添加slave端复制账号"></a>master端添加slave端复制账号</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE USER &apos;slave&apos;@&apos;%&apos; IDENTIFIED BY &apos;xxxxxx&apos;; #slave密码xxxxxx，下面change master时用到</span><br><span class="line">GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO &apos;slave&apos;@&apos;%&apos;;</span><br><span class="line"># mysql 5.7也可以一行命令</span><br><span class="line"># GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO &apos;slave&apos;@&apos;%&apos; IDENTIFIED BY &apos;xxxxxx&apos;;</span><br><span class="line"></span><br><span class="line"># &apos;slave&apos;@&apos;%&apos; 或 &apos;slave&apos;@&apos;172.17.0.3&apos; #172.17.0.3是slave容器的ip</span><br><span class="line"># 但不能写虚拟机的ip（本实验是通过docker-compose非host网络模式创建2个mysql实例，未验证host模式是否可以）</span><br></pre></td></tr></table></figure>
<h2 id="获取master信息"><a href="#获取master信息" class="headerlink" title="获取master信息"></a>获取master信息</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># mysql -uroot -p</span><br><span class="line">...</span><br><span class="line">flush tables with read lock; # 锁表，start slave后解锁 UNLOCK TABLES</span><br><span class="line">show master status;</span><br><span class="line">+----------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| File                 | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+----------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| edu-mysql-bin.000001 |      769 |              | mysql</span><br></pre></td></tr></table></figure>
<h2 id="slave端设定master"><a href="#slave端设定master" class="headerlink" title="slave端设定master"></a>slave端设定master</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">change master to master_host=&apos;172.17.0.2&apos;, master_user=&apos;slave&apos;, master_password=&apos;xxxxxx&apos;, master_port=3306, master_log_file=&apos;edu-mysql-bin.000001&apos;, master_log_pos=769, master_connect_retry=30; # 172.17.0.3是master的IP，docker中通过docker inspect查看</span><br><span class="line"></span><br><span class="line"># change master to master_host=&apos;172.17.0.2&apos;时172.17.0.2是master容器的IP，不能使用虚拟机的IP</span><br><span class="line"></span><br><span class="line">###</span><br><span class="line">change master to master_host=&apos;172.17.0.2&apos;, master_user=&apos;slave&apos;, master_password=&apos;slave&apos;, master_port=3306, master_log_file=&apos;edu-mysql-bin.000033&apos;, master_log_pos=72831102, master_connect_retry=30;</span><br></pre></td></tr></table></figure>
<h2 id="slave启动、查看"><a href="#slave启动、查看" class="headerlink" title="slave启动、查看"></a>slave启动、查看</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; start slave;</span><br><span class="line">mysql&gt; show slave status \G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting for master to send event</span><br><span class="line">                  Master_Host: 172.17.0.3</span><br><span class="line">                  Master_User: slave</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 30</span><br><span class="line">              Master_Log_File: edu-mysql-bin.000001</span><br><span class="line">          Read_Master_Log_Pos: 29661</span><br><span class="line">               Relay_Log_File: edu-mysql-relay-bin.000018</span><br><span class="line">                Relay_Log_Pos: 6051</span><br><span class="line">        Relay_Master_Log_File: edu-mysql-bin.000001</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB:</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Percona toolkit</title>
    <url>/deployment/else/percona-toolkit/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a><strong>安装</strong></h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget https://www.percona.com/downloads/percona-toolkit/2.2.7/RPM/percona-toolkit-2.2.7-1.noarch.rpm</span><br><span class="line">yum install percona-toolkit-2.2.7-1.noarch.rpm -y</span><br><span class="line">yum install perl-Digest-MD5 -y</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Installed:</span><br><span class="line">  percona-toolkit.noarch 0:2.2.7-1                                                                                                   </span><br><span class="line"></span><br><span class="line">Dependency Installed:</span><br><span class="line">  perl.x86_64 4:5.16.3-294.el7_6                perl-Carp.noarch 0:1.26-244.el7         perl-Compress-Raw-Bzip2.x86_64 0:2.061-3.el7 </span><br><span class="line">  perl-Compress-Raw-Zlib.x86_64 1:2.061-4.el7   perl-DBD-MySQL.x86_64 0:4.023-6.el7     perl-DBI.x86_64 0:1.627-4.el7                </span><br><span class="line">  perl-Data-Dumper.x86_64 0:2.145-3.el7         perl-Encode.x86_64 0:2.51-7.el7         perl-Exporter.noarch 0:5.68-3.el7            </span><br><span class="line">  perl-File-Path.noarch 0:2.09-2.el7            perl-File-Temp.noarch 0:0.23.01-3.el7   perl-Filter.x86_64 0:1.49-3.el7              </span><br><span class="line">  perl-Getopt-Long.noarch 0:2.40-3.el7          perl-HTTP-Tiny.noarch 0:0.033-3.el7     perl-IO-Compress.noarch 0:2.061-2.el7        </span><br><span class="line">  perl-IO-Socket-IP.noarch 0:0.21-5.el7         perl-IO-Socket-SSL.noarch 0:1.94-7.el7  perl-Mozilla-CA.noarch 0:20130114-5.el7      </span><br><span class="line">  perl-Net-Daemon.noarch 0:0.48-5.el7           perl-Net-LibIDN.x86_64 0:0.12-15.el7    perl-Net-SSLeay.x86_64 0:1.55-6.el7          </span><br><span class="line">  perl-PathTools.x86_64 0:3.40-5.el7            perl-PlRPC.noarch 0:0.2020-14.el7       perl-Pod-Escapes.noarch 1:1.04-294.el7_6     </span><br><span class="line">  perl-Pod-Perldoc.noarch 0:3.20-4.el7          perl-Pod-Simple.noarch 1:3.28-4.el7     perl-Pod-Usage.noarch 0:1.63-3.el7           </span><br><span class="line">  perl-Scalar-List-Utils.x86_64 0:1.27-248.el7  perl-Socket.x86_64 0:2.010-4.el7        perl-Storable.x86_64 0:2.45-3.el7            </span><br><span class="line">  perl-Text-ParseWords.noarch 0:3.29-4.el7      perl-Time-HiRes.x86_64 4:1.9725-3.el7   perl-Time-Local.noarch 0:1.2300-2.el7        </span><br><span class="line">  perl-constant.noarch 0:1.27-2.el7             perl-libs.x86_64 4:5.16.3-294.el7_6     perl-macros.x86_64 4:5.16.3-294.el7_6        </span><br><span class="line">  perl-parent.noarch 1:0.225-244.el7            perl-podlators.noarch 0:2.5.1-3.el7     perl-threads.x86_64 0:1.87-4.el7             </span><br><span class="line">  perl-threads-shared.x86_64 0:1.43-6.el7      </span><br><span class="line"></span><br><span class="line">Complete!</span><br></pre></td></tr></table></figure>
<h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a><strong>权限</strong></h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON `zabbix`.* TO <span class="string">'pt'</span>@<span class="string">'%'</span></span><br><span class="line"></span><br><span class="line">show grants <span class="keyword">for</span> <span class="string">'root'</span>@<span class="string">'192.168.1.101'</span>;</span><br><span class="line"></span><br><span class="line">revoke SELECT, INSERT, UPDATE, DELETE, CREATE, PROCESS, SUPER, REPLICATION SLAVE ON *.* FROM <span class="string">'root'</span>@<span class="string">'192.168.1.101'</span>;</span><br></pre></td></tr></table></figure>
<h2 id="执行"><a href="#执行" class="headerlink" title="执行"></a><strong>执行</strong></h2><p>pt-table-checksum</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pt-table-checksum --nocheck-replication-filters --no-check-binlog-format --replicate=test_sync.checksums --create-replicate-table --databases=test_sync --tables=contact h=10.1.7.211,u=root,p=mysqlxxx,P=3306</span></span><br><span class="line"></span><br><span class="line">pt-table-checksum --nocheck-replication-filters --no-check-binlog-format --replicate=test_sync.checksums --create-replicate-table --databases=test_sync h=10.1.7.211,u=root,p=mysqlxxx,P=3306</span><br></pre></td></tr></table></figure>
<p>pt-table-sync</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pt-table-sync --replicate=test_sync.checksums h=10.1.7.211,u=root,p=mysqlxxx,P=3306 h=10.1.7.211,u=root,p=mysqlxxx,P=3307 --print</span></span><br><span class="line"></span><br><span class="line">pt-table-sync --replicate=test_sync.checksums h=10.1.7.211,u=root,p=mysqlxxx,P=3306 h=10.1.7.211,u=root,p=mysqlxxx,P=3307 --execute</span><br></pre></td></tr></table></figure>
<p>err:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Can<span class="string">'t make changes on the master because no unique index exists at /usr/bin/pt-table-sync line 10649.  while doing zabbix.history on 172.17.0.3</span></span><br></pre></td></tr></table></figure>
<p>pt-heartbeat</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pt-heartbeat --user=root --ask-pass --host=10.1.7.211 --port 3306 --create-table -D test_sync --interval=1 --update --replace --daemonize</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pt-heartbeat -D test_sync --table=heartbeat --monitor --host=10.1.7.211 --port=3306 --user=root --password=mysqlxxx --master-server-id=100 --print-master-server-id</span></span><br><span class="line"></span><br><span class="line">pt-heartbeat -D test_sync --table=heartbeat --check --host=10.1.7.211 --port=3306 --user=root --password=mysqlxxx --master-server-id=100 --<span class="built_in">print</span>-master-server-id</span><br><span class="line"></span><br><span class="line"><span class="comment">#pt-heartbeat --stop</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis高可用方案KeepAlived配置示例</title>
    <url>/deployment/else/redis_ha_keepalived/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h3 id="一主两从-三哨兵-KeepAlived"><a href="#一主两从-三哨兵-KeepAlived" class="headerlink" title="一主两从+三哨兵+KeepAlived"></a>一主两从+三哨兵+KeepAlived</h3><blockquote>
<p> Redis (M/1 S/2)+ Sentinel/3 + KA/3 (VIP/1)</p>
</blockquote>
<a id="more"></a>
<p>KA配置示例（其一节点）:</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">    router_id redis_swms</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script chk_http_port &#123;     </span><br><span class="line">    script "/usr/local/redis/bin/redis-cli -p 8379 info | grep role:master &gt;/dev/null 2&gt;&amp;1"     </span><br><span class="line">    interval 1 </span><br><span class="line">    timeout 2</span><br><span class="line">    fall 2</span><br><span class="line">    rise 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface eth0</span><br><span class="line">    virtual_router_id 64</span><br><span class="line">    priority 120</span><br><span class="line">    advert_int 1</span><br><span class="line"></span><br><span class="line">    unicast_src_ip 10.1.100.25</span><br><span class="line"></span><br><span class="line">    unicast_peer &#123;</span><br><span class="line">        10.1.100.23</span><br><span class="line">        10.1.100.24</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 12345</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        10.1.100.22</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    track_script &#123;</span><br><span class="line">        chk_http_port</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="一主一从-KeepAlived"><a href="#一主一从-KeepAlived" class="headerlink" title="一主一从+KeepAlived"></a>一主一从+KeepAlived</h3><blockquote>
<p> Redis (M/1 S/1) + KA/2 (VIP/1)</p>
</blockquote>
<p>KA配置示例（其一节点）:</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">    router_id redis_swms</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script chk_redis &#123;</span><br><span class="line">    script "/opt/scripts/keepalived/redis_check.sh 127.0.0.1 6379"</span><br><span class="line">    interval 1</span><br><span class="line">    timeout 2</span><br><span class="line">    fall 3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface ens192</span><br><span class="line">    virtual_router_id 64</span><br><span class="line">    priority 120</span><br><span class="line">    advert_int 1</span><br><span class="line"></span><br><span class="line">    unicast_src_ip 192.168.101.65</span><br><span class="line"></span><br><span class="line">    unicast_peer &#123;</span><br><span class="line">        192.168.101.66</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 12345</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.101.64</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    track_script &#123;</span><br><span class="line">        chk_redis</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    notify_master "/opt/scripts/keepalived/redis_master.sh 127.0.0.1 192.168.101.66 6379"</span><br><span class="line">    notify_backup "/opt/scripts/keepalived/redis_backup.sh 127.0.0.1 192.168.101.66 6379"</span><br><span class="line">    # notify_fault /opt/scripts/keepalived/redis_fault.sh</span><br><span class="line">    # notify_stop /opt/scripts/keepalived/redis_stop.sh</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>redis_master.sh:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">REDISCLI=<span class="string">"redis-cli -h <span class="variable">$1</span> -p <span class="variable">$3</span>"</span></span><br><span class="line">LOGFILE=<span class="string">"/var/log/redis/keepalived-redis-state.log"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"[master]"</span> &gt;&gt; <span class="variable">$LOGFILE</span></span><br><span class="line">date &gt;&gt; <span class="variable">$LOGFILE</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Being master...."</span> &gt;&gt; <span class="variable">$LOGFILE</span> 2&gt;&amp;1</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Run MASTER cmd ..."</span> &gt;&gt; <span class="variable">$LOGFILE</span> 2&gt;&amp;1</span><br><span class="line"><span class="variable">$REDISCLI</span> SLAVEOF <span class="variable">$2</span> <span class="variable">$3</span> &gt;&gt; <span class="variable">$LOGFILE</span></span><br><span class="line">sleep 10 <span class="comment">#delay 10 s wait data async cancel sync</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Run SLAVEOF NO ONE cmd ..."</span> &gt;&gt; <span class="variable">$LOGFILE</span></span><br><span class="line"><span class="variable">$REDISCLI</span> SLAVEOF NO ONE &gt;&gt; <span class="variable">$LOGFILE</span> 2&gt;&amp;1</span><br></pre></td></tr></table></figure>
<p>redis_backup.sh:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">REDISCLI=<span class="string">"redis-cli -h <span class="variable">$1</span> -p <span class="variable">$3</span>"</span></span><br><span class="line">LOGFILE=<span class="string">"/var/log/redis/keepalived-redis-state.log"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"[backup]"</span> &gt;&gt; <span class="variable">$LOGFILE</span></span><br><span class="line">date &gt;&gt; <span class="variable">$LOGFILE</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Run SLAVEOF cmd ..."</span> &gt;&gt; <span class="variable">$LOGFILE</span></span><br><span class="line"><span class="variable">$REDISCLI</span> SLAVEOF <span class="variable">$2</span> <span class="variable">$3</span> &gt;&gt; <span class="variable">$LOGFILE</span> 2&gt;&amp;1</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Being slave...."</span> &gt;&gt; <span class="variable">$LOGFILE</span> 2&gt;&amp;1</span><br><span class="line">sleep 15 <span class="comment">#delay 15 s wait data sync exchange role</span></span><br></pre></td></tr></table></figure>
<p>redis_check.sh:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">ALIVE=`redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> PING`</span><br><span class="line">LOGFILE=<span class="string">"/var/log/redis/keepalived-redis-check.log"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"[CHECK]"</span> &gt;&gt; <span class="variable">$LOGFILE</span></span><br><span class="line">date &gt;&gt; <span class="variable">$LOGFILE</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$ALIVE</span> = <span class="string">"PONG"</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Success: redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> PING <span class="variable">$ALIVE</span>"</span> &gt;&gt; <span class="variable">$LOGFILE</span> 2&gt;&amp;1</span><br><span class="line">  <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Failed:redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> PING <span class="variable">$ALIVE</span> "</span> &gt;&gt; <span class="variable">$LOGFILE</span> 2&gt;&amp;1</span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>ELK in K8s</title>
    <url>/deployment/k8s/k8s-elk/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="示例配置"><a href="#示例配置" class="headerlink" title="示例配置"></a>示例配置</h2><a id="more"></a>
<ul>
<li>elk-rc.yaml</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ReplicationController</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">elk-rc</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">elk</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">elk</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">k8s-app:</span> <span class="string">elk</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">docker.elastic.co/elasticsearch/elasticsearch:6.6.0</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">elasticsearch</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">9200</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">es-storage</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/usr/share/elasticsearch/data</span></span><br><span class="line">              <span class="attr">subPath:</span> <span class="string">elasticsearch/data</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">docker.elastic.co/logstash/logstash:6.6.0</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">logstash</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">9600</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">5000</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">docker.elastic.co/kibana/kibana:6.6.0</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">kibana</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ELASTICSEARCH_URL</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">http://127.0.0.1:9200</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">5601</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">es-storage</span></span><br><span class="line">          <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">            <span class="attr">claimName:</span> <span class="string">pvc001</span></span><br></pre></td></tr></table></figure>
<ul>
<li>elk-svc-kibana.yaml</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kibana</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">elk</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">LoadBalancer</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">elk</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">5601</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">kibana</span></span><br></pre></td></tr></table></figure>
<ul>
<li>elk-svc-logstash.yaml</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">logstash</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">elk</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">elk</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8600</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">logstash</span></span><br></pre></td></tr></table></figure>
<ul>
<li>pv.yaml</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pv001</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">20Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteMany</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span> <span class="string">Retain</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">nfs</span></span><br><span class="line">  <span class="attr">nfs:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">"/path/to/nfs"</span></span><br><span class="line">    <span class="attr">server:</span> <span class="string">x.xx.xxx.xxx</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pvc001</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteMany</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">20Gi</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">nfs</span></span><br></pre></td></tr></table></figure>
<p>创建NFS持久卷：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl create -f pv.yaml</span><br></pre></td></tr></table></figure>
<p>部署ELK：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">kubectl create -f elk-rc.yaml</span><br><span class="line">kubectl create -f elk-svc-logstash.yaml</span><br><span class="line">kubectl create -f elk-svc-kibana.yaml</span><br><span class="line">kubectl get pods</span><br><span class="line">kubectl get svc</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>K8s</category>
      </categories>
      <tags>
        <tag>K8s</tag>
        <tag>ELK</tag>
      </tags>
  </entry>
  <entry>
    <title>基于NFS文件系统的K8s动态PV</title>
    <url>/deployment/k8s/k8s-nfs-storageclass/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>动态卷供应的实现基于 <code>storage.k8s.io</code> API 组中的 <code>StorageClass</code> API 对象。 集群管理员可以根据需要定义多个 <code>StorageClass</code> 对象，每个对象指定一个<em>卷插件</em>（又名 <em>provisioner</em>）， 卷插件向卷供应商提供在创建卷时需要的数据卷信息及相关参数。</p>
</blockquote>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/k8s-nfs-storageclass.assets/1581474416957.png" alt="1581474416957"></p>
<a id="more"></a>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>1）使用NFS StorageClass动态创建PV的基本配置</p>
<p>StorageClass</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">storage.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StorageClass</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">managed-nfs-storage</span></span><br><span class="line"><span class="attr">provisioner:</span> <span class="string">fuseim.pri/ifs</span></span><br><span class="line"><span class="attr">parameters:</span></span><br><span class="line">  <span class="attr">archiveOnDelete:</span> <span class="string">"true"</span></span><br></pre></td></tr></table></figure>
<p>rbac：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-client-provisioner-runner</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> <span class="string">[""]</span></span><br><span class="line">    <span class="attr">resources:</span> <span class="string">["persistentvolumes"]</span></span><br><span class="line">    <span class="attr">verbs:</span> <span class="string">["get",</span> <span class="string">"list"</span><span class="string">,</span> <span class="string">"watch"</span><span class="string">,</span> <span class="string">"create"</span><span class="string">,</span> <span class="string">"delete"</span><span class="string">]</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> <span class="string">[""]</span></span><br><span class="line">    <span class="attr">resources:</span> <span class="string">["persistentvolumeclaims"]</span></span><br><span class="line">    <span class="attr">verbs:</span> <span class="string">["get",</span> <span class="string">"list"</span><span class="string">,</span> <span class="string">"watch"</span><span class="string">,</span> <span class="string">"update"</span><span class="string">]</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> <span class="string">["storage.k8s.io"]</span></span><br><span class="line">    <span class="attr">resources:</span> <span class="string">["storageclasses"]</span></span><br><span class="line">    <span class="attr">verbs:</span> <span class="string">["get",</span> <span class="string">"list"</span><span class="string">,</span> <span class="string">"watch"</span><span class="string">]</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> <span class="string">[""]</span></span><br><span class="line">    <span class="attr">resources:</span> <span class="string">["events"]</span></span><br><span class="line">    <span class="attr">verbs:</span> <span class="string">["create",</span> <span class="string">"update"</span><span class="string">,</span> <span class="string">"patch"</span><span class="string">]</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">run-nfs-client-provisioner</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-client-provisioner-runner</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">leader-locking-nfs-client-provisioner</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> <span class="string">[""]</span></span><br><span class="line">    <span class="attr">resources:</span> <span class="string">["endpoints"]</span></span><br><span class="line">    <span class="attr">verbs:</span> <span class="string">["get",</span> <span class="string">"list"</span><span class="string">,</span> <span class="string">"watch"</span><span class="string">,</span> <span class="string">"create"</span><span class="string">,</span> <span class="string">"update"</span><span class="string">,</span> <span class="string">"patch"</span><span class="string">]</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">leader-locking-nfs-client-provisioner</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">    <span class="comment"># replace with namespace where provisioner is deployed</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">leader-locking-nfs-client-provisioner</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br></pre></td></tr></table></figure>
<p>nfs-client provisioner：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">Recreate</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-client-root</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/persistentvolumes</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">PROVISIONER_NAME</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">fuseim.pri/ifs</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NFS_SERVER</span></span><br><span class="line">              <span class="attr">value:</span> <span class="number">192.168</span><span class="number">.100</span><span class="number">.150</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NFS_PATH</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">/testPV</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-client-root</span></span><br><span class="line">          <span class="attr">nfs:</span></span><br><span class="line">            <span class="attr">server:</span> <span class="number">192.168</span><span class="number">.100</span><span class="number">.150</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/testPV</span></span><br></pre></td></tr></table></figure>
<p>2）NFS文件系统搭建</p>
<p>上述配置中使用了在192.168.100.150上创建的测试用NFS文件系统，其搭建过程本文略过。</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ul>
<li>测试pod示例</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">nginx:latest</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">www</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/html</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">www</span></span><br><span class="line">      <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">        <span class="attr">claimName:</span> <span class="string">my-pvc</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-pvc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">"managed-nfs-storage"</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteMany</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">5Gi</span></span><br></pre></td></tr></table></figure>
<ul>
<li>测试deployment示例</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"> <span class="attr">name:</span> <span class="string">test-nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">Recreate</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">test-nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-nginx</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">www</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/html</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">www</span></span><br><span class="line">          <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">            <span class="attr">claimName:</span> <span class="string">my-pvc</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-pvc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">"managed-nfs-storage"</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">8Gi</span></span><br></pre></td></tr></table></figure>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/k8s-nfs-storageclass.assets/1581476470380.png" alt="1581476470380"></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/k8s-nfs-storageclass.assets/1581476543730.png" alt="1581476543730"></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/k8s-nfs-storageclass.assets/1581476639703.png" alt="1581476639703"></p>
<p>查看nfs目录</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/k8s-nfs-storageclass.assets/1581476856992.png" alt="1581476856992"></p>
<ul>
<li>测试statefulset示例：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">serviceName:</span> <span class="string">"nginx"</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">serviceAccount:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">"/data/nginx"</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">ng</span></span><br><span class="line">  <span class="attr">volumeClaimTemplates:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">metadata:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">ng</span></span><br><span class="line">        <span class="attr">annotations:</span></span><br><span class="line">          <span class="attr">volume.beta.kubernetes.io/storage-class:</span> <span class="string">"managed-nfs-storage"</span></span><br><span class="line">      <span class="attr">spec:</span></span><br><span class="line">        <span class="attr">accessModes:</span> <span class="string">[</span> <span class="string">"ReadWriteOnce"</span> <span class="string">]</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">storage:</span> <span class="string">10Gi</span></span><br></pre></td></tr></table></figure>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/k8s-nfs-storageclass.assets/1581479581045.png" alt="1581479581045"></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/k8s-nfs-storageclass.assets/1581479695002.png" alt="1581479695002"></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2020/k8s-nfs-storageclass.assets/1581479769120.png" alt="1581479769120"></p>
]]></content>
      <categories>
        <category>K8s</category>
      </categories>
      <tags>
        <tag>K8s</tag>
      </tags>
  </entry>
  <entry>
    <title>K8s部署prometheus</title>
    <url>/deployment/k8s/k8s-prometheus/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="示例配置"><a href="#示例配置" class="headerlink" title="示例配置"></a>示例配置</h2><a id="more"></a>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">prometheus-config</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">prometheus.yml:</span> <span class="string">|</span></span><br><span class="line">    <span class="attr">global:</span></span><br><span class="line">      <span class="attr">scrape_interval:</span>     <span class="string">15s</span></span><br><span class="line">      <span class="attr">evaluation_interval:</span> <span class="string">15s</span></span><br><span class="line">    <span class="attr">scrape_configs:</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">'kubernetes-apiservers'</span></span><br><span class="line">      <span class="attr">kubernetes_sd_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">role:</span> <span class="string">endpoints</span></span><br><span class="line">      <span class="attr">scheme:</span> <span class="string">https</span></span><br><span class="line">      <span class="attr">tls_config:</span></span><br><span class="line">        <span class="attr">ca_file:</span> <span class="string">/var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span></span><br><span class="line">      <span class="attr">bearer_token_file:</span> <span class="string">/var/run/secrets/kubernetes.io/serviceaccount/token</span></span><br><span class="line">      <span class="attr">relabel_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> <span class="string">[__meta_kubernetes_namespace,</span> <span class="string">__meta_kubernetes_service_name,</span> <span class="string">__meta_kubernetes_endpoint_port_name]</span></span><br><span class="line">        <span class="attr">action:</span> <span class="string">keep</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="string">default;kubernetes;https</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">'kubernetes-nodes'</span></span><br><span class="line">      <span class="attr">kubernetes_sd_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">role:</span> <span class="string">node</span></span><br><span class="line">      <span class="attr">scheme:</span> <span class="string">https</span></span><br><span class="line">      <span class="attr">tls_config:</span></span><br><span class="line">        <span class="attr">ca_file:</span> <span class="string">/var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span></span><br><span class="line">      <span class="attr">bearer_token_file:</span> <span class="string">/var/run/secrets/kubernetes.io/serviceaccount/token</span></span><br><span class="line">      <span class="attr">relabel_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">labelmap</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="string">__meta_kubernetes_node_label_(.+)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">target_label:</span> <span class="string">__address__</span></span><br><span class="line">        <span class="attr">replacement:</span> <span class="string">kubernetes.default.svc:443</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> <span class="string">[__meta_kubernetes_node_name]</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="string">(.+)</span></span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">__metrics_path__</span></span><br><span class="line">        <span class="attr">replacement:</span> <span class="string">/api/v1/nodes/$&#123;1&#125;/proxy/metrics</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">'kubernetes-cadvisor'</span></span><br><span class="line">      <span class="attr">kubernetes_sd_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">role:</span> <span class="string">node</span></span><br><span class="line">      <span class="attr">scheme:</span> <span class="string">https</span></span><br><span class="line">      <span class="attr">tls_config:</span></span><br><span class="line">        <span class="attr">ca_file:</span> <span class="string">/var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span></span><br><span class="line">      <span class="attr">bearer_token_file:</span> <span class="string">/var/run/secrets/kubernetes.io/serviceaccount/token</span></span><br><span class="line">      <span class="attr">relabel_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">labelmap</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="string">__meta_kubernetes_node_label_(.+)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">target_label:</span> <span class="string">__address__</span></span><br><span class="line">        <span class="attr">replacement:</span> <span class="string">kubernetes.default.svc:443</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> <span class="string">[__meta_kubernetes_node_name]</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="string">(.+)</span></span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">__metrics_path__</span></span><br><span class="line">        <span class="attr">replacement:</span> <span class="string">/api/v1/nodes/$&#123;1&#125;/proxy/metrics/cadvisor</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">'kubernetes-service-endpoints'</span></span><br><span class="line">      <span class="attr">kubernetes_sd_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">role:</span> <span class="string">endpoints</span></span><br><span class="line">      <span class="attr">relabel_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> <span class="string">[__meta_kubernetes_service_annotation_prometheus_io_scrape]</span></span><br><span class="line">        <span class="attr">action:</span> <span class="string">keep</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="literal">true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> <span class="string">[__meta_kubernetes_service_annotation_prometheus_io_scheme]</span></span><br><span class="line">        <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">__scheme__</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="string">(https?)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> <span class="string">[__meta_kubernetes_service_annotation_prometheus_io_path]</span></span><br><span class="line">        <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">__metrics_path__</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="string">(.+)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> <span class="string">[__address__,</span> <span class="string">__meta_kubernetes_service_annotation_prometheus_io_port]</span></span><br><span class="line">        <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">__address__</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="string">([^:]+)(?::\d+)?;(\d+)</span></span><br><span class="line">        <span class="attr">replacement:</span> <span class="string">$1:$2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">labelmap</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="string">__meta_kubernetes_service_label_(.+)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> <span class="string">[__meta_kubernetes_namespace]</span></span><br><span class="line">        <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">kubernetes_namespace</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> <span class="string">[__meta_kubernetes_service_name]</span></span><br><span class="line">        <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">kubernetes_name</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">'kubernetes-services'</span></span><br><span class="line">      <span class="attr">kubernetes_sd_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">role:</span> <span class="string">service</span></span><br><span class="line">      <span class="attr">metrics_path:</span> <span class="string">/probe</span></span><br><span class="line">      <span class="attr">params:</span></span><br><span class="line">        <span class="attr">module:</span> <span class="string">[http_2xx]</span></span><br><span class="line">      <span class="attr">relabel_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> <span class="string">[__meta_kubernetes_service_annotation_prometheus_io_probe]</span></span><br><span class="line">        <span class="attr">action:</span> <span class="string">keep</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="literal">true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> <span class="string">[__address__]</span></span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">__param_target</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">target_label:</span> <span class="string">__address__</span></span><br><span class="line">        <span class="attr">replacement:</span> <span class="string">blackbox-exporter.example.com:9115</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> <span class="string">[__param_target]</span></span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">instance</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">labelmap</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="string">__meta_kubernetes_service_label_(.+)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> <span class="string">[__meta_kubernetes_namespace]</span></span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">kubernetes_namespace</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> <span class="string">[__meta_kubernetes_service_name]</span></span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">kubernetes_name</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">'kubernetes-ingresses'</span></span><br><span class="line">      <span class="attr">kubernetes_sd_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">role:</span> <span class="string">ingress</span></span><br><span class="line">      <span class="attr">relabel_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> <span class="string">[__meta_kubernetes_ingress_annotation_prometheus_io_probe]</span></span><br><span class="line">        <span class="attr">action:</span> <span class="string">keep</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="literal">true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> <span class="string">[__meta_kubernetes_ingress_scheme,__address__,__meta_kubernetes_ingress_path]</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="string">(.+);(.+);(.+)</span></span><br><span class="line">        <span class="attr">replacement:</span> <span class="string">$&#123;1&#125;://$&#123;2&#125;$&#123;3&#125;</span></span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">__param_target</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">target_label:</span> <span class="string">__address__</span></span><br><span class="line">        <span class="attr">replacement:</span> <span class="string">blackbox-exporter.example.com:9115</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> <span class="string">[__param_target]</span></span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">instance</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">labelmap</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="string">__meta_kubernetes_ingress_label_(.+)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> <span class="string">[__meta_kubernetes_namespace]</span></span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">kubernetes_namespace</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> <span class="string">[__meta_kubernetes_ingress_name]</span></span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">kubernetes_name</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">'kubernetes-pods'</span></span><br><span class="line">      <span class="attr">kubernetes_sd_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">role:</span> <span class="string">pod</span></span><br><span class="line">      <span class="attr">relabel_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> <span class="string">[__meta_kubernetes_pod_annotation_prometheus_io_scrape]</span></span><br><span class="line">        <span class="attr">action:</span> <span class="string">keep</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="literal">true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> <span class="string">[__meta_kubernetes_pod_annotation_prometheus_io_path]</span></span><br><span class="line">        <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">__metrics_path__</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="string">(.+)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> <span class="string">[__address__,</span> <span class="string">__meta_kubernetes_pod_annotation_prometheus_io_port]</span></span><br><span class="line">        <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="string">([^:]+)(?::\d+)?;(\d+)</span></span><br><span class="line">        <span class="attr">replacement:</span> <span class="string">$1:$2</span></span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">__address__</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">action:</span> <span class="string">labelmap</span></span><br><span class="line">        <span class="attr">regex:</span> <span class="string">__meta_kubernetes_pod_label_(.+)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> <span class="string">[__meta_kubernetes_namespace]</span></span><br><span class="line">        <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">kubernetes_namespace</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source_labels:</span> <span class="string">[__meta_kubernetes_pod_name]</span></span><br><span class="line">        <span class="attr">action:</span> <span class="string">replace</span></span><br><span class="line">        <span class="attr">target_label:</span> <span class="string">kubernetes_pod_name</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1beta2</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">prometheus-deployment</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">prometheus</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">prometheus</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">prometheus</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">prom/prometheus:v2.0.0</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">prometheus</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">"/bin/prometheus"</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">"--config.file=/etc/prometheus/prometheus.yml"</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">"--storage.tsdb.path=/prometheus"</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">"--storage.tsdb.retention=24h"</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">9090</span></span><br><span class="line">          <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">"/prometheus"</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">data</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">"/etc/prometheus"</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">100m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">100Mi</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">500m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">2500Mi</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">prometheus</span>    </span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">data</span></span><br><span class="line">        <span class="attr">emptyDir:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">        <span class="attr">configMap:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">prometheus-config</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">prometheus</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">prometheus</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">9090</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">9090</span></span><br><span class="line">    <span class="attr">nodePort:</span> <span class="number">30003</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span> <span class="string">[""]</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">nodes</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">nodes/proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">services</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">endpoints</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pods</span></span><br><span class="line">  <span class="attr">verbs:</span> <span class="string">["get",</span> <span class="string">"list"</span><span class="string">,</span> <span class="string">"watch"</span><span class="string">]</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">extensions</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ingresses</span></span><br><span class="line">  <span class="attr">verbs:</span> <span class="string">["get",</span> <span class="string">"list"</span><span class="string">,</span> <span class="string">"watch"</span><span class="string">]</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">nonResourceURLs:</span> <span class="string">["/metrics"]</span></span><br><span class="line">  <span class="attr">verbs:</span> <span class="string">["get"]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">prometheus</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">prometheus</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br></pre></td></tr></table></figure>
<h2 id="grafana"><a href="#grafana" class="headerlink" title="grafana"></a>grafana</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">grafana-core</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">grafana</span></span><br><span class="line">    <span class="attr">component:</span> <span class="string">core</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">grafana</span></span><br><span class="line">        <span class="attr">component:</span> <span class="string">core</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">grafana/grafana:4.2.0</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">grafana-core</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">        <span class="comment"># env:</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="comment"># keep request = limit to keep this container in guaranteed class</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">100m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">100Mi</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">100m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">100Mi</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="comment"># The following env variables set up basic auth twith the default admin user and admin password.</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">GF_AUTH_BASIC_ENABLED</span></span><br><span class="line">            <span class="attr">value:</span> <span class="string">"true"</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">GF_AUTH_ANONYMOUS_ENABLED</span></span><br><span class="line">            <span class="attr">value:</span> <span class="string">"false"</span></span><br><span class="line">          <span class="comment"># - name: GF_AUTH_ANONYMOUS_ORG_ROLE</span></span><br><span class="line">          <span class="comment">#   value: Admin</span></span><br><span class="line">          <span class="comment"># does not really work, because of template variables in exported dashboards:</span></span><br><span class="line">          <span class="comment"># - name: GF_DASHBOARDS_JSON_ENABLED</span></span><br><span class="line">          <span class="comment">#   value: "true"</span></span><br><span class="line">        <span class="attr">readinessProbe:</span></span><br><span class="line">          <span class="attr">httpGet:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/login</span></span><br><span class="line">            <span class="attr">port:</span> <span class="number">3000</span></span><br><span class="line">          <span class="comment"># initialDelaySeconds: 30</span></span><br><span class="line">          <span class="comment"># timeoutSeconds: 1</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">grafana-persistent-storage</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/var</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">grafana-persistent-storage</span></span><br><span class="line">        <span class="attr">emptyDir:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">   <span class="attr">name:</span> <span class="string">grafana</span></span><br><span class="line">   <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">   <span class="attr">rules:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">k8s.grafana</span></span><br><span class="line">     <span class="attr">http:</span></span><br><span class="line">       <span class="attr">paths:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">         <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">serviceName:</span> <span class="string">grafana</span></span><br><span class="line">          <span class="attr">servicePort:</span> <span class="number">3000</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">grafana</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">grafana</span></span><br><span class="line">    <span class="attr">component:</span> <span class="string">core</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">3000</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">grafana</span></span><br><span class="line">    <span class="attr">component:</span> <span class="string">core</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>K8s</category>
      </categories>
      <tags>
        <tag>K8s</tag>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes Dashboard</title>
    <url>/deployment/k8s/kubernetes-dashboard/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h4 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h4><ul>
<li>获取token</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | awk <span class="string">'/^deployment-controller-token-/&#123;print $1&#125;'</span>) | awk <span class="string">'$1=="token:"&#123;print $2&#125;'</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep kubernetes-dashboard-token |awk <span class="string">'&#123;print $1&#125;'</span>) | grep token: | awk <span class="string">'&#123;print $2&#125;'</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl -n kube-system describe $(kubectl -n kube-system get secret -n kube-system -o name | grep namespace) | grep token:</span><br></pre></td></tr></table></figure>
<ul>
<li>创建ClusterRoleBinding</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard-minimal</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cluster-admin</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br></pre></td></tr></table></figure>
<ul>
<li>URL</li>
</ul>
<p><a href="https://{master_ip}:6443/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/" target="_blank" rel="noopener">https://{master_ip}:6443/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/</a></p>
]]></content>
      <categories>
        <category>K8s</category>
      </categories>
      <tags>
        <tag>K8s</tag>
      </tags>
  </entry>
  <entry>
    <title>kubespray安装K8s</title>
    <url>/deployment/k8s/kubespray-k8s/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<blockquote>
<p>kubespray项目地址: <a href="https://github.com/kubernetes-sigs/kubespray" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/kubernetes-sigs/kubespray</a></p>
<p>官方参考：<a href="http://192.168.100.150/k8s/kubespray-k8s/0812/kubespray/#/docs/getting-started" rel="external nofollow noopener noreferrer" target="_blank">http://192.168.100.150/k8s/kubespray-k8s/0812/kubespray/#/docs/getting-started</a></p>
<p>项目分支：release-2.11</p>
<p>K8s版本：1.15.1</p>
</blockquote>
<a id="more"></a>
<p><em><a href="https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/" rel="external nofollow noopener noreferrer" target="_blank">Kubernetes (K8s)</a> is an open-source system for automating deployment, scaling, and management of containerized applications.</em></p>
<p><a href="https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/" rel="external nofollow noopener noreferrer" target="_blank"><strong>Kubernetes (K8s)</strong></a> 是一个开源容器编排引擎，用于自动化容器化应用程序的部署，扩展和管理。</p>
<p><img src="https://d33wubrfki0l68.cloudfront.net/26a177ede4d7b032362289c6fccd448fc4a91174/eb693/images/docs/container_evolution.svg" alt="Deployment evolution"></p>
<p><em>应用部署方式的演变历史：物理机部署  =&gt; 虚拟机部署  =&gt; 容器化部署</em></p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>因国外网络问题，安装前需作必要的修改，写成预处理脚本如下：</p>
<p>pre-install.sh:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 安装git并clone官方安装脚本</span></span><br><span class="line">yum install git -y</span><br><span class="line">kube_version=v1.15.1</span><br><span class="line"><span class="keyword">if</span> [ ! -d kubespray ]; <span class="keyword">then</span></span><br><span class="line">  git <span class="built_in">clone</span> https://github.com/kubernetes-sigs/kubespray</span><br><span class="line">  <span class="built_in">cd</span> kubespray</span><br><span class="line">  git checkout release-2.11</span><br><span class="line">  <span class="built_in">cd</span> -</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> kubespray</span><br><span class="line"><span class="keyword">if</span> [ ! -d inventory/mycluster ]; <span class="keyword">then</span></span><br><span class="line">  cp -r inventory/sample inventory/mycluster</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 更新pip及安装依赖</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$1</span>"</span> = <span class="string">"-U"</span> ]; <span class="keyword">then</span></span><br><span class="line">  easy_install pip</span><br><span class="line">  pip install pip==8.0.3</span><br><span class="line">  pip uninstall requests</span><br><span class="line">  pip install -U pip</span><br><span class="line">  pip install -U setuptools</span><br><span class="line">  pip install -r requirements.txt</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################### 所有修改仅涉及以下4个文件，可事先改好另存覆盖</span></span><br><span class="line"><span class="comment">#inventory/mycluster/group_vars/k8s-cluster/k8s-cluster.yml</span></span><br><span class="line"><span class="comment">#roles/download/defaults/main.yml</span></span><br><span class="line"><span class="comment">#roles/kubespray-defaults/defaults/main.yaml</span></span><br><span class="line"><span class="comment">#inventory/mycluster/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################### 若不事先准备改好的文件，可使用以下命令修改：</span></span><br><span class="line"><span class="comment">### 改版本号</span></span><br><span class="line">sed -i <span class="string">"s/^kube_version:.*$/kube_version: <span class="variable">$kube_version</span>/"</span> roles/kubespray-defaults/defaults/main.yaml</span><br><span class="line">sed -i <span class="string">"s/^kube_version:.*$/kube_version: <span class="variable">$kube_version</span>/"</span> roles/download/defaults/main.yml</span><br><span class="line">sed -i <span class="string">"s/^kube_version:.*$/kube_version: <span class="variable">$kube_version</span>/"</span> inventory/mycluster/group_vars/k8s-cluster/k8s-cluster.yml</span><br><span class="line"></span><br><span class="line"><span class="comment">### 改镜像源</span></span><br><span class="line">kube_image_repo=mirrorgooglecontainers</span><br><span class="line">sed -i <span class="string">"s/^kube_image_repo:.*$/kube_image_repo: <span class="variable">$kube_image_repo</span>/"</span> inventory/mycluster/group_vars/k8s-cluster/k8s-cluster.yml</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">"s/^kube_image_repo:.*$/kube_image_repo: <span class="variable">$kube_image_repo</span>/"</span> roles/download/defaults/main.yml</span><br><span class="line">sed -i <span class="string">"s/k8s.gcr.io/<span class="variable">$kube_image_repo</span>/g"</span> roles/download/defaults/main.yml</span><br><span class="line">sed -i <span class="string">"s#gcr.io/google_containers#<span class="variable">$kube_image_repo</span>#g"</span> roles/download/defaults/main.yml</span><br><span class="line">sed -i <span class="string">"s/gcr.io/<span class="variable">$kube_image_repo</span>/g"</span> roles/download/defaults/main.yml</span><br><span class="line">sed -i <span class="string">"s#(k8s.)?gcr.io(/google_containers)?#<span class="variable">$kube_image_repo</span>#g"</span> roles/download/defaults/main.yml</span><br><span class="line"></span><br><span class="line"><span class="comment">#nodelocaldns_version: 1.15.1</span></span><br><span class="line">nodelocaldns_image_repo=lzzeng/k8s-dns-node-cache</span><br><span class="line">sed -i <span class="string">'s#^nodelocaldns_image_repo:.*$'</span><span class="string">"#nodelocaldns_image_repo: <span class="variable">$nodelocaldns_image_repo</span>#"</span> roles/download/defaults/main.yml</span><br><span class="line"></span><br><span class="line"><span class="comment">### 改二进制文件下载地址</span></span><br><span class="line">download_url=http://192.168.100.150/k8s/<span class="variable">$kube_version</span></span><br><span class="line">sed -i <span class="string">'s#^kubeadm_download_url:.*$#kubeadm_download_url: '</span>\"<span class="string">"<span class="variable">$download_url</span>"</span><span class="string">'/kubeadm\"#'</span> roles/download/defaults/main.yml</span><br><span class="line">sed -i <span class="string">'s#^hyperkube_download_url:.*$#hyperkube_download_url: '</span>\"<span class="string">"<span class="variable">$download_url</span>"</span><span class="string">'/hyperkube\"#'</span> roles/download/defaults/main.yml</span><br><span class="line">sed -i <span class="string">'s#^calicoctl_download_url:.*$#calicoctl_download_url: '</span>\"<span class="string">"<span class="variable">$download_url</span>"</span><span class="string">'/calicoctl-linux-amd64\"#'</span> roles/download/defaults/main.yml <span class="comment">#1.15.1 使用 3.7.3</span></span><br><span class="line">sed -i <span class="string">'s#^etcd_download_url:.*$#etcd_download_url: '</span>\"<span class="string">"<span class="variable">$download_url</span>"</span><span class="string">'/etcd-v3.3.10-linux-amd64.tar.gz\"#'</span> roles/download/defaults/main.yml <span class="comment">#1.15.1 使用 v3.3.10</span></span><br><span class="line">sed -i <span class="string">'s#^cni_download_url:.*$#cni_download_url: '</span>\"<span class="string">"<span class="variable">$download_url</span>"</span><span class="string">'/cni-plugins-linux-amd64-v0.8.1.tgz\"#'</span> roles/download/defaults/main.yml <span class="comment">#1.15.1 使用 v0.8.1</span></span><br><span class="line">sed -i <span class="string">'s#^crictl_download_url:.*$#crictl_download_url: '</span>\"<span class="string">"<span class="variable">$download_url</span>"</span><span class="string">'/critest-v1.15.0-linux-amd64.tar.gz\"#'</span> roles/download/defaults/main.yml <span class="comment">#1.15.1 使用 v1.15.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 可以修改内存限制，使得1G内存也可以执行安装</span></span><br><span class="line"><span class="comment">#sed -i 's/^minimal_node_memory_mb:.*$/minimal_node_memory_mb: 500/' roles/kubernetes/preinstall/defaults/main.yml</span></span><br><span class="line"><span class="comment">#sed -i 's/^minimal_master_memory_mb:.*$/minimal_master_memory_mb: 500/' roles/kubernetes/preinstall/defaults/main.yml</span></span><br><span class="line"><span class="comment">#sed -i 's/ansible_memtotal_mb\s*&gt;=\s*[0-9]\+/ansible_memtotal_mb &gt;= 500/' roles/kubernetes/preinstall/tasks/0020-verify-settings.yml</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### docker加速</span></span><br><span class="line">cat &lt;&lt;EOF &gt;&gt; inventory/mycluster/group_vars/k8s-cluster/k8s-cluster.yml</span><br><span class="line"><span class="comment"># Debian docker-ce repo</span></span><br><span class="line">docker_debian_repo_base_url: <span class="string">"https://mirrors.aliyun.com/docker-ce/linux/debian"</span></span><br><span class="line">docker_debian_repo_gpgkey: <span class="string">"https://mirrors.aliyun.com/docker-ce/linux/debian/gpg"</span></span><br><span class="line">dockerproject_apt_repo_base_url: <span class="string">"https://mirrors.aliyun.com/docker-engine/apt/repo"</span></span><br><span class="line">dockerproject_apt_repo_gpgkey: <span class="string">"https://mirrors.aliyun.com/docker-engine/apt/gpg"</span></span><br><span class="line">docker_options: <span class="string">"--insecure-registry= --registry-mirror=https://registry.docker-cn.com --graph= "</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment">### 打印ansible命令</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"再kubespray根目录执行以下命令安装或重置："</span></span><br><span class="line"><span class="built_in">echo</span> ansible-playbook -i inventory/mycluster/hosts.ini --become --become-user=root cluster.yml</span><br><span class="line"><span class="built_in">echo</span> ansible-playbook -i inventory/mycluster/hosts.ini --become --become-user=root reset.yml</span><br></pre></td></tr></table></figure>
<p>inventory/mycluster/hosts.ini示例：</p>
<p>node1、node2是master调度节点，node1~node3是etcd节点，node3~node6是工作节点。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="section">[all]</span></span><br><span class="line">node1    ansible_host=192.168.100.79 ip=192.168.100.79</span><br><span class="line">node2    ansible_host=192.168.100.80 ip=192.168.100.80</span><br><span class="line">node3    ansible_host=192.168.100.81 ip=192.168.100.81</span><br><span class="line">node4    ansible_host=192.168.100.216 ip=192.168.100.216</span><br><span class="line">node5    ansible_host=192.168.100.217 ip=192.168.100.217</span><br><span class="line">node6    ansible_host=192.168.100.218 ip=192.168.100.218</span><br><span class="line"></span><br><span class="line"><span class="section">[kube-master]</span></span><br><span class="line">node1</span><br><span class="line">node2</span><br><span class="line"></span><br><span class="line"><span class="section">[etcd]</span></span><br><span class="line">node1</span><br><span class="line">node2</span><br><span class="line">node3</span><br><span class="line"></span><br><span class="line"><span class="section">[kube-node]</span></span><br><span class="line">node3</span><br><span class="line">node4</span><br><span class="line">node5</span><br><span class="line">node6</span><br><span class="line"></span><br><span class="line"><span class="section">[k8s-cluster:children]</span></span><br><span class="line">kube-master</span><br><span class="line">kube-node</span><br></pre></td></tr></table></figure>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>另找一个执行ansible的机器，并授权使其可以免密登录node1~node6：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh-keygen		          <span class="comment"># 这几条命令都会提示手动确认</span></span><br><span class="line">ssh-copy-id root@node1</span><br><span class="line">ssh-copy-id root@node2</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>执行安装：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 执行上述准备好的预处理脚本（对应v1.15.1版本）</span></span><br><span class="line">sh pre-install.sh</span><br><span class="line"><span class="comment"># 按上述修改好hosts.ini后，执行ansible编排任务，等待结束即可</span></span><br><span class="line">ansible-playbook -i inventory/mycluster/hosts.ini --become --become-user=root cluster.yml</span><br></pre></td></tr></table></figure>
<h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p>获取登录kubernetes-dashboard的token:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl get svc --all-namespaces | grep kubernetes-dashboard</span><br><span class="line">kubectl -n kube-system describe $(kubectl -n kube-system get secret -n kube-system -o name | grep namespace) | grep token</span><br></pre></td></tr></table></figure>
<p>未使用keepalived时，可通过其一master登录：<a href="https://192.168.100.79:6443/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/" rel="external nofollow noopener noreferrer" target="_blank">https://192.168.100.79:6443/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/</a></p>
<h2 id="keepalived配置示例"><a href="#keepalived配置示例" class="headerlink" title="keepalived配置示例"></a>keepalived配置示例</h2><p>node1 (master-1) 的/etc/keepalived/keepalived.conf：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   router_id LVS_DEVEL</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script check_haproxy &#123;</span><br><span class="line">    script "killall -0 haproxy"</span><br><span class="line">    interval 3</span><br><span class="line">    weight -2</span><br><span class="line">    fall 10</span><br><span class="line">    rise 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens32</span><br><span class="line">    virtual_router_id 78</span><br><span class="line">    priority 120</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass xxxxxxxxxxxxxxxx</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.100.78</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">        check_haproxy</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>node2 (master-2) 的/etc/keepalived/keepalived.conf：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   router_id LVS_DEVEL</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script check_haproxy &#123;</span><br><span class="line">    script "killall -0 haproxy"</span><br><span class="line">    interval 3</span><br><span class="line">    weight -2</span><br><span class="line">    fall 10</span><br><span class="line">    rise 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface ens32</span><br><span class="line">    virtual_router_id 78</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass xxxxxxxxxxxxxxxx</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.100.78</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">        check_haproxy</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>仅<code>state BACKUP</code>和<code>priority 100</code>两处不同。</p>
<hr>
<p><strong>补充（1.14.1）</strong></p>
<ul>
<li><p>修改了配置文件中的镜像地址</p>
<ul>
<li>inventory/mycluster/group_vars/k8s-cluster/k8s-cluster.yml</li>
<li>roles/download/defaults/main.yml</li>
</ul>
<p>大部分镜像可以改从registry.cn-hangzhou.aliyuncs.com/google_containers获取。</p>
</li>
</ul>
<ul>
<li><p>不能直接下载的软件</p>
<p>通过浏览器（已设置google代理）下载kubeadm和hyperkube，放置在内网文件服务器中。hyperkube和kubeadm包会被下载到所有k8s节点的/tmp/releases目录下。</p>
</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubeadm_download_url: https://storage.googleapis.com/kubernetes-release/release/v1.14.1/bin/linux/amd64/kubeadm</span></span><br><span class="line"><span class="comment"># hyperkube_download_url: https://storage.googleapis.com/kubernetes-release/release/v1.14.1/bin/linux/amd64/hyperkube</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>不能从Ali镜像库获取的镜像</p>
<ul>
<li>k8s.gcr.io/cluster-proportional-autoscaler-amd64:1.4.0</li>
<li>k8s.gcr.io/k8s-dns-node-cache:1.15.1</li>
</ul>
</li>
</ul>
<ul>
<li>执行</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br><span class="line"></span><br><span class="line">ansible-playbook -i inventory/mycluster/hosts.ini --become --become-user=root cluster.yml</span><br></pre></td></tr></table></figure>
<ul>
<li>如何清理</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ansible -i inventory/mycluster/hosts.ini all -m script -a <span class="string">'/opt/clean.sh'</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">ansible-playbook -i inventory/mycluster/hosts.ini --become --become-user=root reset.yml</span><br></pre></td></tr></table></figure>
<p>clean.sh:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">rm -rf /etc/kubernetes/</span><br><span class="line">rm -rf /var/lib/kubelet</span><br><span class="line">rm -rf /var/lib/etcd</span><br><span class="line">rm -rf /usr/<span class="built_in">local</span>/bin/kubectl</span><br><span class="line">rm -rf /etc/systemd/system/calico-node.service</span><br><span class="line">rm -rf /etc/systemd/system/kubelet.service</span><br><span class="line">systemctl stop etcd.service</span><br><span class="line">systemctl <span class="built_in">disable</span> etcd.service</span><br><span class="line">systemctl stop calico-node.service</span><br><span class="line">systemctl <span class="built_in">disable</span> calico-node.service</span><br><span class="line">docker stop $(docker ps -q)</span><br><span class="line">docker rm $(docker ps -a -q)</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>
<ul>
<li>安装完成后修改节点标签</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl label node node3 node-role.kubernetes.io/worker=<span class="string">""</span>  <span class="comment">#标记worker</span></span><br><span class="line"></span><br><span class="line">kubectl label node node3 node-role.kubernetes.io/node=<span class="string">""</span> <span class="comment">#标记node</span></span><br><span class="line"></span><br><span class="line">kubectl label node node3  <span class="string">"node-role.kubernetes.io/worker"</span>- <span class="comment"># 删除worker标记</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="Kubernetes-Dashboard"><a href="#Kubernetes-Dashboard" class="headerlink" title="Kubernetes Dashboard"></a>Kubernetes Dashboard</h3><ul>
<li><p>以NodePort方式暴露服务</p>
<p>修改代码，使用NodePort方式访问Dashboard。</p>
</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ./roles/kubernetes-apps/ansible/templates/dashboard.yml.j2</span></span><br><span class="line"><span class="comment"># ------------------- Dashboard Service ------------------- #</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8443</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span>    <span class="string">//添加这一行</span>   </span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line"><span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br></pre></td></tr></table></figure>
<ul>
<li>获取token</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl get svc --all-namespaces | grep kubernetes-dashboard</span><br><span class="line"></span><br><span class="line">kubectl -n kube-system describe $(kubectl -n kube-system get secret -n kube-system -o name | grep namespace) | grep token</span><br></pre></td></tr></table></figure>
<ul>
<li><p>非NodePort方式访问</p>
<p><a href="https://192.168.100.78:6443/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/" rel="external nofollow noopener noreferrer" target="_blank">https://192.168.100.78:6443/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/</a>（192.168.100.78是VIP或者某个master节点IP）</p>
</li>
</ul>
<hr>
<p><strong>后续操作</strong></p>
<p>以上完成的是带有kubernetes dashboard的初始环境的搭建，之后还要进行 替换Ingress、设置AD认证、安装管理工具等，此不涉及。</p>
]]></content>
      <categories>
        <category>K8s</category>
      </categories>
      <tags>
        <tag>K8s</tag>
      </tags>
  </entry>
  <entry>
    <title>通过Rancher初步创建K8s集群过程记录</title>
    <url>/deployment/k8s/rancher-k8s/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<p>集群架构参考图：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/rancher-k8s.assets/1551952435046.png" alt="1551952435046"></p>
<a id="more"></a>
<p>集群资源列表：</p>
<table>
<thead>
<tr>
<th>IP</th>
<th>role</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td>192.168.101.71</td>
<td>rancher server<br>k8s-master (etcd, control)</td>
<td>master节点<br><strong><em>rancher server</em></strong></td>
</tr>
<tr>
<td>192.168.101.72</td>
<td>k8s-master (etcd, control)</td>
<td>master节点</td>
</tr>
<tr>
<td>192.168.101.73</td>
<td>k8s-master (etcd, control)</td>
<td>master节点</td>
</tr>
<tr>
<td>192.168.101.74</td>
<td>k8s-node (worker)</td>
<td>worker节点（可被调度）</td>
</tr>
<tr>
<td>192.168.101.75</td>
<td>k8s-node (worker)</td>
<td>worker节点</td>
</tr>
<tr>
<td>192.168.101.76</td>
<td>k8s-node (worker)</td>
<td>worker节点</td>
</tr>
<tr>
<td>192.168.<strong><em>101.70</em></strong></td>
<td>VIP</td>
<td>虚拟 IP</td>
</tr>
</tbody>
</table>
<p>安装步骤：</p>
<ul>
<li>初始准备</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /etc/hosts</span></span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.101.71  b71-k8s-m01</span><br><span class="line">192.168.101.72  b72-k8s-m02</span><br><span class="line">192.168.101.73  b73-k8s-m03</span><br><span class="line">192.168.101.74  b74-k8s-c01</span><br><span class="line">192.168.101.75  b75-k8s-c02</span><br><span class="line">192.168.101.76  b76-k8s-c03</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭firewalld</span></span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 无swap分区，不涉及swapoff操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭selinux</span></span><br><span class="line">setenforce 0</span><br><span class="line">sed -i <span class="string">'/^SELINUX=/s/=.*$/=disabled/'</span> /etc/selinux/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装docker-ce 18.06</span></span><br><span class="line">wget -P /etc/yum.repos.d https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">yum install docker-ce-18.06.1.ce -y</span><br><span class="line">systemctl start docker.service</span><br><span class="line">systemctl <span class="built_in">enable</span> docker.service</span><br></pre></td></tr></table></figure>
<p>haproxy + keepalived 配置：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 对3个master节点：添加到文件/etc/sysctl.conf</span></span><br><span class="line">cat &lt;&lt;EOF &gt;&gt;/etc/sysctl.conf</span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line">net.ipv4.ip_nonlocal_bind = 1</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment">### 修改keepalived.conf</span></span><br><span class="line">cat &gt; /etc/keepalived/keepalived.conf &lt;&lt; EOF</span><br><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   router_id LVS_DEVEL</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script check_haproxy &#123;</span><br><span class="line">	script <span class="string">"killall -0 haproxy"</span></span><br><span class="line">	interval 3</span><br><span class="line">	weight -2</span><br><span class="line">	fall 10</span><br><span class="line">	rise 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">	state MASTER <span class="comment"># 另2个分别是BACKUP、BACKUP</span></span><br><span class="line">	interface ens192</span><br><span class="line">	virtual_router_id 51</span><br><span class="line">	priority 120 <span class="comment"># 优先级，另2个可以设置为100</span></span><br><span class="line">	advert_int 1</span><br><span class="line">	authentication &#123;</span><br><span class="line">		auth_type PASS</span><br><span class="line">		auth_pass 59144e4504f2b953e7b9</span><br><span class="line">	&#125;</span><br><span class="line">	virtual_ipaddress &#123;</span><br><span class="line">		192.168.101.70</span><br><span class="line">	&#125;</span><br><span class="line">	track_script &#123;</span><br><span class="line">		check_haproxy</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装killall</span></span><br><span class="line">yum install psmisc -y</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> keepalived.service</span><br><span class="line">systemctl start keepalived.service</span><br><span class="line">[root@B72-k8s-m02 haproxy]<span class="comment"># ip address show ens192</span></span><br><span class="line">2: ens192: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000</span><br><span class="line">    link/ether 00:50:56:85:8a:00 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.101.72/24 brd 192.168.101.255 scope global noprefixroute ens192</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet 192.168.101.70/32 scope global ens192</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::250:56ff:fe85:8a00/64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br><span class="line"><span class="comment">### 修改haproxy.cfg</span></span><br><span class="line">...</span><br><span class="line"><span class="comment"># main frontend which proxys to the backends</span></span><br><span class="line"><span class="comment">#---------------------------------------------------------------------</span></span><br><span class="line">frontend kubernetes-apiserver</span><br><span class="line">    mode                 tcp</span><br><span class="line">    <span class="built_in">bind</span>                 *:16443</span><br><span class="line">    option               tcplog</span><br><span class="line">    default_backend      kubernetes-apiserver</span><br><span class="line"></span><br><span class="line">backend kubernetes-apiserver</span><br><span class="line">    mode        tcp</span><br><span class="line">    balance     roundrobin</span><br><span class="line">    server  b71-k8s-m01 192.168.101.71:6443 check weight 1</span><br><span class="line">    server  b72-k8s-m02 192.168.101.72:6443 check weight 2</span><br><span class="line">    server  b73-k8s-m03 192.168.101.73:6443 check weight 2</span><br><span class="line"></span><br><span class="line">listen stats</span><br><span class="line">    <span class="built_in">bind</span>                 *:1080</span><br><span class="line">    stats auth           admin:password</span><br><span class="line">    stats refresh        5s</span><br><span class="line">    stats realm          HAProxy\ Statistics</span><br><span class="line">    stats uri            /admin?stats</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动haproxy</span></span><br><span class="line">systemctl <span class="built_in">enable</span> haproxy.service</span><br><span class="line">systemctl start haproxy.service</span><br></pre></td></tr></table></figure>
<p>需开放的端口见 <a href="https://rancher.com/docs/rancher/v2.x/en/installation/references/" rel="external nofollow noopener noreferrer" target="_blank">https://rancher.com/docs/rancher/v2.x/en/installation/references/</a>。</p>
<p>为了简便，关闭了防火墙。通过Rancher安装后，查看一下iptables规则：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@B71-k8s-m01 ~]<span class="comment"># iptables -L -n</span></span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination         </span><br><span class="line">KUBE-EXTERNAL-SERVICES  all  --  0.0.0.0/0            0.0.0.0/0            ctstate NEW </span><br><span class="line">KUBE-FIREWALL  all  --  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy DROP)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination         </span><br><span class="line">KUBE-FORWARD  all  --  0.0.0.0/0            0.0.0.0/0            </span><br><span class="line">DOCKER-USER  all  --  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<ul>
<li><p>安装rancher server</p>
<p>在节点101.71上执行：</p>
</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d --restart=unless-stopped -p 80:80 -p 443:443 rancher/rancher:stable</span><br></pre></td></tr></table></figure>
<ul>
<li><p>登录Rancher Web创建集群</p>
<p>URL: <a href="https://192.168.101.71/" rel="external nofollow noopener noreferrer" target="_blank">https://192.168.101.71/</a></p>
</li>
</ul>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/rancher-k8s.assets/1551953142393.png" alt="1551953142393"></p>
<p>​    添加master节点时，是按如下设置的：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/rancher-k8s.assets/1551840677589.png" alt="1551840677589"></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/rancher-k8s.assets/1551840771418.png" alt="1551840771418"></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/rancher-k8s.assets/1551840932234.png" alt="1551840932234"></p>
<p>​    复制命令在待添加的节点机器上执行，依次添加完3个master节点后如下，其中101.71是第二个添加的：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/rancher-k8s.assets/1551841031094.png" alt="1551841031094"></p>
<p>​    在机器数量足够的情况下，可将rancher server单独部署，此处是与K8s_master共用。经反复试验，添加master节点时，先添加101.72或101.73，<strong>不要首先添加rancher server所在节点101.71</strong>。否则，后续添加master时会出<strong>问题</strong>：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/rancher-k8s.assets/1551839742271.png" alt="1551839742271"></p>
<p>上图显示101.72一直处于Registering状态，不能添加进集群。</p>
<p>在添加节点异常时，先通过Web管理界面删除问题节点，然后在重新执行添加前，通过以下脚本清理一下待添加节点的环境：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 清理安装文件目录</span></span><br><span class="line">DLIST=<span class="string">"/var/lib/etcd /etc/kubernetes /etc/cni /opt/cni /var/lib/cni /var/run/calico /opt/rke"</span></span><br><span class="line"><span class="keyword">for</span> dir <span class="keyword">in</span> <span class="variable">$DLIST</span>; <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Removing <span class="variable">$dir</span>"</span></span><br><span class="line">  rm -rf <span class="variable">$dir</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 清理docker</span></span><br><span class="line">CLIST=$(docker ps -qa)</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"x"</span><span class="variable">$CLIST</span> == <span class="string">"x"</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"No containers exist - skipping container cleanup"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  docker stop -f <span class="variable">$CLIST</span> &amp;&amp; docker rm -f <span class="variable">$CLIST</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">ILIST=$(docker images -a -q)</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"x"</span><span class="variable">$ILIST</span> == <span class="string">"x"</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"No images exist - skipping image cleanup"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  docker rmi <span class="variable">$ILIST</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">VLIST=$(docker volume ls -q)</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"x"</span><span class="variable">$VLIST</span> == <span class="string">"x"</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"No volumes exist - skipping volume cleanup"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  docker volume rm -f <span class="variable">$VLIST</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">systemctl restart docker.service</span><br></pre></td></tr></table></figure>
<p>下图是添加完3个master和3个node后的主机界面：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/rancher-k8s.assets/1551844009517.png" alt="1551844009517"></p>
<ul>
<li>部署服务</li>
</ul>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/rancher-k8s.assets/1551844649598.png" alt="1551844649598"></p>
<p>测试部署5个jenkins实例：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/rancher-k8s.assets/1551856322207.png" alt="1551856322207"></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/rancher-k8s.assets/1551844947277.png" alt="1551844947277"></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/rancher-k8s.assets/1551845031997.png" alt="1551845031997"></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/rancher-k8s.assets/1551845141705.png" alt="1551845141705"></p>
<p>访问 Jenkins：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/rancher-k8s.assets/1551845268617.png" alt="1551845268617"></p>
<hr>
<ul>
<li>执行kubectl命令行</li>
</ul>
<p>通过Rancher Web界面来执行kubectl命令行：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/rancher-k8s.assets/1551845918415.png" alt="1551845918415"></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/rancher-k8s.assets/1551845411567.png" alt="1551845411567"></p>
<p>如果直接登录主机，找不到kubectl命令，需进入相关的容器</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/rancher-k8s.assets/1551845747894.png" alt="1551845747894"></p>
<ul>
<li>添加Dashboard</li>
</ul>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/rancher-k8s.assets/1551846399730.png" alt="1551846399730"></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/rancher-k8s.assets/1551846438286.png" alt="1551846438286"></p>
<p>找到kubernetes-dashboard，并部署（启动）</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/rancher-k8s.assets/1551846551235.png" alt="1551846551235"></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/rancher-k8s.assets/1551846635456.png" alt="1551846635456"></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/rancher-k8s.assets/1551953637260.png" alt="1551953637260"></p>
]]></content>
      <categories>
        <category>K8s</category>
      </categories>
      <tags>
        <tag>K8s</tag>
      </tags>
  </entry>
  <entry>
    <title>RKE安装K8s HA集群过程记录</title>
    <url>/deployment/k8s/rke-k8s-ha/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>ansible主机清单：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="section">[rke]</span></span><br><span class="line">rke ansible_host=192.168.100.228</span><br><span class="line"></span><br><span class="line"><span class="section">[k8s]</span></span><br><span class="line">master01 ansible_host=192.168.101.72</span><br><span class="line">master02 ansible_host=192.168.101.75</span><br><span class="line">master03 ansible_host=192.168.100.229</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>安装docker：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ansible-playbook roles/docker.yml</span><br></pre></td></tr></table></figure>
<p>使用ansible之前，需要分发密钥至各节点root用户。</p>
<p>创建rancher用户，并分发密钥：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ansible-playbook roles/key.yml</span><br></pre></td></tr></table></figure>
<p>安装rke、kubectl、helm工具：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># https://www.cnrancher.com/download/rke/rke_linux-amd64</span></span><br><span class="line">wget https://www.cnrancher.com/download/rke/rke_linux-amd64</span><br><span class="line">chmod +x rke_linux-amd64</span><br><span class="line">mv rke_linux-amd64 /usr/bin/rke</span><br><span class="line"></span><br><span class="line"><span class="comment"># https://www.cnrancher.com/download/kubectl/kubectl_amd64-linux</span></span><br><span class="line">wget https://www.cnrancher.com/download/kubectl/kubectl_amd64-linux</span><br><span class="line">chmod +x kubectl_amd64-linux</span><br><span class="line">mv kubectl_amd64-linux /usr/bin/kubectl</span><br><span class="line"></span><br><span class="line"><span class="comment"># https://www.cnrancher.com/download/helm/helm-linux.tar.gz</span></span><br><span class="line">wget https://storage.googleapis.com/kubernetes-helm/helm-v2.12.0-linux-amd64.tar.gz</span><br><span class="line">tar -xf helm-v2.12.0-linux-amd64.tar.gz</span><br><span class="line">mv linux-amd64/helm /usr/bin/helm</span><br><span class="line">mv linux-amd64/tiller /usr/bin/tiller</span><br><span class="line">rm -rf linux-amd64</span><br></pre></td></tr></table></figure>
<h3 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a>创建集群</h3><p>rancher-cluster.yml:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">nodes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">address:</span> <span class="number">192.168</span><span class="number">.101</span><span class="number">.72</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">rancher</span></span><br><span class="line">    <span class="attr">role:</span> <span class="string">[controlplane,worker,etcd]</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">address:</span> <span class="number">192.168</span><span class="number">.101</span><span class="number">.75</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">rancher</span></span><br><span class="line">    <span class="attr">role:</span> <span class="string">[controlplane,worker,etcd]</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">address:</span> <span class="number">192.168</span><span class="number">.100</span><span class="number">.229</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">rancher</span></span><br><span class="line">    <span class="attr">role:</span> <span class="string">[controlplane,etcd]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">etcd:</span></span><br><span class="line">    <span class="attr">snapshot:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">creation:</span> <span class="string">6h</span></span><br><span class="line">    <span class="attr">retention:</span> <span class="string">24h</span></span><br></pre></td></tr></table></figure>
<p>rke up:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rke up --config rancher-cluster.yml</span><br></pre></td></tr></table></figure>
<p>rke up后会生成kube_config_rancher-cluster.yml</p>
<p>设置kube_config环境变量（或者复制到~/.kube/config ）：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"export KUBECONFIG=/home/rancher/kube_config_rancher-cluster.yml"</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>
<h3 id="安装tiller"><a href="#安装tiller" class="headerlink" title="安装tiller"></a>安装tiller</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Helm在集群上安装tiller服务以管理charts. 由于RKE默认启用RBAC, 因此我们需要使用kubectl来创建一个serviceaccount，clusterrolebinding才能让tiller具有部署到集群的权限</span></span><br><span class="line"></span><br><span class="line">kubectl -n kube-system create serviceaccount tiller</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建ClusterRoleBinding以授予tiller帐户对集群的访问权限</span></span><br><span class="line">kubectl create clusterrolebinding tiller --clusterrole cluster-admin --serviceaccount=kube-system:tiller</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装Helm Server(Tiller)</span></span><br><span class="line">helm init --service-account tiller --tiller-image registry.cn-hangzhou.aliyuncs.com/google_containers/tiller:v2.12.0 --stable-repo-url https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts</span><br></pre></td></tr></table></figure>
<h3 id="安装cert-manager"><a href="#安装cert-manager" class="headerlink" title="安装cert-manager"></a>安装cert-manager</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">helm install stable/cert-manager \</span><br><span class="line">  --name cert-manager \</span><br><span class="line">  --namespace kube-system</span><br></pre></td></tr></table></figure>
<h3 id="安装rancher-web"><a href="#安装rancher-web" class="headerlink" title="安装rancher web"></a>安装rancher web</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用helm repo add命令添加Rancher chart仓库地址</span></span><br><span class="line">helm repo add rancher-stable https://releases.rancher.com/server-charts/stable</span><br><span class="line"></span><br><span class="line">helm install rancher-stable/rancher \</span><br><span class="line">  --name rancher \</span><br><span class="line">  --namespace cattle-system \</span><br><span class="line">  --<span class="built_in">set</span> hostname=xxx.com</span><br><span class="line"></span><br><span class="line">helm install rancher-stable/rancher --name rancher --namespace cattle-system --<span class="built_in">set</span> hostname=xxx.com</span><br></pre></td></tr></table></figure>
<p>如果不是通过DNS解析域名，而是通过本地hosts解析，可以通过给cattle-cluster-agent Pod和cattle-node-agent添加主机别名，让其可以正常通信，前提是IP地址可以互通。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl -n cattle-system patch deployments cattle-cluster-agent --patch <span class="string">'&#123;</span></span><br><span class="line"><span class="string">    "spec": &#123;</span></span><br><span class="line"><span class="string">        "template": &#123;</span></span><br><span class="line"><span class="string">            "spec": &#123;</span></span><br><span class="line"><span class="string">                "hostAliases": [</span></span><br><span class="line"><span class="string">                    &#123;</span></span><br><span class="line"><span class="string">                        "hostnames":</span></span><br><span class="line"><span class="string">                        [</span></span><br><span class="line"><span class="string">                            "xxx.com"</span></span><br><span class="line"><span class="string">                        ],</span></span><br><span class="line"><span class="string">                            "ip": "192.168.100.228"</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">                ]</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面这条命令可能报错：Error from server (NotFound): deployments.extensions "cattle-cluster-agent" not found，因为cattle-cluster-agent还没有创建成功</span></span><br><span class="line"></span><br><span class="line">kubectl -n cattle-system patch daemonsets cattle-node-agent --patch <span class="string">'&#123;</span></span><br><span class="line"><span class="string">    "spec": &#123;</span></span><br><span class="line"><span class="string">        "template": &#123;</span></span><br><span class="line"><span class="string">            "spec": &#123;</span></span><br><span class="line"><span class="string">                "hostAliases": [</span></span><br><span class="line"><span class="string">                    &#123;</span></span><br><span class="line"><span class="string">                        "hostnames":</span></span><br><span class="line"><span class="string">                        [</span></span><br><span class="line"><span class="string">                            "xxx.com"</span></span><br><span class="line"><span class="string">                        ],</span></span><br><span class="line"><span class="string">                            "ip": "192.168.100.228"</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">                ]</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure>
<h3 id="安装rancher-cli"><a href="#安装rancher-cli" class="headerlink" title="安装rancher cli"></a>安装rancher cli</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget https://www.cnrancher.com/download/cli/rancher-linux-amd64.tar.gz</span><br><span class="line">mkdir rancher-linux-amd64.tmp.d <span class="comment"># 临时目录</span></span><br><span class="line">tar -xf rancher-linux-amd64.tar.gz -C rancher-linux-amd64.tmp.d</span><br><span class="line">find rancher-linux-amd64.tmp.d -name <span class="string">'rancher'</span> -<span class="built_in">type</span> f | xargs -I &#123;&#125; mv &#123;&#125; /usr/bin/;</span><br><span class="line">rm -rf rancher-linux-amd64.tmp.d</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>K8s</category>
      </categories>
      <tags>
        <tag>K8s</tag>
      </tags>
  </entry>
  <entry>
    <title>Consul ACL</title>
    <url>/monitoring/consul/consul-acl/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="systemd-service"><a href="#systemd-service" class="headerlink" title="systemd service"></a>systemd service</h2><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=consul agent</span><br><span class="line"><span class="attr">Requires</span>=network-<span class="literal">on</span>line.target</span><br><span class="line"><span class="attr">After</span>=network-<span class="literal">on</span>line.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">EnvironmentFile</span>=-/etc/sysconfig/consul</span><br><span class="line"><span class="attr">Environment</span>=GOMAXPROCS=<span class="number">2</span></span><br><span class="line"><span class="attr">Restart</span>=<span class="literal">on</span>-failure</span><br><span class="line"><span class="attr">ExecStart</span>=/usr/local/bin/consul agent -config-dir=/opt/consul/conf -rejoin</span><br><span class="line"><span class="attr">ExecReload</span>=/bin/kill -HUP <span class="variable">$MAINPID</span></span><br><span class="line"><span class="attr">KillSignal</span>=SIGTERM</span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<hr>
<h2 id="acl-json"><a href="#acl-json" class="headerlink" title="acl.json"></a>acl.json</h2><p>启用ACL，需在配置加载目录下添加acl配置文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"acl_datacenter"</span>: <span class="string">"dc1"</span>,</span><br><span class="line">  <span class="attr">"acl_master_token"</span>: <span class="string">"xxxxxxxxx"</span>,</span><br><span class="line">  <span class="attr">"acl_default_policy"</span>: <span class="string">"deny"</span>,</span><br><span class="line">  <span class="attr">"acl_down_policy"</span>: <span class="string">"extend-cache"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/consul-acl.assets/1562555213001.png" alt="1562555213001"></p>
<h2 id="deregitster"><a href="#deregitster" class="headerlink" title="deregitster"></a>deregitster</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl  -X PUT http://192.168.100.140:8500/v1/agent/service/deregister/&lt;id&gt; -H <span class="string">"X-Consul-Token:xxx"</span></span><br></pre></td></tr></table></figure>
<h2 id="register"><a href="#register" class="headerlink" title="register"></a>register</h2><ul>
<li>仅node check</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl http://10.1.100.57:8500/v1/agent/service/register -X PUT -i -H <span class="string">"Content-Type:application/json"</span> -H <span class="string">"X-Consul-Token:xxx"</span> -d <span class="string">'&#123;</span></span><br><span class="line"><span class="string">        "ID": "test.swms.api3",</span></span><br><span class="line"><span class="string">        "Name": "test-swms-api3",</span></span><br><span class="line"><span class="string">        "Tags": ["test", "swms"],</span></span><br><span class="line"><span class="string">        "Address": "192.168.101.35",</span></span><br><span class="line"><span class="string">        "Port": 9003,</span></span><br><span class="line"><span class="string">        "Meta": &#123;</span></span><br><span class="line"><span class="string">            "version": "1.0"</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        "EnableTagOverride": false</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure>
<ul>
<li>node check + service check</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl http://10.1.100.57:8500/v1/agent/service/register -X PUT -i -H <span class="string">"Content-Type:application/json"</span> -H <span class="string">"X-Consul-Token:xxxxxxxxxxx"</span> -d <span class="string">'&#123;</span></span><br><span class="line"><span class="string">	"ID": "test.swms.api2",</span></span><br><span class="line"><span class="string">	"Name": "test-swms-api2",</span></span><br><span class="line"><span class="string">	"Tags": ["test", "swms"],</span></span><br><span class="line"><span class="string">	"Address": "192.168.101.35",</span></span><br><span class="line"><span class="string">	"Port": 9003,</span></span><br><span class="line"><span class="string">	"Check": &#123;</span></span><br><span class="line"><span class="string">		"DeregisterCriticalServiceAfter": "90m",</span></span><br><span class="line"><span class="string">		"Args": [],</span></span><br><span class="line"><span class="string">		"HTTP": "http://192.168.101.35:9003/hc",</span></span><br><span class="line"><span class="string">		"Interval": "15s"</span></span><br><span class="line"><span class="string">	&#125;,</span></span><br><span class="line"><span class="string">	"Meta": &#123;</span></span><br><span class="line"><span class="string">		"version": "1.0"</span></span><br><span class="line"><span class="string">	&#125;,</span></span><br><span class="line"><span class="string">	"EnableTagOverride": false</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure>
<p><em>Name不能包含小数点</em></p>
<hr>
<h2 id="创建一个agent-token"><a href="#创建一个agent-token" class="headerlink" title="创建一个agent token"></a>创建一个agent token</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl \</span><br><span class="line">    --request PUT \</span><br><span class="line">    --header <span class="string">"X-Consul-Token: xxxxxxxxxxxxxxxx"</span> \</span><br><span class="line">    --data \</span><br><span class="line"><span class="string">'&#123;</span></span><br><span class="line"><span class="string">  "Name": "Agent Token",</span></span><br><span class="line"><span class="string">  "Type": "client",</span></span><br><span class="line"><span class="string">  "Rules": "node \"\" &#123; policy = \"write\" &#125; service \"\" &#123; policy = \"read\" &#125;"</span></span><br><span class="line"><span class="string">&#125;'</span> http://127.0.0.1:8500/v1/acl/create</span><br></pre></td></tr></table></figure>
<p>Type: client</p>
<p>WebUI token的policy可以设置为只读:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">service_prefix <span class="string">""</span> &#123;</span><br><span class="line">  policy = <span class="string">"read"</span></span><br><span class="line">  &#125;</span><br><span class="line">key_prefix <span class="string">""</span> &#123;</span><br><span class="line">  policy = <span class="string">"read"</span></span><br><span class="line">  &#125;</span><br><span class="line">node_prefix <span class="string">""</span> &#123;</span><br><span class="line">  policy = <span class="string">"read"</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>示例：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM_0_4_centos ins_exporter]<span class="comment"># cat deReg.sh </span></span><br><span class="line">curl -i --request PUT \</span><br><span class="line">     --header <span class="string">"X-Consul-Token: xxxxxxxxxxxxxxxxxx"</span> \</span><br><span class="line">     http://10.1.100.57:8500/v1/agent/service/deregister/<span class="variable">$1</span></span><br><span class="line">     </span><br><span class="line">[root@VM_0_4_centos ins_exporter]<span class="comment"># sh deReg.sh id-xxl-vm04</span></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">Date: Sun, 07 Jul 2019 08:45:42 GMT</span><br><span class="line">Content-Length: 0</span><br><span class="line"></span><br><span class="line">[root@VM_0_4_centos ins_exporter]<span class="comment"># cat regXXL.sh </span></span><br><span class="line">curl http://10.1.100.57:8500/v1/agent/service/register -X PUT -i -H <span class="string">"Content-Type:application/json"</span> \</span><br><span class="line"> --header <span class="string">"X-Consul-Token: xxxxxxxxxxxxxxxxxx"</span> -d <span class="string">'&#123;</span></span><br><span class="line"><span class="string">    "ID": "id-xxl-vm04",</span></span><br><span class="line"><span class="string">    "Name": "xxl",</span></span><br><span class="line"><span class="string">    "Tags": ["xxl-job", "http"],</span></span><br><span class="line"><span class="string">    "Address": "192.168.100.150",</span></span><br><span class="line"><span class="string">    "Port": 9977,</span></span><br><span class="line"><span class="string">    "Check": &#123;</span></span><br><span class="line"><span class="string">        "DeregisterCriticalServiceAfter": "90m",</span></span><br><span class="line"><span class="string">        "HTTP": "http://baidu.com",</span></span><br><span class="line"><span class="string">        "Interval": "15s"</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    "Meta": &#123;</span></span><br><span class="line"><span class="string">        "version": "1.0",</span></span><br><span class="line"><span class="string">        "type": "app",</span></span><br><span class="line"><span class="string">        "hostname": "vm03"</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    "EnableTagOverride": false</span></span><br><span class="line"><span class="string">&#125;'</span></span><br><span class="line"></span><br><span class="line">[root@VM_0_4_centos ins_exporter]<span class="comment"># sh regXXL.sh </span></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">Date: Sun, 07 Jul 2019 08:47:47 GMT</span><br><span class="line">Content-Length: 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不带token被禁止</span></span><br><span class="line">[root@VM_0_4_centos ins_exporter]<span class="comment"># curl -i -X PUT http://10.1.100.57:8500/v1/agent/service/deregister/id-xxl-vm04</span></span><br><span class="line">HTTP/1.1 403 Forbidden</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">Date: Sun, 07 Jul 2019 08:48:54 GMT</span><br><span class="line">Content-Length: 17</span><br><span class="line">Content-Type: text/plain; charset=utf-8</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Consul</category>
      </categories>
      <tags>
        <tag>Consul</tag>
      </tags>
  </entry>
  <entry>
    <title>Consul-template</title>
    <url>/monitoring/consul/consul-template/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="安装consul"><a href="#安装consul" class="headerlink" title="安装consul"></a>安装consul</h2><p>见 <a href="/monitoring/consul/my-nginx-consul">consul</a></p>
<h2 id="安装consul-template"><a href="#安装consul-template" class="headerlink" title="安装consul-template"></a>安装consul-template</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget https://releases.hashicorp.com/consul-template/0.20.0/consul-template_0.20.0_linux_amd64.tgz</span><br><span class="line">tar -xf consul-template_0.20.0_linux_amd64.tgz</span><br><span class="line">mv consul-template /usr/bin</span><br><span class="line">chmod a+x /usr/bin/consul-template</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="注册服务"><a href="#注册服务" class="headerlink" title="注册服务"></a>注册服务</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl http://192.168.100.140:8500/v1/agent/service/register -X PUT -i -H <span class="string">"Content-Type:application/json"</span> -d <span class="string">'&#123;</span></span><br><span class="line"><span class="string">	"ID": "test.zlz.01",</span></span><br><span class="line"><span class="string">	"Name": "test_zlz",</span></span><br><span class="line"><span class="string">	"Tags": ["zlz"],</span></span><br><span class="line"><span class="string">	"Address": "192.168.101.35",</span></span><br><span class="line"><span class="string">	"Port": 9003,</span></span><br><span class="line"><span class="string">	"Check": &#123;</span></span><br><span class="line"><span class="string">		"DeregisterCriticalServiceAfter": "90m",</span></span><br><span class="line"><span class="string">		"Args": [],</span></span><br><span class="line"><span class="string">		"HTTP": "http://192.168.101.35:9003/hc",</span></span><br><span class="line"><span class="string">		"Interval": "15s"</span></span><br><span class="line"><span class="string">	&#125;,</span></span><br><span class="line"><span class="string">	"Meta": &#123;</span></span><br><span class="line"><span class="string">		"version": "1.0"</span></span><br><span class="line"><span class="string">	&#125;,</span></span><br><span class="line"><span class="string">	"EnableTagOverride": false</span></span><br><span class="line"><span class="string">&#125;'</span></span><br><span class="line"></span><br><span class="line">curl http://192.168.100.140:8500/v1/agent/service/register -X PUT -i -H <span class="string">"Content-Type:application/json"</span> -d <span class="string">'&#123;</span></span><br><span class="line"><span class="string">	"ID": "test.zlz.02",</span></span><br><span class="line"><span class="string">	"Name": "test_zlz",</span></span><br><span class="line"><span class="string">	"Tags": ["zlz"],</span></span><br><span class="line"><span class="string">	"Address": "192.168.101.36",</span></span><br><span class="line"><span class="string">	"Port": 9003,</span></span><br><span class="line"><span class="string">	"Check": &#123;</span></span><br><span class="line"><span class="string">		"DeregisterCriticalServiceAfter": "90m",</span></span><br><span class="line"><span class="string">		"Args": [],</span></span><br><span class="line"><span class="string">		"HTTP": "http://192.168.101.36:9003/hc",</span></span><br><span class="line"><span class="string">		"Interval": "15s"</span></span><br><span class="line"><span class="string">	&#125;,</span></span><br><span class="line"><span class="string">	"Meta": &#123;</span></span><br><span class="line"><span class="string">		"version": "1.0"</span></span><br><span class="line"><span class="string">	&#125;,</span></span><br><span class="line"><span class="string">	"EnableTagOverride": false</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure>
<h2 id="编写NginX配置模板"><a href="#编写NginX配置模板" class="headerlink" title="编写NginX配置模板"></a>编写NginX配置模板</h2><p>nginx.conf.ctmpl：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;&#123;range services -&#125;&#125;</span><br><span class="line">&#123;&#123;$name := .Name&#125;&#125;</span><br><span class="line">&#123;&#123;$service := service .Name&#125;&#125;</span><br><span class="line">&#123;&#123;if in .Tags "zlz"&#125;&#125;</span><br><span class="line">upstream &#123;&#123;$name&#125;&#125; &#123;</span><br><span class="line">    &#123;&#123;range $service&#125;&#125;server &#123;&#123;.Address&#125;&#125;:&#123;&#123;.Port&#125;&#125;;</span><br><span class="line">    &#123;&#123;end&#125;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;- range services -&#125;&#125;</span><br><span class="line">&#123;&#123;$name := .Name&#125;&#125;</span><br><span class="line">&#123;&#123;if in .Tags "zlz"&#125;&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name	xxx.xxx;</span><br><span class="line">    root	html;</span><br><span class="line">    index	index.html index.htm;</span><br><span class="line">    </span><br><span class="line">    access_log	/var/log/nginx/&#123;&#123;$name&#125;&#125;_access.log	main;</span><br><span class="line">    </span><br><span class="line">    location / &#123;</span><br><span class="line">    proxy_pass http://&#123;&#123;$name&#125;&#125;;</span><br><span class="line">    proxy_redirect		off;</span><br><span class="line">    proxy_set_header    Host        	$host;</span><br><span class="line">    proxy_set_header    X-Real-IP   	$remote_addr;</span><br><span class="line">    proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    error_page  500 502 503 504 /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">    root	/usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="编写consul-template配置文件"><a href="#编写consul-template配置文件" class="headerlink" title="编写consul-template配置文件"></a>编写consul-template配置文件</h2><p>nginx.hcl：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">consul &#123;</span><br><span class="line">    address = "192.168.100.150:8500"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template &#123;</span><br><span class="line">    source = "nginx.conf.ctmpl"</span><br><span class="line">    destination = "/etc/nginx/conf.d/default.conf"</span><br><span class="line">    command = "service nginx reload"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="测试consul-template"><a href="#测试consul-template" class="headerlink" title="测试consul-template"></a>测试consul-template</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">consul-template -config nginx.hcl <span class="comment"># 会生成/etc/nginx/conf.d/default.conf</span></span><br><span class="line"><span class="comment"># [control] + c</span></span><br></pre></td></tr></table></figure>
<h2 id="测试自动更新NginX配置"><a href="#测试自动更新NginX配置" class="headerlink" title="测试自动更新NginX配置"></a>测试自动更新NginX配置</h2><ol>
<li>运行consul-template服务</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nohup consul-template -config nginx.hcl &gt;/var/<span class="built_in">log</span>/consul-template.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><p>模拟健康状态异常时自动更新NginX配置</p>
<p>比如，修改<code>&quot;HTTP&quot;: &quot;http://192.168.101.35:9003/hc&quot;</code>为<code>&quot;HTTP&quot;: &quot;http://192.168.101.35:9003/hcc&quot;</code>，重新注册该服务后test.zlz.01的服务健康状态变为不正常。consul-template能自动检测到异常，并重新生成/etc/nginx/conf.d/default.conf。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Consul</category>
      </categories>
      <tags>
        <tag>Consul</tag>
      </tags>
  </entry>
  <entry>
    <title>Consul介绍</title>
    <url>/monitoring/consul/consul/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<blockquote>
<p><a href="https://www.consul.io/docs/internals/architecture.html" rel="external nofollow noopener noreferrer" target="_blank"><strong>Consul</strong></a> 是一个分布式服务发现与配置的工具。与其他分布式服务注册与发现的方案，Consul的方案更“一站式”，内置了服务注册与发现框架、分布一致性协议实现（不需要ZooKeeper）、健康检查、K/V存储、多数据中心方案。</p>
</blockquote>
<a id="more"></a>
<p><img src="https://www.consul.io/assets/images/consul-arch-420ce04a.png" alt="Consul Architecture"></p>
<ul>
<li>注册服务（Register Service）</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl http://&lt;your-consul-url&gt;/v1/agent/service/register -X PUT -i -H <span class="string">"Content-Type:application/json"</span> -d <span class="string">'&#123;</span></span><br><span class="line"><span class="string">    "Name": "test-name", </span></span><br><span class="line"><span class="string">    "Tags": [</span></span><br><span class="line"><span class="string">        "test-tag"</span></span><br><span class="line"><span class="string">    ], </span></span><br><span class="line"><span class="string">    "EnableTagOverride": false, </span></span><br><span class="line"><span class="string">    "ID": "test-id", </span></span><br><span class="line"><span class="string">    "Meta": &#123;"version": "1.0"&#125;, </span></span><br><span class="line"><span class="string">    "Address": "192.168.100.150", </span></span><br><span class="line"><span class="string">    "Port": 8080, </span></span><br><span class="line"><span class="string">    "Check": &#123;</span></span><br><span class="line"><span class="string">        "DeregisterCriticalServiceAfter": "90m", </span></span><br><span class="line"><span class="string">        "Args": [], </span></span><br><span class="line"><span class="string">        "HTTP": "http://192.168.100.150:8080/", </span></span><br><span class="line"><span class="string">        "Interval": "15s"</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure>
<ul>
<li>注销服务（Deregister Service）</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -X PUT http://&lt;your-consul-url&gt;/v1/agent/service/deregister/<span class="built_in">test</span>-id</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Consul</category>
      </categories>
      <tags>
        <tag>Consul</tag>
      </tags>
  </entry>
  <entry>
    <title>构建nginx-consul-template</title>
    <url>/monitoring/consul/my-nginx-consul/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">|-- docker-compose.yml</span><br><span class="line">|-- Dockerfile</span><br><span class="line">|-- files</span><br><span class="line">|   |-- consul-template_0.20.0_linux_amd64.zip</span><br><span class="line">|   |-- nginx.conf</span><br><span class="line">|   |-- nginx.conf.ctmpl</span><br><span class="line">|   `-- nginx.sh</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>Dockerfile:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">FROM nginx:alpine</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># RUN apk update &amp;&amp; \</span></span><br><span class="line">RUN apk add --no-cache unzip</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ENV CONSUL_TEMPLATE_VERSION 0.20.0</span><br><span class="line">ENV PACKAGE consul-template_0.20.0_linux_amd64.zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># ADD https://releases.hashicorp.com/consul-template/$&#123;CONSUL_TEMPLATE_VERSION&#125;/consul-template_$&#123;CONSUL_TEMPLATE_VERSION&#125;_linux_amd64.zip /tmp/consul-template.zip</span></span><br><span class="line"></span><br><span class="line">ADD files/nginx.conf files/nginx.conf.ctmpl files/nginx.sh files/<span class="variable">$&#123;PACKAGE&#125;</span> /etc/nginx/</span><br><span class="line"></span><br><span class="line">RUN unzip /etc/nginx/<span class="variable">$&#123;PACKAGE&#125;</span> -d /usr/bin &amp;&amp; \</span><br><span class="line">    chmod +x /usr/bin/consul-template &amp;&amp; \</span><br><span class="line">    rm -f /etc/nginx/<span class="variable">$&#123;PACKAGE&#125;</span> &amp;&amp; \</span><br><span class="line">    chmod +x /etc/nginx/nginx.sh &amp;&amp; \</span><br><span class="line">    apk del unzip</span><br><span class="line"></span><br><span class="line">WORKDIR /etc/nginx</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [<span class="string">"/usr/bin/consul-template"</span>]</span><br></pre></td></tr></table></figure>
<p>nginx.sh:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> nginx -t &gt;/dev/null; <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">if</span> [ -s /var/run/nginx.pid ]; <span class="keyword">then</span></span><br><span class="line">        nginx -s reload</span><br><span class="line">        <span class="keyword">if</span> [ $? != 0 ]; <span class="keyword">then</span></span><br><span class="line">            rm -f /var/run/nginx.pid</span><br><span class="line">            nginx -c /etc/nginx/nginx.conf</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        nginx -c /etc/nginx/nginx.conf</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>修改nginx.conf:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">http &#123;</span><br><span class="line">	server_names_hash_bucket_size 128;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<p>nginx.conf.ctmpl:</p>
<p>含http标签的会被选择</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;range services&#125;&#125;</span><br><span class="line">&#123;&#123;$name := .Name&#125;&#125;</span><br><span class="line">&#123;&#123;$service := service .Name&#125;&#125;</span><br><span class="line">&#123;&#123;if in .Tags &quot;http&quot;&#125;&#125;</span><br><span class="line">upstream &#123;&#123;$name&#125;&#125; &#123;</span><br><span class="line">    &#123;&#123;range $service&#125;&#125;server &#123;&#123;.Address&#125;&#125;:&#123;&#123;.Port&#125;&#125;;</span><br><span class="line">    &#123;&#123;end&#125;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;range services&#125;&#125;</span><br><span class="line">&#123;&#123;$name := .Name&#125;&#125;</span><br><span class="line">&#123;&#123;if in .Tags &quot;http&quot;&#125;&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name &#123;&#123;$name&#125;&#125;.&#123;&#123;env &quot;HOST_TYPE&quot;&#125;&#125;.keep.com;</span><br><span class="line">    server_name &#123;&#123;$name&#125;&#125;.keep.com;</span><br><span class="line">    root    html;</span><br><span class="line">    index    index.html index.htm;</span><br><span class="line">    </span><br><span class="line">    access_log    /var/log/nginx/&#123;&#123;$name&#125;&#125;_access.log    main;</span><br><span class="line">    </span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://&#123;&#123;$name&#125;&#125;;</span><br><span class="line">        proxy_redirect      off;</span><br><span class="line">        proxy_set_header    Host            $host;</span><br><span class="line">        proxy_set_header    X-Real-IP       $remote_addr;</span><br><span class="line">        proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    error_page  500 502 503 504 /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root    /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>docker-compose.yml:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">consul:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">consul</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">consul</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">SERVICE_8500_NAME:</span> <span class="string">consul</span></span><br><span class="line">      <span class="attr">SERVICE_8500_TAGS:</span> <span class="string">"consul,http"</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8400</span><span class="string">:8400</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8500</span><span class="string">:8500</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8600</span><span class="string">:53/udp</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">agent</span> <span class="string">-server</span> <span class="string">-client=0.0.0.0</span> <span class="string">-dev</span> <span class="string">-node=node0</span> <span class="string">-bootstrap-expect=1</span> <span class="string">-data-dir=/tmp/consul</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">registrator:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">gliderlabs/registrator</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">consul</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/tmp/docker.sock</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">-internal</span> <span class="string">consul://consul:8500</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">nginx-consul:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">my-nginx-consul:alpine</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">consul</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">registrator</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">80</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./files/nginx.conf.ctmpl:/etc/nginx/nginx.conf.ctmpl</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">HOST_TYPE:</span> <span class="string">$&#123;HOST_TYPE&#125;</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">-consul-addr=consul:8500</span> <span class="string">-wait=3s</span> <span class="string">-template</span> <span class="string">/etc/nginx/nginx.conf.ctmpl:/etc/nginx/conf.d/app.conf:/etc/nginx/nginx.sh</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Consul</category>
      </categories>
      <tags>
        <tag>Consul</tag>
      </tags>
  </entry>
  <entry>
    <title>基于NginX + Consul + Registrator + Consul-Template自动服务发现和负载均衡</title>
    <url>/monitoring/consul/nginx-consul-registrator/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<blockquote>
<p>通过Docker，可以很方便地将Consul、Consul Template、Registrator和Nginx组装成一个可扩展的、高质量、高可用的服务架构体系，在添加和移除服务时不需要重写任何配置，也不需要重启任何服务，从而降低运维成本。</p>
</blockquote>
<a id="more"></a>
<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>01.</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/1556875370359.png" alt="1556875370359"></p>
<p>02.</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/1556875405475.png" alt="1556875405475"></p>
<hr>
<h3 id="Configure-files"><a href="#Configure-files" class="headerlink" title="Configure files"></a>Configure files</h3><p>docker-compose.yml:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">consul:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">consul</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8400</span><span class="string">:8400</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8500</span><span class="string">:8500</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8600</span><span class="string">:53/udp</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">agent</span> <span class="string">-server</span> <span class="string">-client=0.0.0.0</span> <span class="string">-dev</span> <span class="string">-node=node0</span> <span class="string">-bootstrap-expect=1</span> <span class="string">-data-dir=/tmp/consul</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">SERVICE_IGNORE:</span> <span class="string">'true'</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">registrator:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">gliderlabs/registrator</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">consul</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/tmp/docker.sock</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span></span><br><span class="line"><span class="comment">#    command: -internal consul://consul:8500 # err</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">-internal</span> <span class="string">consul://127.0.0.1:8500</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">nginx-consul:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx-consul:v0.3.2</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">consul</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">registrator</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">80</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">-consul-addr=127.0.0.1:8500</span> <span class="string">-wait=5s</span> <span class="string">-template</span> <span class="string">/etc/nginx/nginx.conf.ctmpl:/etc/nginx/conf.d/app.conf:/etc/nginx/nginx.sh</span></span><br></pre></td></tr></table></figure>
<p>nginx-consul-template Dockerfile:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">FROM nginx</span><br><span class="line"> </span><br><span class="line">RUN apt-get update &amp;&amp; \</span><br><span class="line">    apt-get install --no-install-recommends --no-install-suggests -y unzip &amp;&amp; \</span><br><span class="line">    rm -r /var/lib/apt/lists/*</span><br><span class="line"></span><br><span class="line">ENV CONSUL_TEMPLATE_VERSION 0.20.0</span><br><span class="line"></span><br><span class="line">ADD https://releases.hashicorp.com/consul-template/<span class="variable">$&#123;CONSUL_TEMPLATE_VERSION&#125;</span>/consul-template_<span class="variable">$&#123;CONSUL_TEMPLATE_VERSION&#125;</span>_linux_amd64.zip /tmp/consul-template.zip</span><br><span class="line"></span><br><span class="line">ADD nginx.conf.ctmpl nginx.sh /etc/nginx/</span><br><span class="line"></span><br><span class="line">RUN unzip /tmp/consul-template.zip -d /usr/bin &amp;&amp; \</span><br><span class="line">    chmod +x /usr/bin/consul-template &amp;&amp; \</span><br><span class="line">    rm -f /tmp/consul-template.zip &amp;&amp; \</span><br><span class="line">    chmod +x /etc/nginx/nginx.sh</span><br><span class="line"></span><br><span class="line">WORKDIR /etc/nginx</span><br><span class="line"><span class="comment"># CMD ["nginx", "-g", "daemon off;", "&amp;"]</span></span><br><span class="line">ENTRYPOINT [<span class="string">"/usr/bin/consul-template"</span>]</span><br></pre></td></tr></table></figure>
<p>nginx configure template:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;range services&#125;&#125;</span><br><span class="line">&#123;&#123;$name := .Name&#125;&#125;</span><br><span class="line">&#123;&#123;$service := service .Name&#125;&#125;</span><br><span class="line">&#123;&#123;if in .Tags &quot;http&quot;&#125;&#125;</span><br><span class="line">upstream &#123;&#123;$name&#125;&#125; &#123;</span><br><span class="line">    &#123;&#123;range $service&#125;&#125;server &#123;&#123;.Address&#125;&#125;:&#123;&#123;.Port&#125;&#125;;</span><br><span class="line">    &#123;&#123;end&#125;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;range services&#125;&#125;</span><br><span class="line">&#123;&#123;$name := .Name&#125;&#125;</span><br><span class="line">&#123;&#123;if in .Tags &quot;http&quot;&#125;&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name	&#123;&#123;$name&#125;&#125;.xxx.com;</span><br><span class="line">    root	html;</span><br><span class="line">    index	index.html index.htm;</span><br><span class="line">    </span><br><span class="line">    access_log	/var/log/nginx/&#123;&#123;$name&#125;&#125;_access.log	main;</span><br><span class="line">    </span><br><span class="line">    location / &#123;</span><br><span class="line">    proxy_pass http://&#123;&#123;$name&#125;&#125;;</span><br><span class="line">    proxy_redirect		off;</span><br><span class="line">    proxy_set_header    Host        	$host;</span><br><span class="line">    proxy_set_header    X-Real-IP   	$remote_addr;</span><br><span class="line">    proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    error_page  500 502 503 504 /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">    root	/usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>nginx.sh:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> nginx -t&gt;/dev/null; <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">if</span> [[ -s /var/run/nginx.pid ]]; <span class="keyword">then</span></span><br><span class="line">        nginx -s reload</span><br><span class="line">        <span class="keyword">if</span> [[ $? != 0 ]]; <span class="keyword">then</span></span><br><span class="line">            rm -f /var/run/nginx.pid</span><br><span class="line">            nginx -c /etc/nginx/nginx.conf</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        nginx -c /etc/nginx/nginx.conf</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>pma docker-compose.yml:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pma:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">phpmyadmin/phpmyadmin:4.7.3-1</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">SERVICE_NAME:</span> <span class="string">pma01</span></span><br><span class="line">      <span class="attr">SERVICE_TAGS:</span> <span class="string">"http,phpmyadmin"</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="How-to-test"><a href="#How-to-test" class="headerlink" title="How to test"></a>How to test</h3><ul>
<li>run pma</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br><span class="line">docker-compose scale pma=3</span><br><span class="line">docker-compose scale pma=1</span><br></pre></td></tr></table></figure>
<ul>
<li>start nginx-consul</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Consul</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Consul</tag>
      </tags>
  </entry>
  <entry>
    <title>Alertmanager介绍</title>
    <url>/monitoring/prometheus/alertmanager/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/alertmanager.assets/prometheus-alert-artich.png" alt="img"></p>
<a id="more"></a>
<blockquote>
<p> Alertmanager作为一个独立的组件，负责接收并处理来自Prometheus Server(也可以是其它的客户端程序)的告警信息。Alertmanager可以对这些告警信息进行进一步的处理，比如当接收到大量重复告警时能够消除重复的告警信息，同时对告警信息进行分组并且路由到正确的通知方，Prometheus内置了对邮件，Slack等多种通知方式的支持，同时还支持与Webhook的集成，以支持更多定制化的场景。</p>
</blockquote>
]]></content>
      <categories>
        <category>监控</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>Grafana使用记录</title>
    <url>/monitoring/prometheus/grafana-intro/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<blockquote>
<p>系统：CentOS 7.5</p>
<p>软件版本：通过docker安装最新版本</p>
</blockquote>
<a id="more"></a>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>官网：<a href="https://grafana.com/grafana" rel="external nofollow noopener noreferrer" target="_blank">https://grafana.com/grafana</a></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/grafana-intro.assets/1552441557000.png" alt="1552441557000"></p>
<blockquote>
<p>Grafana是一个跨平台、开源的指标度量分析和可视化工具，提供了强大和优雅的方式去创建、共享、浏览数据。Grafana非常适于和时间序列数据库结合展示数据，如<a href="http://docs.grafana.org/features/datasources/graphite/" rel="external nofollow noopener noreferrer" target="_blank">Graphite</a>, <a href="http://docs.grafana.org/features/datasources/influxdb/" rel="external nofollow noopener noreferrer" target="_blank">InfluxDB</a>, <a href="http://docs.grafana.org/features/datasources/opentsdb/" rel="external nofollow noopener noreferrer" target="_blank">OpenTSDB</a>, <a href="http://docs.grafana.org/features/datasources/prometheus/" rel="external nofollow noopener noreferrer" target="_blank">Prometheus</a>。</p>
</blockquote>
<hr>
<h3 id="快速安装"><a href="#快速安装" class="headerlink" title="快速安装"></a>快速安装</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">docker pull grafana/grafana</span><br><span class="line"><span class="comment"># 运行grafana（admin登录密码为admin）</span></span><br><span class="line">docker run -d -i -p 3000:3000 \</span><br><span class="line">-e <span class="string">"GF_SERVER_ROOT_URL=http://grafana.server.name"</span> \</span><br><span class="line">-e <span class="string">"GF_SECURITY_ADMIN_PASSWORD=admin"</span> \</span><br><span class="line">--net=host \</span><br><span class="line">grafana/grafana</span><br></pre></td></tr></table></figure>
<p>在192.168.100.150上执行，通过浏览器访问：<a href="http://192.168.100.150:3000" rel="external nofollow noopener noreferrer" target="_blank">http://192.168.100.150:3000</a>，以admin/admin登录</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/grafana-intro.assets/1552443573409.png" alt="1552443573409"></p>
<p>首页</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/grafana-intro.assets/1552443615287.png" alt="1552443615287"></p>
<p>可以看到只有Install Grafana是已完成状态，待添加数据源、创建仪表盘、添加用户、安装插件等。</p>
<p><em>官网安装指导：&lt;<a href="http://docs.grafana.org/installation/docker/" rel="external nofollow noopener noreferrer" target="_blank">http://docs.grafana.org/installation/docker/</a></em>&gt;</p>
<hr>
<h3 id="创建一个Dashboard"><a href="#创建一个Dashboard" class="headerlink" title="创建一个Dashboard"></a>创建一个Dashboard</h3><p>先不管Add data source这一步，直接来尝试创建一个Dashboard。</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/grafana-intro.assets/1552444239771.png" alt="1552444239771"></p>
<ul>
<li><p>修改数据源</p>
<p>default是grafana提供的默认数据源，作演示用没有实际意义。A系列是随机产生的数据。</p>
</li>
</ul>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/grafana-intro.assets/1552444301113.png" alt="1552444301113"></p>
<ul>
<li><p>修改图表样式</p>
<p>可以在此页签内设置图表类型、线型、阴影、显示的系列等。</p>
</li>
</ul>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/grafana-intro.assets/1552444564588.png" alt="1552444564588"></p>
<ul>
<li><p>修改通用设置</p>
<p>图表标题、描述信息等。</p>
</li>
</ul>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/grafana-intro.assets/1552444799208.png" alt="1552444799208"></p>
<ul>
<li><p>保存bashboard</p>
<p>调整图表宽高，保存自定义的dashboard。</p>
</li>
</ul>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/grafana-intro.assets/1552445155699.png" alt="1552445155699"></p>
<hr>
<h3 id="对接Zabbix"><a href="#对接Zabbix" class="headerlink" title="对接Zabbix"></a>对接Zabbix</h3><p>Grafana没有预装zabbix数据源插件。安装过程如下：</p>
<p>点击Install app &amp; plugins 会跳转到<a href="https://grafana.com/plugins" rel="external nofollow noopener noreferrer" target="_blank">https://grafana.com/plugins</a>，选择zabbix。</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/grafana-intro.assets/1552445518931.png" alt="1552445518931"></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/grafana-intro.assets/1552445618451.png" alt="1552445618451"></p>
<p>由于是通过容器运行grafana的，需进入容器执行插件安装。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出容器</span></span><br><span class="line">docker ps -a</span><br><span class="line"><span class="comment"># 进入grafana的容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it &lt;id&gt; bash</span><br><span class="line"></span><br><span class="line"><span class="comment">## grafana容器内</span></span><br><span class="line"><span class="comment"># 安装grafana的zabbix插件</span></span><br><span class="line">grafana-cli plugins install alexanderzobnin-zabbix-app</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启容器，然后刷新浏览器页面</span></span><br><span class="line">docker restart &lt;id&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/grafana-intro.assets/1552446272259.png" alt="1552446272259"></p>
<p>重启容器后刷新浏览器，可以看到zabbix插件已安装，并启用之。</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/grafana-intro.assets/1552446449534.png" alt="1552446449534"></p>
<p>添加zabbix数据源</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/grafana-intro.assets/1552447021271.png" alt="1552447021271"></p>
<p>要从zabbix平台<a href="http://192.168.100.69/zabbix" rel="external nofollow noopener noreferrer" target="_blank">http://192.168.100.69/zabbix</a>获取数据，URL填<a href="http://192.168.100.69/zabbix/api_jsonrpc.php" rel="external nofollow noopener noreferrer" target="_blank">http://192.168.100.69/zabbix/api_jsonrpc.php</a>。</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/grafana-intro.assets/1552447231301.png" alt="1552447231301"></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/grafana-intro.assets/1552447361551.png" alt="1552447361551"></p>
<p>保存后，切换到Dashboards页签，导入相关的zabbix插件提供的dashboard。</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/grafana-intro.assets/1552447689701.png" alt="1552447689701"></p>
<p>回到Home，查看已有的dashboard。</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/grafana-intro.assets/1552447734573.png" alt="1552447734573"></p>
<p>查看zabbix监控数据在grafana上的展示效果。</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/grafana-intro.assets/1552447856369.png" alt="1552447856369"></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/grafana-intro.assets/1552447922398.png" alt="1552447922398"></p>
<hr>
<p>(End)</p>
]]></content>
      <categories>
        <category>监控</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
        <tag>Grafana</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB监控接入</title>
    <url>/monitoring/prometheus/monitoring-mongodb/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<blockquote>
<p>Percona Monitoring and Management (PMM)是一款开源的MySQL、MongoDB性能监控工具，PMM客户端负责收集DB监控数据，PMM服务端从已连接的客户端拉取数据，并通过第三方软件Grafana展示图表。</p>
</blockquote>
<a id="more"></a>
<h2 id="安装pmm-client"><a href="#安装pmm-client" class="headerlink" title="安装pmm-client"></a>安装pmm-client</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装pmm-client</span></span><br><span class="line">yum install https://www.percona.com/downloads/pmm/1.1.1/binary/redhat/7/x86_64/pmm-client-1.1.1-1.x86_64.rpm</span><br></pre></td></tr></table></figure>
<h2 id="配置服务端"><a href="#配置服务端" class="headerlink" title="配置服务端"></a>配置服务端</h2><p>目前统一由PMM服务端<strong>10.1.100.200</strong>管理数据库监控任务。</p>
<p>在mysql端执行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pmm-admin config --server 10.1.100.200 --<span class="built_in">bind</span>-address=&lt;当前mysql实例IP地址&gt; --client-address=&lt;当前mysql实例IP地址&gt; --client-name=&lt;自定义客户端名称&gt;</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pmm-admin config --server 10.1.100.200 --<span class="built_in">bind</span>-address=10.1.7.211 --client-address=10.1.7.211 --client-name=Dev</span><br></pre></td></tr></table></figure>
<p>执行后会保存到文件<code>/usr/local/percona/pmm-client/pmm.yml</code>：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@b68-docker-prd pmm]<span class="comment"># cat /usr/local/percona/pmm-client/pmm.yml</span></span><br><span class="line">server_address: 10.1.100.200</span><br><span class="line">client_address: 10.1.7.211</span><br><span class="line">bind_address: 10.1.7.211</span><br><span class="line">client_name: Dev</span><br></pre></td></tr></table></figure>
<h2 id="添加mongodb"><a href="#添加mongodb" class="headerlink" title="添加mongodb"></a>添加mongodb</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@docker-dev pmm]<span class="comment"># pmm-admin add mongodb --help</span></span><br><span class="line">Usage:</span><br><span class="line">  pmm-admin add mongodb [name] [flags]</span><br><span class="line"></span><br><span class="line">Examples:</span><br><span class="line">  pmm-admin add mongodb</span><br><span class="line">  pmm-admin add mongodb --cluster bare-metal</span><br><span class="line">Flags:</span><br><span class="line">      --cluster string   cluster name</span><br><span class="line">      --uri string       MongoDB URI, format: [mongodb://][user:pass@]host[:port][/database][?options] (default <span class="string">"localhost:27017"</span>)</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pmm-admin add mongodb --cluster rs1 --uri mongodb://10.1.7.211:27017 mongodb-dev</span><br></pre></td></tr></table></figure>
<h2 id="查看配置"><a href="#查看配置" class="headerlink" title="查看配置"></a>查看配置</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@docker-dev pmm]<span class="comment"># pmm-admin list</span></span><br><span class="line">pmm-admin 1.1.1</span><br><span class="line"></span><br><span class="line">PMM Server      | 10.1.100.200 </span><br><span class="line">Client Name     | Dev</span><br><span class="line">Client Address  | 10.1.7.211 </span><br><span class="line">Service Manager | linux-systemd</span><br><span class="line"></span><br><span class="line">---------------- ---------------- ----------- -------- ------------------------------ ------------------------</span><br><span class="line">SERVICE TYPE     NAME             LOCAL PORT  RUNNING  DATA SOURCE                    OPTIONS                 </span><br><span class="line">---------------- ---------------- ----------- -------- ------------------------------ ------------------------</span><br><span class="line">...                         </span><br><span class="line">mongodb:metrics  mongodb-dev      42003       YES      10.1.7.211:27017               cluster=rs1</span><br></pre></td></tr></table></figure>
<h2 id="图表"><a href="#图表" class="headerlink" title="图表"></a>图表</h2><ul>
<li>数据接入成功后</li>
</ul>
<p>监控图表页面：<a href="http://10.1.100.200/graph" rel="external nofollow noopener noreferrer" target="_blank">http://10.1.100.200/graph</a></p>
<p><img src="mongodb-monitor-steps.assets/1560855181358.png" alt="1560855181358"></p>
<hr>
<p>官方文档：<a href="https://www.percona.com/doc/percona-monitoring-and-management/conf-mongodb.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.percona.com/doc/percona-monitoring-and-management/conf-mongodb.html</a></p>
]]></content>
      <categories>
        <category>监控</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>Prometheus监控MySQL主从同步</title>
    <url>/monitoring/prometheus/monitoring-mysql-replication/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<blockquote>
<p>利用node_exporter从*.prom文件读取指标数据</p>
</blockquote>
<a id="more"></a>
<h2 id="获取数据的脚本"><a href="#获取数据的脚本" class="headerlink" title="获取数据的脚本"></a>获取数据的脚本</h2><p>getKeys.sh:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">mypath=$(<span class="built_in">cd</span> `dirname <span class="variable">$0</span>`; <span class="built_in">pwd</span>)</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$mypath</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"executing all shell scripts ..."</span></span><br><span class="line"><span class="keyword">for</span> sh <span class="keyword">in</span> `ls *.sh |grep -v <span class="variable">$0</span>`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"will execute: ./<span class="variable">$sh</span> &gt; <span class="variable">$&#123;sh&#125;</span>.prom"</span></span><br><span class="line">  <span class="built_in">eval</span> <span class="string">"./<span class="variable">$sh</span> &gt; <span class="variable">$&#123;sh&#125;</span>.prom"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>获取主从同步延迟数据的脚本pt-heart.sh：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">out=`pt-heartbeat -D your_dbname --table=heartbeat --check --host=x.x.x.x --port=xx --user=xx --password=xxxxxx --master-server-id=xxx --<span class="built_in">print</span>-master-server-id`</span><br><span class="line">v=`<span class="built_in">echo</span> <span class="string">"<span class="variable">$out</span>"</span> |awk <span class="string">'&#123;print $1&#125;'</span>`</span><br><span class="line">m=`<span class="built_in">echo</span> <span class="string">"<span class="variable">$out</span>"</span> |awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"pt_heart&#123;server_id=\"<span class="variable">$m</span>\"&#125; <span class="variable">$v</span>"</span></span><br></pre></td></tr></table></figure>
<p>具体示例：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">out=`pt-heartbeat -D test_sync --table=heartbeat --check --host=10.1.7.211 --port=3306 --user=root --password=xxxxxx --master-server-id=100 --<span class="built_in">print</span>-master-server-id`</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>脚本位置：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@docker-dev node_exporter_keys]<span class="comment"># pwd</span></span><br><span class="line">/srv/node_exporter_keys</span><br><span class="line">[root@docker-dev node_exporter_keys]<span class="comment"># tree .</span></span><br><span class="line">.</span><br><span class="line">├── getkeys.sh</span><br><span class="line">├── procs.sh</span><br><span class="line">├── procs.sh.prom</span><br><span class="line">├── pt-heart.sh</span><br><span class="line">└── pt-heart.sh.prom</span><br></pre></td></tr></table></figure>
<h3 id="设置定时任务"><a href="#设置定时任务" class="headerlink" title="设置定时任务"></a>设置定时任务</h3><p>设置crontab定时任务：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">* * * * * /srv/node_exporter_keys/getkeys.sh</span><br></pre></td></tr></table></figure>
<p>输出的文件pt-heart.sh.prom：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pt_heart&#123;server_id=&quot;100&quot;&#125; 0.00</span><br></pre></td></tr></table></figure>
<p>修改node_exporter启动参数：</p>
<p>分两种情形：</p>
<ul>
<li>通过docker运行node_exporter</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.0'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">node-exporter:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">prom/node-exporter</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/proc:/host/proc:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/sys:/host/sys:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/:/rootfs:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/srv/node_exporter_keys:/var/extra_keys:ro</span> <span class="comment"># 映射到/var/extra_keys</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9100</span><span class="string">:9100</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'--collector.textfile.directory=/var/extra_keys'</span> <span class="comment"># 指定从/var/extra_keys读取*.prom</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'--path.procfs=/host/proc'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'--path.sysfs=/host/sys'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'--collector.filesystem.ignored-mount-points="^(/rootfs|/host|)/(sys|proc|dev|host|etc)($$|/)"'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'--collector.filesystem.ignored-fs-types="^(sys|proc|auto|cgroup|devpts|ns|au|fuse\.lxc|mqueue)(fs|)$$"</span></span><br></pre></td></tr></table></figure>
<ul>
<li>通过supervisor运行node_exporter</li>
</ul>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[program:node_exporter]</span></span><br><span class="line"><span class="attr">command</span>=/path/to/node_exporter --collector.textfile.directory=/srv/node_exporter_keys</span><br><span class="line"><span class="attr">directory</span>=/path/to</span><br><span class="line"><span class="attr">user</span>=root</span><br><span class="line"><span class="attr">startsecs</span>=<span class="number">3</span></span><br><span class="line"><span class="attr">redirect_stderr</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">stdout_logfile_maxbytes</span>=<span class="number">50</span>MB</span><br><span class="line"><span class="attr">stdout_logfile_backups</span>=<span class="number">3</span></span><br><span class="line"><span class="attr">stdout_logfile</span>=/var/log/node_exporter.log</span><br></pre></td></tr></table></figure>
<p>最后，访问相应的<a href="http://your-host:9100/metrics，查看是否有新增的指标名称pt_heart。" rel="external nofollow noopener noreferrer" target="_blank">http://your-host:9100/metrics，查看是否有新增的指标名称pt_heart。</a></p>
]]></content>
      <categories>
        <category>监控</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL监控接入</title>
    <url>/monitoring/prometheus/monitoring-mysql/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<blockquote>
<p>Percona Monitoring and Management (PMM)是一款开源的MySQL、MongoDB性能监控工具，PMM客户端负责收集DB监控数据，PMM服务端从已连接的客户端拉取数据，并通过第三方软件Grafana展示图表。</p>
</blockquote>
<a id="more"></a>
<h2 id="安装pmm-client"><a href="#安装pmm-client" class="headerlink" title="安装pmm-client"></a>安装pmm-client</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装pmm-client</span></span><br><span class="line">yum install https://www.percona.com/downloads/pmm/1.1.1/binary/redhat/7/x86_64/pmm-client-1.1.1-1.x86_64.rpm</span><br></pre></td></tr></table></figure>
<h2 id="配置服务端"><a href="#配置服务端" class="headerlink" title="配置服务端"></a>配置服务端</h2><p>目前统一由PMM服务端<strong>10.1.100.200</strong>管理数据库监控任务。</p>
<p>在mysql端执行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pmm-admin config --server 10.1.100.200 --<span class="built_in">bind</span>-address=&lt;当前mysql实例IP地址&gt; --client-address=&lt;当前mysql实例IP地址&gt; --client-name=&lt;自定义客户端名称&gt;</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pmm-admin config --server 10.1.100.200 --<span class="built_in">bind</span>-address=192.168.101.68 --client-address=192.168.101.68 --client-name=Production</span><br></pre></td></tr></table></figure>
<p>执行后会保存到文件<code>/usr/local/percona/pmm-client/pmm.yml</code>：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@b68-docker-prd pmm]<span class="comment"># cat /usr/local/percona/pmm-client/pmm.yml</span></span><br><span class="line">server_address: 10.1.100.200</span><br><span class="line">client_address: 192.168.101.68</span><br><span class="line">bind_address: 192.168.101.68</span><br><span class="line">client_name: Production</span><br></pre></td></tr></table></figure>
<h2 id="添加mysql"><a href="#添加mysql" class="headerlink" title="添加mysql"></a>添加mysql</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pmm-admin add mysql --user &lt;mysql用户名&gt; --password &lt;mysql密码&gt; --host &lt;mysql实例IP地址&gt; --port &lt;mysql端口&gt; &lt;自定义本实例的名称&gt;</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pmm-admin add mysql --user root --password xxxxxx --host 192.168.101.68 --port 3306 client-production-3306</span><br></pre></td></tr></table></figure>
<h2 id="查看配置"><a href="#查看配置" class="headerlink" title="查看配置"></a>查看配置</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@b68-docker-prd pmm]<span class="comment"># pmm-admin list</span></span><br><span class="line">pmm-admin 1.1.1</span><br><span class="line"></span><br><span class="line">PMM Server      | 10.1.100.200</span><br><span class="line">Client Name     | Production</span><br><span class="line">Client Address  | 192.168.101.68</span><br><span class="line">Service Manager | linux-systemd</span><br><span class="line"></span><br><span class="line">-------------- ----------------------- ----------- -------- ---------------------------------- ------------------------</span><br><span class="line">SERVICE TYPE   NAME                    LOCAL PORT  RUNNING  DATA SOURCE                        OPTIONS</span><br><span class="line">-------------- ----------------------- ----------- -------- ---------------------------------- ------------------------</span><br><span class="line">mysql:queries  client-production-3306  -           YES      root:***@tcp(192.168.101.68:3306)  query_source=perfschema</span><br><span class="line">linux:metrics  client-production-3306  42000       YES      -                   </span><br><span class="line">mysql:metrics  client-production-3306  42002       YES      root:***@tcp(192.168.101.68:3306)</span><br></pre></td></tr></table></figure>
<h2 id="图表"><a href="#图表" class="headerlink" title="图表"></a>图表</h2><p>数据接入成功后</p>
<ul>
<li>查询分析页面：<a href="http://10.1.100.200/qan/" rel="external nofollow noopener noreferrer" target="_blank">http://10.1.100.200/qan/</a></li>
</ul>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/mysql-monitor-steps.assets/1560845119682.png" alt="1560845119682"></p>
<ul>
<li>监控图表页面：<a href="http://10.1.100.200/graph" rel="external nofollow noopener noreferrer" target="_blank">http://10.1.100.200/graph</a></li>
</ul>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/mysql-monitor-steps.assets/1560845433306.png" alt="1560845433306"></p>
<hr>
<p>官方文档：<a href="https://www.percona.com/doc/percona-monitoring-and-management/conf-mysql.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.percona.com/doc/percona-monitoring-and-management/conf-mysql.html</a></p>
]]></content>
      <categories>
        <category>监控</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>NginX监控</title>
    <url>/monitoring/prometheus/monitoring-nginx/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<blockquote>
<p>nginx需安装nginx-module-vts模块，然后通过nginx-vts-exporter输出监控指标。</p>
</blockquote>
<a id="more"></a>
<h2 id="nginx-module-vts模块"><a href="#nginx-module-vts模块" class="headerlink" title="nginx-module-vts模块"></a>nginx-module-vts模块</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取nginx-module-vts模块源码</span></span><br><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/vozlt/nginx-module-vts</span><br><span class="line"></span><br><span class="line"><span class="comment"># nginx源码包</span></span><br><span class="line">wget https://nginx.org/download/nginx-1.17.0.tar.gz</span><br><span class="line">tar -xf nginx-1.17.0.tar.gz</span><br><span class="line"><span class="built_in">cd</span> nginx-1.17.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译nginx，加入nginx-module-vts模块</span></span><br><span class="line">./configure --add-module=/opt/nginx-module-vts --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/<span class="built_in">log</span>/nginx/error.log --http-log-path=/var/<span class="built_in">log</span>/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_random_index_module --with-http_secure_link_module --with-http_stub_status_module --with-http_auth_request_module --with-mail --with-mail_ssl_module --with-file-aio --with-ipv6 --with-cc-opt=<span class="string">'-O2 -g -pipe -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic'</span></span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<h2 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h2><ul>
<li>修改nginx.conf</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    ...</span><br><span class="line">    vhost_traffic_status_zone;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 8088;</span><br><span class="line">        location /status &#123;</span><br><span class="line">            vhost_traffic_status_display;</span><br><span class="line">            vhost_traffic_status_display_format html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>server配置示例</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">upstream jenkins &#123;</span><br><span class="line">    server 127.0.0.1:8080;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name jenkins.keep.com;</span><br><span class="line"></span><br><span class="line">	<span class="comment">#uri访问统计</span></span><br><span class="line">    vhost_traffic_status_filter_by_set_key $uri uri::$server_name;</span><br><span class="line"></span><br><span class="line">	<span class="comment"># #国家/地区访问统计，无此模块已注释</span></span><br><span class="line">    <span class="comment"># vhost_traffic_status_filter_by_set_key $geoip_country_code country::$server_name;</span></span><br><span class="line">	<span class="comment"># #UserAgent 统计</span></span><br><span class="line">    <span class="comment"># vhost_traffic_status_filter_by_set_key $filter_user_agent agent::$server_name;    </span></span><br><span class="line">    vhost_traffic_status_filter_by_set_key $status $server_name; #http code统计</span><br><span class="line">    vhost_traffic_status_filter_by_set_key $upstream_addr upstream::backend; #后端转发统计</span><br><span class="line">    vhost_traffic_status_filter_by_set_key $remote_port client::ports::$server_name; #请求端口统计</span><br><span class="line">    vhost_traffic_status_filter_by_set_key $remote_addr client::addr::$server_name;  #请求IP统计</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#请求路径统计</span></span><br><span class="line">    location ~ ^/storage/(.+)/.*$ &#123;</span><br><span class="line">        set $volume $1;</span><br><span class="line">        vhost_traffic_status_filter_by_set_key $volume storage::$server_name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://jenkins;</span><br><span class="line">        proxy_redirect default;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>添加到系统服务</li>
</ul>
<p>/etc/systemd/system/nginx.service:</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=The nginx HTTP and reverse proxy server</span><br><span class="line"><span class="attr">After</span>=network.target remote-fs.target nss-lookup.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=forking</span><br><span class="line"><span class="attr">PIDFile</span>=/run/nginx.pid</span><br><span class="line"><span class="comment"># Nginx will fail to start if /run/nginx.pid already exists but has the wrong</span></span><br><span class="line"><span class="comment"># SELinux context. This might happen when running `nginx -t` from the cmdline.</span></span><br><span class="line"><span class="comment"># https://bugzilla.redhat.com/show_bug.cgi?id=1268621</span></span><br><span class="line"><span class="attr">ExecStartPre</span>=/usr/bin/rm -f /run/nginx.pid</span><br><span class="line"><span class="attr">ExecStartPre</span>=/usr/sbin/nginx -t</span><br><span class="line"><span class="attr">ExecStart</span>=/usr/sbin/nginx</span><br><span class="line"><span class="attr">ExecReload</span>=/bin/kill -s HUP <span class="variable">$MAINPID</span></span><br><span class="line"><span class="attr">KillSignal</span>=SIGQUIT</span><br><span class="line"><span class="attr">TimeoutStopSec</span>=<span class="number">5</span></span><br><span class="line"><span class="attr">KillMode</span>=process</span><br><span class="line"><span class="attr">PrivateTmp</span>=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ln -s /etc/systemd/system/nginx.service /etc/systemd/system/multi-user.target.wants/</span><br></pre></td></tr></table></figure>
<ul>
<li>启动、检查、重新加载</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl start nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改过nginx配置后</span></span><br><span class="line">nginx -t</span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>
<ul>
<li>查看status</li>
</ul>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/nginx-monitor-steps.assets/1561097913819.png" alt="1561097913819"></p>
<h2 id="数据转换"><a href="#数据转换" class="headerlink" title="数据转换"></a>数据转换</h2><p>通过<a href="https://github.com/hnlq715/nginx-vts-exporter" rel="external nofollow noopener noreferrer" target="_blank">nginx-vts-exporter</a>将由nginx-module-vts模块提供的nginx监控数据转换成prometheus能直接使用的格式。</p>
<p>转换前：<a href="http://192.168.100.150:8088/status/format/json" rel="external nofollow noopener noreferrer" target="_blank">http://192.168.100.150:8088/status/format/json</a></p>
<p>转换后：<a href="http://192.168.100.150:9913/metrics" rel="external nofollow noopener noreferrer" target="_blank">http://192.168.100.150:9913/metrics</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget https://github.com/hnlq715/nginx-vts-exporter/releases/download/v0.10.3/nginx-vts-exporter-0.10.3.linux-amd64.tar.gz</span><br><span class="line">tar -xf nginx-vts-exporter-0.10.3.linux-amd64.tar.gz</span><br><span class="line">chown -R nginx:nginx nginx-vts-exporter-0.10.3.linux-amd64</span><br><span class="line">ln -s /srv/nginx-vts-exporter-0.10.3.linux-amd64/nginx-vts-exporter /usr/bin/</span><br><span class="line"><span class="comment"># 测试运行exporter</span></span><br><span class="line">nohup nginx-vts-exporter -nginx.scrape_uri=http://localhost:8088/status/format/json</span><br></pre></td></tr></table></figure>
<p>可通过supervisor保持exporter在后台运行：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[program:nginx_vts_exporter]</span></span><br><span class="line"><span class="attr">command</span>=/usr/bin/nginx-vts-exporter -nginx.scrape_uri=http://localhost:<span class="number">8088</span>/status/format/json</span><br><span class="line"><span class="attr">user</span>=nginx</span><br><span class="line"><span class="attr">startsecs</span>=<span class="number">3</span></span><br><span class="line"><span class="attr">redirect_stderr</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">stdout_logfile_maxbytes</span>=<span class="number">50</span>MB</span><br><span class="line"><span class="attr">stdout_logfile_backups</span>=<span class="number">3</span></span><br><span class="line"><span class="attr">stdout_logfile</span>=/var/log/nginx_vts_exporter.log</span><br></pre></td></tr></table></figure>
<h2 id="注册到consul"><a href="#注册到consul" class="headerlink" title="注册到consul"></a>注册到consul</h2><p>将nginx监控数据接口注册到consul，使prometheus能获取该target。</p>
<p>curl命令参考：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl http://192.168.100.140:8500/v1/agent/service/register -X PUT -i -H <span class="string">"Content-Type:application/json"</span> -d <span class="string">'&#123;</span></span><br><span class="line"><span class="string">	"ID": "nginx_192.168.100.150",</span></span><br><span class="line"><span class="string">	"Name": "nginx_192_168_100_150",</span></span><br><span class="line"><span class="string">	"Tags": ["nginx", "development", "prometheus-target"],</span></span><br><span class="line"><span class="string">	"Address": "192.168.100.150",</span></span><br><span class="line"><span class="string">	"Port": 9913,</span></span><br><span class="line"><span class="string">	"Check": &#123;</span></span><br><span class="line"><span class="string">		"DeregisterCriticalServiceAfter": "90m",</span></span><br><span class="line"><span class="string">		"HTTP": "http://192.168.100.150:9913/metrics",</span></span><br><span class="line"><span class="string">		"Interval": "15s"</span></span><br><span class="line"><span class="string">	&#125;,</span></span><br><span class="line"><span class="string">	"IsDeleted": false,</span></span><br><span class="line"><span class="string">	"Meta": &#123;</span></span><br><span class="line"><span class="string">		"version": "1.0"</span></span><br><span class="line"><span class="string">	&#125;,</span></span><br><span class="line"><span class="string">	"EnableTagOverride": false</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure>
<p><strong>为了统一管控，应按【应用接入说明】记录到配置仓库中。</strong></p>
<p>注册成功后多了一条service记录：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/nginx-monitor-steps.assets/1561088176905.png" alt="1561088176905"></p>
<h2 id="图表"><a href="#图表" class="headerlink" title="图表"></a>图表</h2><p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/nginx-monitor-steps.assets/1561088071803.png" alt="1561088071803"></p>
]]></content>
      <categories>
        <category>监控</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ监控接入</title>
    <url>/monitoring/prometheus/monitoring-rabbitmq/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<blockquote>
<p>在Docker中运行的rabbitmq，用docker镜像版的rabbitmq-exporter更方便。也可以使用二进制版的rabbitmq-exporter。</p>
</blockquote>
<a id="more"></a>
<h2 id="Docker中的RabbitMQ"><a href="#Docker中的RabbitMQ" class="headerlink" title="Docker中的RabbitMQ"></a>Docker中的RabbitMQ</h2><p>可通过docker镜像运行rabbitmq exporter：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">rabbitmq_exporter:</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">kbudde/rabbitmq-exporter</span></span><br><span class="line"><span class="attr">ports:</span></span><br><span class="line">	<span class="bullet">-</span> <span class="number">9429</span><span class="string">:9429</span></span><br><span class="line"><span class="attr">environment:</span></span><br><span class="line">	<span class="attr">SERVICE_TAGS:</span> <span class="string">"prometheus-target,rabbitmq-expo"</span></span><br><span class="line">	<span class="attr">RABBIT_URL:</span> <span class="string">"http://127.0.0.1:15672"</span></span><br><span class="line">	<span class="attr">RABBIT_USER:</span> <span class="string">"guest"</span></span><br><span class="line">	<span class="attr">RABBIT_PASSWORD:</span> <span class="string">"guest"</span></span><br><span class="line">	<span class="attr">PUBLISH_PORT:</span> <span class="string">"9429"</span></span><br><span class="line">	<span class="attr">OUTPUT_FORMAT:</span> <span class="string">"JSON"</span></span><br><span class="line"><span class="comment">#   LOG_LEVEL: "debug"</span></span><br><span class="line"><span class="attr">network_mode:</span> <span class="string">host</span></span><br></pre></td></tr></table></figure>
<h2 id="VM安装的RabbitMQ"><a href="#VM安装的RabbitMQ" class="headerlink" title="VM安装的RabbitMQ"></a>VM安装的RabbitMQ</h2><p>获取rabbitmq_exporter：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># go编译rabbitmq_exporter</span></span><br><span class="line">go get https://github.com/kbudde/rabbitmq_exporter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者wget下载release的二进制文件包</span></span><br><span class="line">https://github.com/kbudde/rabbitmq_exporter/releases/download/v0.29.0/rabbitmq_exporter-0.29.0.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure>
<p>运行rabbitmq_exporter:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">RABBIT_URL=<span class="string">"http://127.0.0.1:15672"</span> RABBIT_USER=guest  RABBIT_PASSWORD=guest ./rabbitmq_exporter</span><br></pre></td></tr></table></figure>
<p>通过supervisor保持rabbitmq_exporter运行时，可作如下配置:</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[program:rabbitmq-expo]</span></span><br><span class="line"><span class="attr">command</span>=/srv/rabbitmq_exporter</span><br><span class="line"><span class="attr">directory</span>=/srv</span><br><span class="line"><span class="attr">user</span>=rabbitmq</span><br><span class="line"><span class="attr">environment</span>=RABBIT_USER=admin,RABBIT_PASSWORD=<span class="string">"xxxxxx"</span>,OUTPUT_FORMAT=JSON,PUBLISH_PORT=<span class="number">9429</span>,RABBIT_URL=http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">15672</span></span><br><span class="line"><span class="attr">startsecs</span>=<span class="number">3</span></span><br><span class="line"><span class="attr">redirect_stderr</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">stdout_logfile_maxbytes</span>=<span class="number">50</span>MB</span><br><span class="line"><span class="attr">stdout_logfile_backups</span>=<span class="number">3</span></span><br><span class="line"><span class="attr">stdout_logfile</span>=/var/log/rabbitmq-expo.log</span><br></pre></td></tr></table></figure>
<p>运行后，检查是否能导出监控数据。以10.1.7.211上的rabbitmq为例，打开<a href="http://10.1.7.211:9429/metrics" rel="external nofollow noopener noreferrer" target="_blank">http://10.1.7.211:9429/metrics</a>。</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/rabbitmq-monitor-steps.assets/1560918051276.png" alt="1560918051276"></p>
<p>最后，需要将此接口注册到Consul以便Prometheus能自动添加此target。方法见<a href="docs/monitoring/prometheus/self/prometheus-consul-guide.md">应用接入说明</a>。</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/rabbitmq-monitor-steps.assets/1560918662228.png" alt="1560918662228"></p>
<h2 id="图表"><a href="#图表" class="headerlink" title="图表"></a>图表</h2><p>单节点rabbitmq：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/rabbitmq-monitor-steps.assets/1560917193636.png" alt="1560917193636"></p>
<p>rabbitmq集群：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/rabbitmq-monitor-steps.assets/1560917249540.png" alt="1560917249540"></p>
<hr>
<p>rabbitmq_exporter使用说明：<a href="https://github.com/kbudde/rabbitmq_exporter" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/kbudde/rabbitmq_exporter</a></p>
]]></content>
      <categories>
        <category>监控</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis监控接入</title>
    <url>/monitoring/prometheus/monitoring-redis/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<blockquote>
<p>在Docker中运行的redis，用docker镜像版的redis_exporter更方便。也可以使用二进制版的redis_exporter</p>
</blockquote>
<a id="more"></a>
<h2 id="Docker中的Redis"><a href="#Docker中的Redis" class="headerlink" title="Docker中的Redis"></a>Docker中的Redis</h2><p>可通过docker镜像运行redis exporter：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">redis-expo:</span></span><br><span class="line">	<span class="attr">image:</span> <span class="string">oliver006/redis_exporter</span></span><br><span class="line">	<span class="attr">ports:</span></span><br><span class="line">		<span class="bullet">-</span> <span class="number">9121</span><span class="string">:9121</span></span><br><span class="line">	<span class="attr">network_mode:</span> <span class="string">host</span></span><br><span class="line">	<span class="attr">environment:</span></span><br><span class="line">	    <span class="attr">REDIS_PASSWORD:</span> <span class="string">"xxxxxxxxxxxxxx"</span></span><br><span class="line">		<span class="attr">SERVICE_TAGS:</span> <span class="string">"prometheus-target,redis-expo"</span></span><br><span class="line">	<span class="attr">command:</span> <span class="string">"--redis.addr redis://127.0.0.1:6379"</span></span><br></pre></td></tr></table></figure>
<h2 id="VM安装的Redis"><a href="#VM安装的Redis" class="headerlink" title="VM安装的Redis"></a>VM安装的Redis</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装redis_exporter</span></span><br><span class="line">wget https://github.com/oliver006/redis_exporter/releases/download/v1.0.0/redis_exporter-v1.0.0.linux-amd64.tar.gz</span><br><span class="line">tar -xf redis_exporter-v1.0.0.linux-amd64.tar.gz -C /srv/</span><br></pre></td></tr></table></figure>
<p>运行redis_exporter:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nohup ./redis_exporter --redis.addr <span class="string">"redis://127.0.0.1:6379"</span> --redis.password <span class="string">"xxxxxxxxxx"</span> --web.listen-address <span class="string">"0.0.0.0:9121"</span> &amp; 2&gt;&amp;1</span><br></pre></td></tr></table></figure>
<p>通过supervisor保持redis_exporter运行时，可作如下配置:</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[program:redis_exporter]</span></span><br><span class="line"><span class="attr">command</span>=redis_exporter</span><br><span class="line"><span class="attr">directory</span>=/srv/redis_exporter-v1.<span class="number">0.0</span>.linux-amd64</span><br><span class="line"><span class="attr">user</span>=root</span><br><span class="line"><span class="attr">environment</span>=REDIS_PASSWORD=<span class="string">"xxxxxx"</span>,REDIS_ADDR=<span class="string">"redis://127.0.0.1:6379"</span>,REDIS_EXPORTER_WEB_LISTEN_ADDRESS=<span class="string">"0.0.0.0:9121"</span></span><br><span class="line"><span class="attr">startsecs</span>=<span class="number">3</span></span><br><span class="line"><span class="attr">redirect_stderr</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">stdout_logfile_maxbytes</span>=<span class="number">50</span>MB</span><br><span class="line"><span class="attr">stdout_logfile_backups</span>=<span class="number">3</span></span><br><span class="line"><span class="attr">stdout_logfile</span>=/var/log/redis_exporter.log</span><br></pre></td></tr></table></figure>
<p>运行后，验证是否能输出redis监控数据。以10.1.7.211上的redis为例，打开<a href="http://10.1.7.211:9121/metrics" rel="external nofollow noopener noreferrer" target="_blank">http://10.1.7.211:9121/metrics</a>，并搜索<code>redis_connected_clients</code>，非0正常，表明redis_exporter已连接上redis。</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/redis-monitor-steps.assets/1560914994853.png" alt="1560914994853"></p>
<p>最后，需要将此接口注册到Consul以便Prometheus能自动添加此target。方法见<a href="docs/monitoring/prometheus/self/prometheus-consul-guide.md">应用接入说明</a>。</p>
<h2 id="图表"><a href="#图表" class="headerlink" title="图表"></a>图表</h2><p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/redis-monitor-steps.assets/1560918348143.png" alt="1560918348143"></p>
<hr>
<p>redis_exporter使用说明：<a href="https://github.com/oliver006/redis_exporter" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/oliver006/redis_exporter</a></p>
]]></content>
      <categories>
        <category>监控</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>Prometheus自动发现配置</title>
    <url>/monitoring/prometheus/prometheus-discovery/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<blockquote>
<p>Prometheus支持基于Consul自动发现</p>
</blockquote>
<a id="more"></a>
<p>prometheus.yml:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">scrape_interval:</span>     <span class="string">1s</span></span><br><span class="line">  <span class="attr">scrape_timeout:</span>      <span class="string">1s</span></span><br><span class="line">  <span class="attr">evaluation_interval:</span> <span class="string">5s</span></span><br><span class="line"></span><br><span class="line"><span class="attr">alerting:</span></span><br><span class="line">  <span class="attr">alertmanagers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['10.1.7.211:9093']</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rule_files:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">'rules/*.yml'</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">prometheus</span></span><br><span class="line">    <span class="attr">metrics_path:</span> <span class="string">/metrics</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['localhost:9090']</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">instance:</span> <span class="string">prometheus</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">consul_sd</span></span><br><span class="line">    <span class="attr">consul_sd_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">server:</span> <span class="string">'192.168.100.140:8500'</span></span><br><span class="line">      <span class="attr">datacenter:</span> <span class="string">dc01</span></span><br><span class="line">      <span class="attr">services:</span> <span class="string">[]</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">relabel_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">source_labels:</span> <span class="string">[__meta_consul_tags]</span></span><br><span class="line">      <span class="attr">regex:</span> <span class="string">'.*,prometheus-target,.*'</span></span><br><span class="line">      <span class="attr">action:</span> <span class="string">keep</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">source_labels:</span> <span class="string">[__meta_consul_service]</span></span><br><span class="line">      <span class="attr">target_label:</span> <span class="string">sn</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">consul_sd_dev</span></span><br><span class="line">    <span class="attr">consul_sd_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">server:</span> <span class="string">'10.1.7.211:8500'</span></span><br><span class="line">      <span class="attr">datacenter:</span> <span class="string">dc1</span></span><br><span class="line">      <span class="attr">services:</span> <span class="string">[]</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">relabel_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">source_labels:</span> <span class="string">[__meta_consul_tags]</span></span><br><span class="line">      <span class="attr">regex:</span> <span class="string">'.*prometheus-target.*'</span></span><br><span class="line">      <span class="attr">action:</span> <span class="string">keep</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">source_labels:</span> <span class="string">['__address__']</span></span><br><span class="line"><span class="comment">#      regex: '.*:(.*)'</span></span><br><span class="line">      <span class="attr">regex:</span> <span class="string">'127.0.0.1:(.*)'</span></span><br><span class="line">      <span class="attr">target_label:</span> <span class="string">'__address__'</span></span><br><span class="line">      <span class="attr">replacement:</span> <span class="string">'10.1.7.211:$1'</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>监控</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>Prometheus + Grafana + Alertmanager监控</title>
    <url>/monitoring/prometheus/prometheus-intro/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<blockquote>
<p> 环境：CentOS Linux release 7.5.1804 (Core)、5.5.60-MariaDB</p>
<p>运行方式：Prometheus，Grafana和Alertmanager通过docker安装运行，MySQL和exporter直接运行在VM上</p>
</blockquote>
<a id="more"></a>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/prometheus-intro.assets/1552636875890.png" alt="1552636875890"></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull prom/prometheus</span><br><span class="line">docker pull grafana/grafana</span><br><span class="line">docker pull prom/alertmanager</span><br><span class="line">[root@VM_0_2_centos config]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY             TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">prom/prometheus        latest              f57ed0abd85c        2 days ago          109MB</span><br><span class="line">grafana/grafana        latest              ffd9c905f698        8 days ago          241MB</span><br><span class="line">prom/alertmanager      latest              02e0d8e930da        6 weeks ago         42.5MB</span><br></pre></td></tr></table></figure>
<p>执行prometheus前，先配置好以下文件。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">[root@zabbix02</span> <span class="string">~]#</span> <span class="string">tree</span> <span class="string">config/</span></span><br><span class="line"><span class="string">config/</span></span><br><span class="line"><span class="string">├──</span> <span class="string">alertmanager</span></span><br><span class="line"><span class="string">│</span>   <span class="string">├──</span> <span class="string">alertmanager.yml</span></span><br><span class="line"><span class="string">│</span>   <span class="string">└──</span> <span class="string">template</span></span><br><span class="line"><span class="string">│</span>       <span class="string">└──</span> <span class="string">test.tmpl</span></span><br><span class="line"><span class="string">└──</span> <span class="string">prometheus</span></span><br><span class="line">    <span class="string">├──</span> <span class="string">prometheus.yml</span></span><br><span class="line">    <span class="string">└──</span> <span class="string">rules.yml</span></span><br></pre></td></tr></table></figure>
<ul>
<li>prometheus.yml</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">scrape_interval:</span> <span class="string">15s</span></span><br><span class="line">  <span class="attr">evaluation_interval:</span> <span class="string">15s</span></span><br><span class="line">  <span class="attr">scrape_timeout:</span> <span class="string">15s</span></span><br><span class="line">  <span class="attr">external_labels:</span></span><br><span class="line">    <span class="attr">monitor:</span> <span class="string">'codelab_monitor'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 报警服务，alertmanager默认运行在9093端口</span></span><br><span class="line"><span class="attr">alerting:</span></span><br><span class="line">  <span class="attr">alertmanagers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">["localhost:9093"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 报警规则</span></span><br><span class="line"><span class="attr">rule_files:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"rules.yml"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下定义了可采集的指标数据源</span></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line"><span class="comment"># 安装node-exporter并运行后，默认在端口9100对外暴露相关metrics</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">'node'</span></span><br><span class="line">    <span class="attr">scrape_interval:</span> <span class="string">5s</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['localhost:9100']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># prometheus运行时自身也会提供一些metrics</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">'prometheus'</span></span><br><span class="line">    <span class="attr">scrape_interval:</span> <span class="string">5s</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['localhost:9090']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mysql指标由mysqld-exporter导出，默认9104端口</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">'mysqld'</span></span><br><span class="line">    <span class="attr">scrape_interval:</span> <span class="string">5s</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['localhost:9104']</span></span><br></pre></td></tr></table></figure>
<ul>
<li>rules.yml</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">groups:</span></span><br><span class="line"><span class="comment"># 测试规则，当CPU使用率（5分钟）超过20%时，达到报警条件</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-rules</span></span><br><span class="line">    <span class="attr">rules:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">alert:</span> <span class="string">hostCpuUsageAlert</span></span><br><span class="line">        <span class="attr">expr:</span> <span class="string">sum(avg</span> <span class="string">without</span> <span class="string">(cpu)(irate(node_cpu_seconds_total&#123;mode!='idle'&#125;[5m])))</span> <span class="string">by</span> <span class="string">(instance)</span> <span class="string">*</span> <span class="number">100</span> <span class="string">&gt;</span> <span class="number">20</span></span><br><span class="line">        <span class="attr">for:</span> <span class="string">1s</span></span><br><span class="line">        <span class="attr">labels:</span></span><br><span class="line">          <span class="attr">severity:</span> <span class="string">page</span></span><br><span class="line">        <span class="attr">annotations:</span></span><br><span class="line">          <span class="attr">summary:</span> <span class="string">"Instance <span class="template-variable">&#123;&#123; $labels.instance &#125;&#125;</span> CPU usgae high"</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">"<span class="template-variable">&#123;&#123; $labels.instance &#125;&#125;</span> CPU usage above 20% (current value: <span class="template-variable">&#123;&#123; $value &#125;&#125;</span>)"</span></span><br></pre></td></tr></table></figure>
<ul>
<li>alertmanager.yml</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">resolve_timeout:</span> <span class="string">5m</span> <span class="comment">#处理超时时间，默认为5min</span></span><br><span class="line">  <span class="attr">smtp_smarthost:</span> <span class="string">'smtp.163.com:465'</span> <span class="comment"># 邮箱smtp服务器代理</span></span><br><span class="line">  <span class="attr">smtp_from:</span> <span class="string">'xxx@163.com'</span> <span class="comment"># 发送邮箱名称</span></span><br><span class="line">  <span class="attr">smtp_auth_username:</span> <span class="string">'xxx@163.com'</span> <span class="comment"># 邮箱名称</span></span><br><span class="line">  <span class="attr">smtp_auth_password:</span> <span class="string">'xxxxxxxx'</span> <span class="comment"># 邮箱密码或授权码</span></span><br><span class="line">  <span class="attr">wechat_api_url:</span> <span class="string">'https://qyapi.weixin.qq.com/cgi-bin/'</span> <span class="comment"># 企业微信地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模板</span></span><br><span class="line"><span class="attr">templates:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">'template/*.tmpl'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 路由</span></span><br><span class="line"><span class="attr">route:</span></span><br><span class="line">  <span class="attr">group_by:</span> <span class="string">['alertname']</span> <span class="comment"># 报警分组依据</span></span><br><span class="line">  <span class="attr">group_wait:</span> <span class="string">10s</span> <span class="comment"># 第一次等待多久时间发送一组警报的通知</span></span><br><span class="line">  <span class="attr">group_interval:</span> <span class="string">10s</span> <span class="comment"># 在发送新警报前的等待时间</span></span><br><span class="line">  <span class="attr">repeat_interval:</span> <span class="string">1m</span> <span class="comment"># 发送重复警报的周期 对于email此项不可以设置过低</span></span><br><span class="line">  <span class="attr">receiver:</span> <span class="string">'web.hook'</span> <span class="comment"># 使用receivers中name为web.hook的报警方式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 常用的报警通知方式有3种，webhook、email和企业微信</span></span><br><span class="line"><span class="attr">receivers:</span></span><br><span class="line"><span class="comment"># webhook方式</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">'web.hook'</span></span><br><span class="line">    <span class="attr">webhook_configs:</span></span><br><span class="line">    <span class="comment"># 本地webhook打印报警信息。webhook方式可用于测试，或执行某些动作。</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">url:</span> <span class="string">'http://127.0.0.1:5001/'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 邮件方式</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">'email'</span></span><br><span class="line">    <span class="attr">email_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">to:</span> <span class="string">'xxx@yyy.com'</span> <span class="comment"># 收件人</span></span><br><span class="line">      <span class="attr">html:</span> <span class="string">'<span class="template-variable">&#123;&#123; template "test.html" . &#125;&#125;</span>'</span> <span class="comment"># 邮箱内容html模板</span></span><br><span class="line">      <span class="attr">headers:</span> <span class="string">&#123;</span> <span class="attr">Subject:</span> <span class="string">"[WARN] 报警邮件"</span><span class="string">&#125;</span> <span class="comment"># 邮件主题</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 企业微信方式</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">'qywx'</span></span><br><span class="line">    <span class="attr">webhook_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">send_resolved:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">to_party:</span> <span class="string">'1'</span> <span class="comment"># 接收组的id</span></span><br><span class="line">      <span class="attr">agent_id:</span> <span class="string">'xxxxxx'</span> <span class="comment"># 企业微信--&gt;自定应用--&gt;AgentId</span></span><br><span class="line">      <span class="attr">corp_id:</span> <span class="string">'xxxxxx'</span> <span class="comment"># 我的企业--&gt;CorpId[在底部]</span></span><br><span class="line">      <span class="attr">api_secret:</span> <span class="string">'xxxxxx'</span> <span class="comment"># 企业微信--&gt;自定应用--&gt;Secret</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">'<span class="template-variable">&#123;&#123; template "test.html" . &#125;&#125;</span>'</span> <span class="comment"># 模板设定</span></span><br></pre></td></tr></table></figure>
<p>这里不使用docker方式运行exporter，通过下载安装包安装node_exporter和mysqld_exporter。</p>
<ul>
<li>安装、启动node_exporter</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget https://github.com/prometheus/node_exporter/releases/download/v0.17.0/node_exporter-0.17.0.linux-amd64.tar.gz</span><br><span class="line">tar -xf node_exporter-0.17.0.linux-amd64.tar.gz</span><br><span class="line"><span class="built_in">cd</span> node_exporter-0.17.0.linux-amd64/</span><br><span class="line"><span class="comment"># 运行node_exporter</span></span><br><span class="line">nohup ./node_exporter &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看node_exporter监听的端口</span></span><br><span class="line">[root@zabbix02 node_exporter-0.17.0.linux-amd64]<span class="comment"># netstat -alntp |grep node_expo</span></span><br><span class="line">tcp6       0      0 :::9100                 :::*                    LISTEN      21164/./node_export </span><br><span class="line">tcp6       0      0 ::1:9100                ::1:57580               ESTABLISHED 21164/./node_export</span><br></pre></td></tr></table></figure>
<ul>
<li>安装、启动mysqld_exporter</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget https://github.com/prometheus/mysqld_exporter/releases/download/v0.11.0/mysqld_exporter-0.11.0.linux-amd64.tar.gz</span><br><span class="line">tar -xf mysqld_exporter-0.11.0.linux-amd64.tar.gz</span><br><span class="line"><span class="built_in">cd</span> exporter/mysqld_exporter-0.11.0.linux-amd64/</span><br><span class="line"><span class="comment"># 本文中，被监控的mysql与prometheus server在同一个机器上</span></span><br><span class="line"><span class="comment"># 将使用mysql中创建的名为exporter的用户查询mysql指标</span></span><br><span class="line">cat &lt;&lt;EOF &gt;.my.cnf</span><br><span class="line">[client]</span><br><span class="line">user=exporter</span><br><span class="line">password=exporter</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需创建mysql exporter用户</span></span><br><span class="line">CREATE USER <span class="string">'exporter'</span>@<span class="string">'localhost'</span> IDENTIFIED BY <span class="string">'exporter'</span>;</span><br><span class="line">GRANT PROCESS, REPLICATION CLIENT, SELECT ON *.* TO <span class="string">'exporter'</span>@<span class="string">'localhost'</span>;</span><br><span class="line"><span class="comment"># flush privileges;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行mysqld_exporter</span></span><br><span class="line">nohup ./mysqld_exporter --config.my-cnf=<span class="string">"./.my.cnf"</span> &amp;</span><br></pre></td></tr></table></figure>
<ul>
<li>运行prometheus</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d -p 9090:9090 --name prometheus --net=host \</span><br><span class="line">-v /root/config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml \</span><br><span class="line">-v /root/config/prometheus/rules.yml:/etc/prometheus/rules.yml prom/prometheus</span><br></pre></td></tr></table></figure>
<ul>
<li>运行alertmanager</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d -p 9093:9093 --net=host \</span><br><span class="line">-v /root/config/alertmanager/alertmanager.yml:/etc/alertmanager/config.yml \</span><br><span class="line">--name alertmanager prom/alertmanager</span><br></pre></td></tr></table></figure>
<ul>
<li>安装及配置grafana</li>
</ul>
<p>要通过grafana展示监控数据，见<a href="https://github.com/zlzgithub/docs/blob/master/grafana/grafana-intro.md" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/zlzgithub/docs/blob/master/grafana/grafana-intro.md</a></p>
<hr>
<p>以上步骤就绪后，通过浏览器访问看看</p>
<ul>
<li>Prometheus首页</li>
</ul>
<p><a href="http://192.168.100.150:9090/graph" rel="external nofollow noopener noreferrer" target="_blank">http://192.168.100.150:9090/graph</a></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/prometheus-intro.assets/1552624310656.png" alt="1552624310656"></p>
<ul>
<li>Alerts页面</li>
</ul>
<p><a href="http://192.168.100.150:9090/alerts" rel="external nofollow noopener noreferrer" target="_blank">http://192.168.100.150:9090/alerts</a>，显示了一条报警规则，说明此前的prometheus rules配置正常。</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/prometheus-intro.assets/1552624418930.png" alt="1552624418930"></p>
<ul>
<li>Targets页面</li>
</ul>
<p><a href="http://192.168.100.150:9090/targets" rel="external nofollow noopener noreferrer" target="_blank">http://192.168.100.150:9090/targets</a>，显示了已在线的metrics。</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/prometheus-intro.assets/1552624868689.png" alt="1552624868689"></p>
<ul>
<li>Alertmanager</li>
</ul>
<p><a href="http://192.168.100.150:9093/#/alerts" rel="external nofollow noopener noreferrer" target="_blank">http://192.168.100.150:9093/#/alerts</a></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/prometheus-intro.assets/1552624949727.png" alt="1552624949727"></p>
<ul>
<li>metrics</li>
</ul>
<ol>
<li>prometheus的metrics</li>
</ol>
<p><a href="http://192.168.100.150:9090/metrics" rel="external nofollow noopener noreferrer" target="_blank">http://192.168.100.150:9090/metrics</a></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/prometheus-intro.assets/1552625214005.png" alt="1552625214005"></p>
<ol start="2">
<li>mysql的metrics</li>
</ol>
<p><a href="http://192.168.100.150:9104/metrics" rel="external nofollow noopener noreferrer" target="_blank">http://192.168.100.150:9104/metrics</a></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/prometheus-intro.assets/1552625272026.png" alt="1552625272026"></p>
<h3 id="功能测试"><a href="#功能测试" class="headerlink" title="功能测试"></a>功能测试</h3><hr>
<p>在Grafana中，导入Prometheus 2.0 Status仪表板，显示如下：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/prometheus-intro.assets/1552640104574.png" alt="1552640104574"></p>
<p>导入Mysql-Overview模板的显示效果：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/prometheus-intro.assets/1552642425792.png" alt="1552642425792"></p>
<p>报警测试：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先运行一个webhook，前提已安装golang</span></span><br><span class="line">go get github.com/prometheus/alertmanager/examples/webhook</span><br><span class="line">webhook</span><br><span class="line"></span><br><span class="line"><span class="comment"># 另开一个窗口，人为拉高CPU使用率，观察webhook打印的日志</span></span><br><span class="line">cat /dev/zero &gt;/dev/null</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试完之后，[ctrl]+[c]终止</span></span><br></pre></td></tr></table></figure>
<p>alertmanager webhook在控制台输出的日志：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">[root@VM_0_2_centos alertmanager]# webhook</span><br><span class="line">2019/03/15 10:49:32 &#123;</span><br><span class="line"> &gt;  "receiver": "web<span class="tag">\<span class="name">\</span></span>.hook",</span><br><span class="line"> &gt;  "status": "firing",</span><br><span class="line"> &gt;  "alerts": [</span><br><span class="line"> &gt;    &#123;</span><br><span class="line"> &gt;      "status": "firing",</span><br><span class="line"> &gt;      "labels": &#123;</span><br><span class="line"> &gt;        "alertname": "hostCpuUsageAlert",</span><br><span class="line"> &gt;        "instance": "cvm001",</span><br><span class="line"> &gt;        "monitor": "codelab_monitor",</span><br><span class="line"> &gt;        "severity": "page"</span><br><span class="line"> &gt;      &#125;,</span><br><span class="line"> &gt;      "annotations": &#123;</span><br><span class="line"> &gt;        "description": "cvm001 CPU usage above 20<span class="comment">% (current value: 99.80000000001382)",</span></span><br><span class="line"> &gt;        "summary": "Instance cvm001 CPU usgae high"</span><br><span class="line"> &gt;      &#125;,</span><br><span class="line"> &gt;      "startsAt": "2019-03-15T02:49:22.839636267Z",</span><br><span class="line"> &gt;      "endsAt": "0001-01-01T00:00:00Z",</span><br><span class="line"> &gt;      "generatorURL": "http://VM_0_2_centos:9090/graph?g0.expr=sum+by<span class="comment">%28instance%29+%28avg+without%28cpu%29+%28irate%28node_cpu_seconds_total%7Bmode%21%3D%22idle%22%7D%5B5m%5D%29%29%29+%2A+100+%3E+20\u0026g0.tab=1"</span></span><br><span class="line"> &gt;    &#125;</span><br><span class="line"> &gt;  ],</span><br><span class="line"> &gt;  "groupLabels": &#123;</span><br><span class="line"> &gt;    "alertname": "hostCpuUsageAlert"</span><br><span class="line"> &gt;  &#125;,</span><br><span class="line"> &gt;  "commonLabels": &#123;</span><br><span class="line"> &gt;    "alertname": "hostCpuUsageAlert",</span><br><span class="line"> &gt;    "instance": "cvm001",</span><br><span class="line"> &gt;    "monitor": "codelab_monitor",</span><br><span class="line"> &gt;    "severity": "page"</span><br><span class="line"> &gt;  &#125;,</span><br><span class="line"> &gt;  "commonAnnotations": &#123;</span><br><span class="line"> &gt;    "description": "cvm001 CPU usage above 20<span class="comment">% (current value: 99.80000000001382)",</span></span><br><span class="line"> &gt;    "summary": "Instance cvm001 CPU usgae high"</span><br><span class="line"> &gt;  &#125;,</span><br><span class="line"> &gt;  "externalURL": "http://VM_0_2_centos:9093",</span><br><span class="line"> &gt;  "version": "4",</span><br><span class="line"> &gt;  "groupKey": "&#123;&#125;:&#123;alertname=<span class="tag">\<span class="name">"</span></span>hostCpuUsageAlert<span class="tag">\<span class="name">"</span></span>&#125;"</span><br><span class="line"> &gt;&#125;</span><br><span class="line"></span><br><span class="line">2019/03/15 10:52:52 &#123;</span><br><span class="line"> &gt;  "receiver": "web<span class="tag">\<span class="name">\</span></span>.hook",</span><br><span class="line"> &gt;  "status": "resolved",</span><br><span class="line"> &gt;  "alerts": [</span><br><span class="line"> &gt;    &#123;</span><br><span class="line"> &gt;      "status": "resolved",</span><br><span class="line"> &gt;      "labels": &#123;</span><br><span class="line"> &gt;        "alertname": "hostCpuUsageAlert",</span><br><span class="line"> &gt;        "instance": "cvm001",</span><br><span class="line"> &gt;        "monitor": "codelab_monitor",</span><br><span class="line"> &gt;        "severity": "page"</span><br><span class="line"> &gt;      &#125;,</span><br><span class="line"> &gt;      "annotations": &#123;</span><br><span class="line"> &gt;        "description": "cvm001 CPU usage above 20<span class="comment">% (current value: 99.79999999999563)",</span></span><br><span class="line"> &gt;        "summary": "Instance cvm001 CPU usgae high"</span><br><span class="line"> &gt;      &#125;,</span><br><span class="line"> &gt;      "startsAt": "2019-03-15T02:49:22.839636267Z",</span><br><span class="line"> &gt;      "endsAt": "2019-03-15T02:52:52.839636267Z",</span><br><span class="line"> &gt;      "generatorURL": "http://VM_0_2_centos:9090/graph?g0.expr=sum+by<span class="comment">%28instance%29+%28avg+without%28cpu%29+%28irate%28node_cpu_seconds_total%7Bmode%21%3D%22idle%22%7D%5B5m%5D%29%29%29+%2A+100+%3E+20\u0026g0.tab=1"</span></span><br><span class="line"> &gt;    &#125;</span><br><span class="line"> &gt;  ],</span><br><span class="line"> &gt;  "groupLabels": &#123;</span><br><span class="line"> &gt;    "alertname": "hostCpuUsageAlert"</span><br><span class="line"> &gt;  &#125;,</span><br><span class="line"> &gt;  "commonLabels": &#123;</span><br><span class="line"> &gt;    "alertname": "hostCpuUsageAlert",</span><br><span class="line"> &gt;    "instance": "cvm001",</span><br><span class="line"> &gt;    "monitor": "codelab_monitor",</span><br><span class="line"> &gt;    "severity": "page"</span><br><span class="line"> &gt;  &#125;,</span><br><span class="line"> &gt;  "commonAnnotations": &#123;</span><br><span class="line"> &gt;    "description": "cvm001 CPU usage above 20<span class="comment">% (current value: 99.79999999999563)",</span></span><br><span class="line"> &gt;    "summary": "Instance cvm001 CPU usgae high"</span><br><span class="line"> &gt;  &#125;,</span><br><span class="line"> &gt;  "externalURL": "http://VM_0_2_centos:9093",</span><br><span class="line"> &gt;  "version": "4",</span><br><span class="line"> &gt;  "groupKey": "&#123;&#125;:&#123;alertname=<span class="tag">\<span class="name">"</span></span>hostCpuUsageAlert<span class="tag">\<span class="name">"</span></span>&#125;"</span><br><span class="line"> &gt;&#125;</span><br></pre></td></tr></table></figure>
<p>当CPU使用率高于20%时，Prometheus Alerts页面的报警状态先后变化顺序：in active -&gt; pending -&gt; firing；恢复后，日志显示resolved。</p>
<p>在报警项resolved之前，Alertmanager页面：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/prometheus-intro.assets/1552620299332.png" alt="1552620299332"></p>
<p>通过测试可以看出，webhook方式发出通知是正常的。未测试email和企业微信。</p>
<hr>
<p>(End)</p>
]]></content>
      <categories>
        <category>监控</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>Prometheus</title>
    <url>/monitoring/prometheus/prometheus/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<blockquote>
<p>在Docker中运行Prometheus监控组件，包括prometheus, alertmanager, grafana, 及相关exporter，实现基本的业务监控。</p>
</blockquote>
<a id="more"></a>
<p>下图是官方网站上的Prometheus完整架构图：</p>
<p><img src="https://prometheus.io/assets/architecture.png" alt="Prometheus完整架构图"></p>
<hr>
<h2 id="Prometheus配置"><a href="#Prometheus配置" class="headerlink" title="Prometheus配置"></a>Prometheus配置</h2><p>配置文件目录：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@docker-dev docker-svc]<span class="comment"># tree -C -L 4 prometheus/</span></span><br><span class="line">prometheus/</span><br><span class="line">├── config</span><br><span class="line">│   ├── alertmanager</span><br><span class="line">│   │   ├── alertmanager.yml</span><br><span class="line">│   │   └── template</span><br><span class="line">│   │       └── test.tmpl</span><br><span class="line">│   └── prometheus</span><br><span class="line">│       ├── prometheus.yml</span><br><span class="line">│       └── rules</span><br><span class="line">│           └── default.yml</span><br><span class="line">└── docker-compose.yml</span><br></pre></td></tr></table></figure>
<p>docker-compose.yml:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.0'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">alertmanager:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">prom/alertmanager</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config/alertmanager:/etc/alertmanager</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"9093:9093"</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">SERVICE_NAME:</span> <span class="string">alertmanager</span></span><br><span class="line">      <span class="attr">SERVICE_TAGS:</span> <span class="string">"alertmanager,http"</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">prometheus:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">prom/prometheus</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config/prometheus/rules:/etc/prometheus/rules</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">SERVICE_NAME:</span> <span class="string">prometheus</span></span><br><span class="line">      <span class="attr">SERVICE_TAGS:</span> <span class="string">"prometheus-target,prometheus,http"</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9090</span><span class="string">:9090</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">grafana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">grafana/grafana</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line"><span class="comment">#      - grafana-storage:/var/lib/grafana</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/grafana:/var/lib/grafana</span></span><br><span class="line">    </span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"GF_SERVER_ROOT_URL=http://grafana.server.name"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"GF_SECURITY_ADMIN_PASSWORD=xxxxxx"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"SERVICE_NAME=grafana"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"SERVICE_TAGS=prometheus-target,grafana,http"</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3000</span><span class="string">:3000</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">node-exporter:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">prom/node-exporter</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/proc:/host/proc:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/sys:/host/sys:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/:/rootfs:ro</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9100</span><span class="string">:9100</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">SERVICE_TAGS:</span> <span class="string">"prometheus-target"</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'--path.procfs=/host/proc'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'--path.sysfs=/host/sys'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'--collector.filesystem.ignored-mount-points="^(/rootfs|/host|)/(sys|proc|dev|host|etc)($$|/)"'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'--collector.filesystem.ignored-fs-types="^(sys|proc|auto|cgroup|devpts|ns|au|fuse\.lxc|mqueue)(fs|)$$"'</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>监控</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>Prometheus联邦</title>
    <url>/monitoring/prometheus/prometheus_federate/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<blockquote>
<p>Prometheus联邦</p>
</blockquote>
<a id="more"></a>
<p>prometheus.yml示例：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">scrape_interval:</span> <span class="string">15s</span></span><br><span class="line">  <span class="attr">scrape_timeout:</span> <span class="string">10s</span></span><br><span class="line">  <span class="attr">evaluation_interval:</span> <span class="string">1m</span></span><br><span class="line"><span class="attr">alerting:</span></span><br><span class="line">  <span class="attr">alertmanagers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">x.xx.xxx.xxx:9093</span></span><br><span class="line">    <span class="attr">scheme:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line"><span class="attr">rule_files:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">/etc/prometheus/rules/*.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">federate</span></span><br><span class="line">  <span class="attr">honor_labels:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">params:</span></span><br><span class="line">    <span class="string">match[]:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'&#123;job=~"\\w.*"&#125;'</span></span><br><span class="line">    <span class="comment">#- '&#123;job=~"[a-zA-Z_].*"&#125;'</span></span><br><span class="line">  <span class="attr">metrics_path:</span> <span class="string">/federate</span></span><br><span class="line">  <span class="attr">scheme:</span> <span class="string">http</span></span><br><span class="line">  <span class="attr">static_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">targets:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">x.xx.xxx.xxx:9090</span></span><br><span class="line">	</span><br><span class="line"><span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">federate2</span></span><br><span class="line">  <span class="attr">honor_labels:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">params:</span></span><br><span class="line">    <span class="string">match[]:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'&#123;job=~"\\w.*"&#125;'</span></span><br><span class="line">  <span class="attr">scrape_interval:</span> <span class="string">30s</span></span><br><span class="line">  <span class="attr">scrape_timeout:</span> <span class="string">30s</span></span><br><span class="line">  <span class="attr">metrics_path:</span> <span class="string">/federate</span></span><br><span class="line">  <span class="attr">scheme:</span> <span class="string">http</span></span><br><span class="line">  <span class="attr">static_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">targets:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">x.xx.xxx.xxx:xxxx</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">federate_pmm_server</span></span><br><span class="line">  <span class="attr">scrape_interval:</span> <span class="string">30s</span></span><br><span class="line">  <span class="attr">scrape_timeout:</span>  <span class="string">30s</span></span><br><span class="line">  <span class="attr">honor_labels:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">metrics_path:</span> <span class="string">/prometheus/federate</span></span><br><span class="line">  <span class="attr">basic_auth:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">"xxx"</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">"xxx"</span></span><br><span class="line">  <span class="attr">params:</span></span><br><span class="line">    <span class="string">match[]:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'&#123;job=~"\\w.*"&#125;'</span></span><br><span class="line">  <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">x.xx.xxx.xxx:xxxx</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>监控</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>通过Zabbix的自动发现（规则）自动创建监控项</title>
    <url>/monitoring/zabbix/zabbix-discovery-rule/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<p>下图是一个已配置并启用的自动发现规则:</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/zabbix-discovery-rule.assets/1552289524930.png" alt="1552289524930"></p>
<a id="more"></a>
<p>应用到165.194这个主机后，自动发现的监控项：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/zabbix-discovery-rule.assets/1552292766307.png" alt="1552292766307"></p>
<h3 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h3><hr>
<ul>
<li>创建Template</li>
</ul>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/zabbix-discovery-rule.assets/1552289699169.png" alt="1552289699169"></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/zabbix-discovery-rule.assets/1552291377011.png" alt="1552291377011"></p>
<ul>
<li>创建Discovery rule</li>
</ul>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/zabbix-discovery-rule.assets/1552290037822.png" alt="1552290037822"></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/zabbix-discovery-rule.assets/1552290165972.png" alt="1552290165972"></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/zabbix-discovery-rule.assets/1552290648939.png" alt="1552290648939"></p>
<p>键值<code>readPorts</code>跟被监控端配置的参数有关，下面再提。</p>
<ul>
<li>创建监控项原型</li>
</ul>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/zabbix-discovery-rule.assets/1552290398568.png" alt="1552290398568"></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/zabbix-discovery-rule.assets/1552290435754.png" alt="1552290435754"></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/zabbix-discovery-rule.assets/1552290764479.png" alt="1552290764479"></p>
<p>宏引用符号{ #SERVICE }和{ #TCP_PORT }跟被监控端返回的json数据有关。<code>net.tcp.listen[&lt;port&gt;]</code>表示监听目标机器的<code>&lt;port&gt;</code>端口状态，返回值为0或1，0表示Down，1表示Up。另外，<code>$1</code>表示键值里的第一个参数，即<code>&lt;port&gt;</code>。</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/zabbix-discovery-rule.assets/1552291332721.png" alt="1552291332721"></p>
<ul>
<li>创建触发器原型</li>
</ul>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/zabbix-discovery-rule.assets/1552291459399.png" alt="1552291459399"></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/zabbix-discovery-rule.assets/1552291553384.png" alt="1552291553384"></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/zabbix-discovery-rule.assets/1552291665378.png" alt="1552291665378"></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/zabbix-discovery-rule.assets/1552291704285.png" alt="1552291704285"></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/zabbix-discovery-rule.assets/1552291742293.png" alt="1552291742293"></p>
<p>添加完监控项和触发器原型的样子：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/zabbix-discovery-rule.assets/1552291961703.png" alt="1552291961703"></p>
<ul>
<li><p>添加主机并关联此模板</p>
<p>此略。</p>
</li>
</ul>
<hr>
<h3 id="被监控端配置"><a href="#被监控端配置" class="headerlink" title="被监控端配置"></a>被监控端配置</h3><p>首先，看一下/etc/zabbix目录下的文件。scripts目录是新加的，zabbix_agentd.conf也作了修改。</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/zabbix-discovery-rule.assets/1552292968159.png" alt="1552292968159"></p>
<p>使用自动发现功能，需要返回符号zabbix要求的json数据：</p>
<p>例如：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"data"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"&#123;#SERVICE&#125;"</span>: <span class="string">"phjd_mysql"</span>,</span><br><span class="line">            <span class="string">"&#123;#TCP_PORT&#125;"</span>: <span class="string">"28001"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"&#123;#SERVICE&#125;"</span>: <span class="string">"philips_taxfree_tuangou_payment_management"</span>,</span><br><span class="line">            <span class="string">"&#123;#TCP_PORT&#125;"</span>: <span class="string">"16200"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其形式大致如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"data"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"&#123;#KEY01&#125;"</span>: <span class="string">"value01_01"</span>,</span><br><span class="line">            <span class="string">"&#123;#KEY02&#125;"</span>: <span class="string">"value01_02"</span>,</span><br><span class="line">            <span class="string">"&#123;#KEY03&#125;"</span>: <span class="string">"value01_03"</span>,</span><br><span class="line">            ...</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"&#123;#KEY01&#125;"</span>: <span class="string">"value02_01"</span>,</span><br><span class="line">            <span class="string">"&#123;#KEY02&#125;"</span>: <span class="string">"value02_02"</span>,</span><br><span class="line">            <span class="string">"&#123;#KEY02&#125;"</span>: <span class="string">"value02_03"</span>,</span><br><span class="line">            ...</span><br><span class="line">        &#125;,</span><br><span class="line">        ...</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>readPorts.sh脚本的内容很简单，就是读取已准备好的json数据文件ports.json，作为返回给zabbix server的值：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@172 scripts]<span class="comment"># cat readPorts.sh </span></span><br><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">mypath=$(<span class="built_in">cd</span> `dirname <span class="variable">$0</span>`; <span class="built_in">pwd</span>)</span><br><span class="line">cat <span class="variable">$mypath</span>/ports.json</span><br></pre></td></tr></table></figure>
<p>为了返回给server端，需要再zabbix_agentd.conf中配置：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/zabbix-discovery-rule.assets/1552293926733.png" alt="1552293926733"></p>
<p>这样，server端就可以使用<code>readPorts</code>这个键值，以获取写在ports.json中的数据。<code>readPorts</code>下面定义的<code>getPorts、getAllPorts</code>是另外两个可用的自定义键值。</p>
<p>自动发现需监控的服务/端口，难点不在于读取，而在于自动生成json数据文件。此处的ports.json是根据ports.ini转换而来的。</p>
<p>ports.ini文件需人工填写：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/zabbix-discovery-rule.assets/1552295007248.png" alt="1552295007248"></p>
<p>getPorts.py脚本如下，用于转换ports.ini为ports.json：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> os, json, re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mypath = os.path.dirname(os.path.realpath(__file__))</span><br><span class="line">port_list = []</span><br><span class="line">port_dict = &#123;<span class="string">"data"</span>:<span class="literal">None</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'%s/ports.ini'</span> % mypath, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        line = line.strip()</span><br><span class="line">        <span class="keyword">if</span> line:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                port_srv = line.split(<span class="string">':'</span>)</span><br><span class="line">                port_list.append(&#123;<span class="string">"&#123;#TCP_PORT&#125;"</span>: port_srv[<span class="number">1</span>].strip(),</span><br><span class="line">                                  <span class="string">"&#123;#SERVICE&#125;"</span>: port_srv[<span class="number">0</span>].strip()&#125;)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">port_dict[<span class="string">"data"</span>] = port_list</span><br><span class="line">json_str = json.dumps(port_dict, sort_keys=<span class="literal">True</span>, indent=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># json_str已是json字符串，但每行尾部有一个多余的空格，zabbix不接受，须删除行尾空格</span></span><br><span class="line">p = re.compile(<span class="string">"\s+$"</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> json_str.split(<span class="string">'\n'</span>):</span><br><span class="line">    ss = re.sub(p, <span class="string">""</span>, line)</span><br><span class="line">    <span class="keyword">print</span> ss</span><br></pre></td></tr></table></figure>
<p>转换ports.ini为json形式：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/zabbix-discovery-rule.assets/1552294366863.png" alt="1552294366863"></p>
<p>至于getAllPorts.py，它的功能是直接返回主机上实际开放的端口数据：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/zabbix-discovery-rule.assets/1552294862652.png" alt="1552294862652"></p>
]]></content>
      <categories>
        <category>监控</category>
      </categories>
      <tags>
        <tag>Zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title>Zabbix的安装与使用</title>
    <url>/monitoring/zabbix/zabbix-intro/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<blockquote>
<p>Linux环境：CentOS Linux release 7.5.1804 (Core)</p>
</blockquote>
<h3 id="1-安装MySQL"><a href="#1-安装MySQL" class="headerlink" title="1. 安装MySQL"></a>1. 安装MySQL</h3><ul>
<li>安装mariadb</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum -y install mariadb mariadb-server mariadb-devel</span><br><span class="line">systemctl start mariadb</span><br><span class="line">systemctl <span class="built_in">enable</span> mariadb</span><br><span class="line">mysql_secure_installation <span class="comment"># 通过mysql配置向导完成某些设置，也可通过修改表的方式完成设置</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>配置字符集</li>
</ul>
<p>在/etc/my.cnf的[mysqld]下添加：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="attr">init_connect</span>=<span class="string">'SET collation_connection = utf8_unicode_ci'</span></span><br><span class="line"><span class="attr">init_connect</span>=<span class="string">'SET NAMES utf8'</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8</span><br><span class="line"><span class="attr">collation-server</span>=utf8_unicode_ci</span><br><span class="line">skip-character-set-client-handshake</span><br></pre></td></tr></table></figure>
<p>在/etc/my.cnf.d/client.cnf的[client]中添加：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">default-character-set</span>=utf8</span><br></pre></td></tr></table></figure>
<p>在/etc/my.cnf.d/<a href="https://www.centos.bz/tag/mysql-2/" rel="external nofollow noopener noreferrer" target="_blank">mysql</a>-clients.cnf的[mysql]中添加：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">default-character-set</span>=utf8</span><br></pre></td></tr></table></figure>
<p>重启使生效：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl restart mariadb</span><br></pre></td></tr></table></figure>
<p>查看字符集：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; show variables like &quot;%character%&quot;;</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| Variable_name            | Value                      |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| character_set_client     | utf8                       |</span><br><span class="line">| character_set_connection | utf8                       |</span><br><span class="line">| character_set_database   | utf8                       |</span><br><span class="line">| character_set_filesystem | binary                     |</span><br><span class="line">| character_set_results    | utf8                       |</span><br><span class="line">| character_set_server     | utf8                       |</span><br><span class="line">| character_set_system     | utf8                       |</span><br><span class="line">| character_sets_dir       | /usr/share/mysql/charsets/ |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">8 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; show variables like &quot;%collation%&quot;;</span><br><span class="line">+----------------------+-----------------+</span><br><span class="line">| Variable_name        | Value           |</span><br><span class="line">+----------------------+-----------------+</span><br><span class="line">| collation_connection | utf8_general_ci |</span><br><span class="line">| collation_database   | utf8_general_ci |</span><br><span class="line">| collation_server     | utf8_general_ci |</span><br><span class="line">+----------------------+-----------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>MySQL的安装及配置完成。</p>
<hr>
<h3 id="2-安装Zabbix"><a href="#2-安装Zabbix" class="headerlink" title="2. 安装Zabbix"></a>2. 安装Zabbix</h3><p>Zabbix安装步骤见：<a href="https://www.zabbix.com/download?zabbix=3.0&amp;os_distribution=centos&amp;os_version=7&amp;db=mysql" rel="external nofollow noopener noreferrer" target="_blank">CentOS 7安装zabbix 3.0</a>，基于RPM方式安装Zabbix 3.0.25。</p>
<p><em>如果想通过编译源码安装，可参考<a href="https://github.com/zlzgithub/docs/blob/master/zabbix/make-install-zabbix.md" rel="external nofollow noopener noreferrer" target="_blank">Zabbix源码安装过程记录</a>。</em></p>
<p>另外，安装zabbix_get以便测试：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@VM_0_6_centos ~]<span class="comment"># yum install zabbix-get</span></span><br><span class="line"><span class="comment"># 添加监控项时，可在zabbix_server上通过zabbix_get测试命令是否有效</span></span><br><span class="line">[root@VM_0_6_centos ~]<span class="comment"># zabbix_get -s 188.131.133.107 -k vfs.fs.size[/,pused]</span></span><br><span class="line">17.268719</span><br></pre></td></tr></table></figure>
<p>在安装完zabbix之后，需在MySQL中创建zabbix数据库并导入初始数据表。</p>
<p>安装配置完成并启动所有服务后，以<code>http://&lt;zabbix_server_ip&gt;/zabbix</code>访问zabbix控制面板，初始用户名/密码为：Admin/zabbix。</p>
<hr>
<h3 id="3-Zabbix监控"><a href="#3-Zabbix监控" class="headerlink" title="3. Zabbix监控"></a>3. Zabbix监控</h3><p>以下添加一个<strong>被监控主机</strong>cvm001，监控其cpu、磁盘、80端口等。</p>
<table>
<thead>
<tr>
<th>主机</th>
<th>监控项</th>
</tr>
</thead>
<tbody>
<tr>
<td>cvm001</td>
<td>cpu 平均负载、cpu 上下文切换频率</td>
</tr>
<tr>
<td>cvm001</td>
<td>根分区剩余空间百分比</td>
</tr>
<tr>
<td>cvm001</td>
<td>80端口状态（httpd服务）</td>
</tr>
<tr>
<td>cvm001</td>
<td>mysql进程数</td>
</tr>
</tbody>
</table>
<h4 id="3-1-添加主机"><a href="#3-1-添加主机" class="headerlink" title="3.1 添加主机"></a>3.1 添加主机</h4><p>【配置】&gt;【主机】&gt;【创建主机】：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/zabbix-intro.assets/1551234474023.png" alt="1551234474023"></p>
<h4 id="3-2-添加监控项"><a href="#3-2-添加监控项" class="headerlink" title="3.2 添加监控项"></a>3.2 添加监控项</h4><p>【配置】&gt;【主机】，在刚刚新加的主机所在行，【监控项】&gt;【创建监控项】：</p>
<p>1）CPU负载</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/zabbix-intro.assets/1551235105076.png" alt="1551235105076"></p>
<p>设置历史数据保留7天，并为cpu相关的监控定义了一个名为cpu的应用集。</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/zabbix-intro.assets/1551235235750.png" alt="1551235235750"></p>
<p>2）CPU上下文切换次数</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/zabbix-intro.assets/1551235576710.png" alt="1551235576710"></p>
<p>储存值选择“差量（每秒速率）”：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/zabbix-intro.assets/1551260458874.png" alt="1551260458874"></p>
<p>3）根分区使用率</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/zabbix-intro.assets/1551235817902.png" alt="1551235817902"></p>
<p>“pused”表示已使用空间所占百分比。</p>
<p>4）mysql的进程</p>
<p>通过<code>proc.num[mysqld,mysql]</code>获取用户mysql的进程mysqld的数目：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/zabbix-intro.assets/1551236027506.png" alt="1551236027506"></p>
<p>5）80端口状态</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/zabbix-intro.assets/1551236331993.png" alt="1551236331993"></p>
<p>查看值选择的是Service state，正常状态值是”Up”：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/zabbix-intro.assets/1551236436165.png" alt="1551236436165"></p>
<p>如下图，已添加完上面的5个监控项：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/zabbix-intro.assets/1551236245002.png" alt="1551236245002"></p>
<p>查看最新监控数据如下：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/zabbix-intro.assets/1551236816850.png" alt="1551236816850"></p>
<p>查看cpu上下文切换次数的【图形】：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/zabbix-intro.assets/1551237146452.png" alt="1551237146452"></p>
<p><em>图表标题中文字符显示不出来，是字体的原因，可自行替换，此处从略。</em></p>
<h4 id="3-3-创建触发器"><a href="#3-3-创建触发器" class="headerlink" title="3.3 创建触发器"></a>3.3 创建触发器</h4><p>【配置】&gt;【主机】，主机所在行的【触发器】&gt;【创建触发器】：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/zabbix-intro.assets/1551260715724.png" alt="1551260715724"></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/zabbix-intro.assets/1551249076606.png" alt="1551249076606"></p>
<h4 id="3-4-自定义报警媒介"><a href="#3-4-自定义报警媒介" class="headerlink" title="3.4 自定义报警媒介"></a>3.4 自定义报警媒介</h4><p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/zabbix-intro.assets/1551248906136.png" alt="1551248906136"></p>
<p>写一个模拟报警脚本如下，放置在<code>/usr/lib/zabbix/alertscripts/myAlert.sh</code>:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">alert_path=/var/www/html/myalert</span><br><span class="line">mkdir -p <span class="variable">$alert_path</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">gen_html</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">""</span><span class="string">"&lt;html&gt;</span></span><br><span class="line"><span class="string">    &lt;head&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;h1&gt;Alert&lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &lt;pre&gt;</span></span><br><span class="line"><span class="string">    "</span><span class="string">""</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"SENDTO:<span class="variable">$1</span>"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"SUBJECT:<span class="variable">$2</span>"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"MESSAGE:<span class="variable">$3</span>"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">    &lt;/pre&gt;</span></span><br><span class="line"><span class="string">    &lt;/body&gt;</span></span><br><span class="line"><span class="string">    &lt;/html&gt;"</span><span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gen_html <span class="variable">$@</span> &gt; <span class="variable">$alert_path</span>/1.html</span><br><span class="line">chmod -R 755 <span class="variable">$alert_path</span></span><br></pre></td></tr></table></figure>
<p>并修改/etc/zabbix/zabbix_server.conf配置：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">AllowRoot</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">User</span>=root</span><br></pre></td></tr></table></figure>
<h4 id="3-5-用户-告警绑定"><a href="#3-5-用户-告警绑定" class="headerlink" title="3.5 用户-告警绑定"></a>3.5 用户-告警绑定</h4><p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/zabbix-intro.assets/1551249389835.png" alt="1551249389835"></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/zabbix-intro.assets/1551255673570.png" alt="1551255673570"></p>
<h4 id="3-6-创建动作"><a href="#3-6-创建动作" class="headerlink" title="3.6 创建动作"></a>3.6 创建动作</h4><p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/zabbix-intro.assets/1551249482028.png" alt="1551249482028"></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/zabbix-intro.assets/1551249617900.png" alt="1551249617900"></p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/zabbix-intro.assets/1551249780128.png" alt="1551249780128"></p>
<h4 id="3-7-模拟报警"><a href="#3-7-模拟报警" class="headerlink" title="3.7 模拟报警"></a>3.7 模拟报警</h4><p>模拟报警条件：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 假设当前占用率19%，写一个大小约1GB的文件，使根分区占用率 &gt; 20% 达到触发报警</span></span><br><span class="line">[root@VM_0_7_centos ~]<span class="comment"># dd if=/dev/zero bs=1024 count=1000000 of=/root/1Gb.file</span></span><br></pre></td></tr></table></figure>
<p>查看监控图形（设定的阈值是16%）：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/zabbix-intro.assets/1551241908732.png" alt="1551241908732"></p>
<p>查看触发器状态：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/zabbix-intro.assets/1551241947776.png" alt="1551241947776"></p>
<p>查看事件记录：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/zabbix-intro.assets/1551250126172.png" alt="1551250126172"></p>
<p>查看报警通知结果：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/zabbix-intro.assets/1551252223032.png" alt="1551252223032"></p>
<p>当报警解除后：</p>
<p><img src="https://aly-zlz.oss-cn-shenzhen.aliyuncs.com/images/2019/zabbix-intro.assets/1551253201767.png" alt="1551253201767"></p>
<p>经测试，报警机制正常。正式环境中，配置内置的Email或SMS报警媒介，或使用自定义的邮件、微信、短信告警脚本等替代。</p>
<hr>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://www.zabbix.com/documentation/3.0/manual/quickstart" rel="external nofollow noopener noreferrer" target="_blank">zabbix 3.0 quickstart</a></p>
<hr>
<p>（End)</p>
]]></content>
      <categories>
        <category>监控</category>
      </categories>
      <tags>
        <tag>Zabbix</tag>
      </tags>
  </entry>
</search>
